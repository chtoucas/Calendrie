# Global editor config
#
# "Unlike EditorConfig files, global configuration files can't be used to
#  configure editor style settings for IDEs, such as indent size or whether to
#  trim trailing whitespace. Instead, they're designed purely for specifying
#  project-level analyzer configuration options."
#
# Notes
# - Release builds turn warnings into errors.
# - Setting the severity:
#   Use code-style severity or IDExxxx severity, but NOT both
#   https://github.com/dotnet/roslyn/issues/52991#issuecomment-1960692440
#   The magic property to make this works seems to be the MSBuild property
#   EnableCodeStyleSeverity
#   https://github.com/dotnet/roslyn/pull/73843
#
# See
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview
# https://learn.microsoft.com/en-gb/dotnet/fundamentals/code-analysis/configuration-files#global-analyzerconfig
# Examples
# https://github.com/dotnet/roslyn/blob/main/.editorconfig
# https://github.com/dotnet/runtime/blob/main/.editorconfig

is_global = true

#### Severity ##################################################################

# Legit values: error, warning, suggestion, silent, none, default

# Default severity
#dotnet_analyzer_diagnostic.severity = warning

# Default severity for analyzer diagnostics with category 'Style'
dotnet_analyzer_diagnostic.category-Style.severity = warning

#### Language and unnecessary code rules #######################################

# We override a code-style option to specify a non-default value -or- severity.

#### Rules with no associated code-style options ####

# See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/

# IDE0001: Simplify name (VS-only setting)
# IDE0002: Simplify member access (VS-only setting)
# IDE0004: Remove unnecessary cast
# IDE0005: Remove unnecessary using directives (Only enabled when GenerateDocumentationFile = true)
# IDE0010: Add missing cases to switch statement
# IDE0035: Remove unreachable code (VS-only setting)
# IDE0050: Convert anonymous type to tuple (Obsolete)
# IDE0051: Remove unused private member
# IDE0052: Remove unread private member
# IDE0064: Make struct fields writable
# IDE0070: Use 'System.HashCode.Combine'
# IDE0072: Add missing cases to switch expression
# IDE0080: Remove unnecessary suppression operator
# IDE0081: Remove ByVal (Visual Basic)
# IDE0082: Convert typeof to nameof
# IDE0100: Remove unnecessary equality operator
# IDE0110: Remove unnecessary discard
# IDE0120: Simplify LINQ expression
# IDE0240: Nullable directive is redundant
# IDE0241: Nullable directive is unnecessary
# IDE0280: Use 'nameof'

#### .NET coding conventions ####

# IDE0046: Use conditional expression for return
# Default values is: true
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

# IDE0047: Remove unnecessary parentheses
# IDE0048: Add parentheses for clarity
# Default values are:
# always_for_clarity / always_for_clarity / always_for_clarity / never_if_unnecessary
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_binary_operators      = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators             = never_if_unnecessary:suggestion

## IDE0049: Use language keywords instead of framework type names for type references (VS-only setting)
## Default values are: true / true
#dotnet_style_predefined_type_for_locals_parameters_members = true:warning
## I prefer Int32.MaxValue but using false below causes VS to raise a warning
## when we use a predefined type in an XML comment :-(
#dotnet_style_predefined_type_for_member_access = true:warning

# IDE0073: Require file header
# Default values is: unset
file_header_template = SPDX-License-Identifier: BSD-3-Clause\nCopyright (c) Tran Ngoc Bich. All rights reserved.

#### C# coding conventions ####

# IDE0007: Use var instead of explicit type
# IDE0008: Use explicit type instead of var
# Default values are: false / false / false
csharp_style_var_for_built_in_types    = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere             = true:suggestion

# IDE0011: Add braces
# Default values is: true
csharp_prefer_braces = when_multiline:warning

# IDE0022: Use expression body for methods
# Default values is: false
csharp_style_expression_bodied_methods = when_on_single_line:suggestion

# IDE0023: Use expression body for conversion operators
# IDE0024: Use expression body for operators
# Default values is: false
csharp_style_expression_bodied_operators = when_on_single_line:suggestion

# IDE0032: Use auto-implemented property
# Default values is: true
dotnet_style_prefer_auto_properties = true:suggestion

# IDE0040:
# Default value is: for_non_interface_members
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

# IDE0061: Use expression body for local functions
# Default values is: false
csharp_style_expression_bodied_local_functions = when_on_single_line:suggestion

# IDE0065: using directive placement
# Default values is: outside_namespace
csharp_using_directive_placement = inside_namespace:warning

# IDE0078: Use pattern matching
# Default values is: true
csharp_style_prefer_pattern_matching = false:suggestion

# IDE0160: Use block-scoped namespace
# IDE0161: Use file-scoped namespace
# Default values is: block_scoped
csharp_style_namespace_declarations = file_scoped:warning

# IDE0290: Use primary constructor
# Default values is: true
csharp_style_prefer_primary_constructors = false:warning

# IDE0305: Use collection expression for fluent
# Default values is: true (.NET 8.0) or when_types_loosely_match (.NET 9.0+)
dotnet_style_prefer_collection_expression = when_types_exactly_match:suggestion

#### Miscellaneous rules #######################################################

# Only two rules; no associated code-style options

# IDE0076: Remove invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0076.severity = warning
# IDE0077: Avoid legacy format target in global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0077.severity = warning

#### Formatting rules (IDE0055) ################################################

# All formatting options have rule ID IDE0055 and title "Fix formatting"
dotnet_diagnostic.IDE0055.severity = warning

#### Naming rules (IDE1006) ####################################################

# "Severity specification within a naming rule is only respected inside
#  development IDEs, such as Visual Studio. This setting is not understood by
#  the C# or VB compilers, hence not respected during build."
#
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules

# All naming options have rule ID IDE1006 and title "Naming rule violation"
# The severity value must be warning or error to be enforced on build.
dotnet_diagnostic.IDE1006.severity = warning

dotnet_naming_style.Pascal_Case_Style.capitalization = pascal_case
dotnet_naming_style.Camel_Case_Style.capitalization = camel_case

#### Types ####

# Interfaces are PascalCase and start with I
dotnet_naming_rule.Interface.severity = warning
dotnet_naming_rule.Interface.symbols  = Interface_Symbol
dotnet_naming_rule.Interface.style    = Interface_Style

dotnet_naming_symbols.Interface_Symbol.applicable_kinds = interface

dotnet_naming_style.Interface_Style.required_prefix = I
dotnet_naming_style.Interface_Style.capitalization  = pascal_case

# Types are PascalCase
dotnet_naming_rule.Type.severity = warning
dotnet_naming_rule.Type.symbols  = Type_Symbol
dotnet_naming_rule.Type.style    = Pascal_Case_Style

dotnet_naming_symbols.Type_Symbol.applicable_kinds = class, struct, enum

#### Fields ####

# Non-private static fields are PascalCase
dotnet_naming_rule.NonPrivateStaticField.severity = warning
dotnet_naming_rule.NonPrivateStaticField.symbols  = NonPrivateStaticField_Symbols
dotnet_naming_rule.NonPrivateStaticField.style   = Pascal_Case_Style

dotnet_naming_symbols.NonPrivateStaticField_Symbols.applicable_kinds           = field
dotnet_naming_symbols.NonPrivateStaticField_Symbols.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.NonPrivateStaticField_Symbols.required_modifiers         = static

# Non-private readonly fields are PascalCase
dotnet_naming_rule.NonPrivateReadOnlyField.severity = warning
dotnet_naming_rule.NonPrivateReadOnlyField.symbols  = NonPrivateReadOnlyField_Symbols
dotnet_naming_rule.NonPrivateReadOnlyField.style    = Pascal_Case_Style

dotnet_naming_symbols.NonPrivateReadOnlyField_Symbols.applicable_kinds           = field
dotnet_naming_symbols.NonPrivateReadOnlyField_Symbols.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.NonPrivateReadOnlyField_Symbols.required_modifiers         = readonly

# Private static fields are camelCase and start with s_
dotnet_naming_rule.PrivateStaticField.severity = warning
dotnet_naming_rule.PrivateStaticField.symbols  = PrivateStaticField_Symbols
dotnet_naming_rule.PrivateStaticField.style    = PrivateStaticField_Style

dotnet_naming_symbols.PrivateStaticField_Symbols.applicable_kinds           = field
dotnet_naming_symbols.PrivateStaticField_Symbols.applicable_accessibilities = private
dotnet_naming_symbols.PrivateStaticField_Symbols.required_modifiers         = static

dotnet_naming_style.PrivateStaticField_Style.capitalization  = pascal_case
dotnet_naming_style.PrivateStaticField_Style.required_prefix = s_

# Private instance fields are camelCase and start with _
dotnet_naming_rule.PrivateInstanceField.severity = warning
dotnet_naming_rule.PrivateInstanceField.symbols  = PrivateInstanceField_Symbols
dotnet_naming_rule.PrivateInstanceField.style    = PrivateInstanceField_Style

dotnet_naming_symbols.PrivateInstanceField_Symbols.applicable_kinds           = field
dotnet_naming_symbols.PrivateInstanceField_Symbols.applicable_accessibilities = private

dotnet_naming_style.PrivateInstanceField_Style.capitalization  = camel_case
dotnet_naming_style.PrivateInstanceField_Style.required_prefix = _

#### Other kinds ####

# Constants are PascalCase
dotnet_naming_rule.Constant.severity = warning
dotnet_naming_rule.Constant.symbols  = Constant_Symbols
dotnet_naming_rule.Constant.style    = Pascal_Case_Style

dotnet_naming_symbols.Constant_Symbols.applicable_kinds   = field, local
dotnet_naming_symbols.Constant_Symbols.required_modifiers = const

# Non-private non-field members are PascalCase
dotnet_naming_rule.NonPrivateNonFieldMember.severity = warning
dotnet_naming_rule.NonPrivateNonFieldMember.symbols  = NonPrivateNonFieldMember_Symbols
dotnet_naming_rule.NonPrivateNonFieldMember.style    = Pascal_Case_Style

dotnet_naming_symbols.NonPrivateNonFieldMember_Symbols.applicable_kinds           = property, event, method
dotnet_naming_symbols.NonPrivateNonFieldMember_Symbols.applicable_accessibilities = public, protected, internal, protected_internal, private_protected

# Parameters are camelCase
dotnet_naming_rule.Parameter.severity = warning
dotnet_naming_rule.Parameter.symbols  = Parameter_Symbols
dotnet_naming_rule.Parameter.style    = Camel_Case_Style

dotnet_naming_symbols.Parameter_Symbols.applicable_kinds = parameter

# Local functions are camelCase
dotnet_naming_rule.LocalFunction.severity = warning
dotnet_naming_rule.LocalFunction.symbols  = LocalFunction_Symbols
dotnet_naming_rule.LocalFunction.style    = Camel_Case_Style

dotnet_naming_symbols.LocalFunction_Symbols.applicable_kinds = local_function
