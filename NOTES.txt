Notes
=====

Comparaison avec NodaTime et les BCL
------------------------------------

### NodaTime

- un type date (LocalDate) commun à tous les calendriers
- représentation interne : y/m/d (int)

### BCL

- un type date (DateOnly) commun à tous les calendriers
- réprésentation interne : _dayNumber (int), le nombre de jours consécutifs
  depuis l'epoch du calendrier grégorien (à vérifier)

### Calendrie

- un type date spécifique à chaque calendrier
- réprésentation interne : _daysSinceEpoch (int), le nombre de jours consécutifs
  depuis l'epoch du calendrier sous-jacent

Répresenter une date
--------------------

Quatre formats :
- nombre de jours consécutifs depuis l'epoch du calendrier
- année / mois / jour du mois
- année / semaine / jour de la semaine
- année / jour de l'année

Pour un type date, une structure, on devrait s'assurer que la valeur par défaut
est une date valide dans le calendrier sous-jacent. En général, cette valeur
correspond au 1/1/1. Il faut donc qu'elle fasse partie de l'intervale de jours
supportés par le calendrier.

Développement
=============

Tâches
------

Trois types de tâches : FIXME, TODO et REVIEW
Sous-catégories entre paranthèses : p.ex. TODO(code)
Trois sous-catégories : "code", "doc" et "fact"

Code C#
-------

- utilisation du mot-clé "sealed"
  - comportement par défaut des classes
  - propriétés et méthodes surchargées ("override"), tout particulièrement
    la méthode ToString()
- attribut "Pure"

### Code Analysis

Justifier l'utilisation des
- #pragma warning disable
- SuppressMessage

### Documentation XML

Utiliser <see langword="null"/>, idem pour "true" et "false".

### Vérifier régulièrement

- PublicAPI : les méthodes virtuelles

Tests
-----

Ne pas utiliser "." dans les noms de test car Test Explorer n’aime pas ça.
On utilise ":" ou "::" à la place.
