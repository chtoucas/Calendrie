<#+

public partial class CalendarTemplate
{
    protected virtual void EmitDate()
    {
        EmitDateDecl();
        EmitDatePreamble();
        EmitDateFactories();
        EmitDateCounting();
        EmitDateAdjustment();
        EmitDateCloseByDayOfWeek();
        EmitDateEquatable();
        EmitDateComparable();
        EmitDateMath();
        //EmitDateMathNonStandard();
    }

    protected virtual void EmitDateDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> date.
/// <para><see cref="<#= Prefix #>Date"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Date :
    IDateable,
    IAbsoluteDate<<#= Prefix #>Date>,
    IAdjustableDate<<#= Prefix #>Date>,
    IDateFactory<<#= Prefix #>Date>,
    ISubtractionOperators<<#= Prefix #>Date, <#= Prefix #>Date, int>
{ }
<#+
    } // T4: End of EmitDateDecl()

    protected virtual void EmitDatePreamble()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Preamble
{
    /// <summary>Represents the value of the property <see cref="DayNumber.DaysSinceZero"/>
    /// for the epoch <see cref="<#= Epoch #>"/>.
    /// <para>This field is a constant equal to <#= EpochDaysSinceZeroValue #>.</para></summary>
    private const int EpochDaysSinceZero = <#= EpochDaysSinceZeroValue #>;

    /// <summary>Represents the maximum value of <see cref="_<#= DaysSinceEpochVar #>"/>.
    /// <para>This field is a constant equal to <#= MaxDaysSinceEpochValue #>.</para></summary>
    private const int <#= MaxDaysSinceEpoch #> = <#= MaxDaysSinceEpochValue #>;

    /// <summary>
    /// Represents the count of consecutive days since the epoch <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from 0 to <see cref="<#= MaxDaysSinceEpoch #>"/>.
    /// </para>
    /// </summary>
    private readonly int _<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid date or <paramref name="year"/> is outside the range
    /// of supported years.</exception>
    public <#= Prefix #>Date(int year, int month, int day)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateYearMonthDay(year, month, day);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, month, day);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified ordinal date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid ordinal date or <paramref name="year"/> is outside
    /// the range of supported years.</exception>
    public <#= Prefix #>Date(int year, int dayOfYear)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateOrdinal(year, dayOfYear);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
    }

    /// <summary>
    /// This constructor does NOT validate its parameter.
    /// </summary>
    internal <#= Prefix #>Date(int <#= DaysSinceEpochVar #>)
    {
        _<#= DaysSinceEpochVar #> = <#= DaysSinceEpochVar #>;
    }

    /// <inheritdoc />
    /// <remarks>This static property is thread-safe.</remarks>
    public static <#= Prefix #>Date MinValue { get; }

    /// <inheritdoc />
    /// <remarks>This static property is thread-safe.</remarks>
    public static <#= Prefix #>Date MaxValue { get; } = new(<#= MaxDaysSinceEpoch #>);

    /// <summary>
    /// Gets the calendar to which belongs the current date type.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    /// <inheritdoc />
    //
    // We already know that the resulting day number is valid so instead of
    // > public DayNumber DayNumber => Epoch + _<#= DaysSinceEpochVar #>;
    // we can use an unchecked addition
    public DayNumber DayNumber => new(EpochDaysSinceZero + _<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    public int DaysSinceEpoch => _<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <inheritdoc />
    public int Century => YearNumbering.GetCentury(Year);

    /// <inheritdoc />
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <inheritdoc />
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <inheritdoc />
    public int Year => Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out int m, out _);
            return m;
        }
    }

    /// <inheritdoc />
    public int DayOfYear
    {
        get
        {
            _ = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out int doy);
            return doy;
        }
    }

    /// <inheritdoc />
    public int Day
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out _, out int d);
            return d;
        }
    }

    /// <inheritdoc />
    public DayOfWeek DayOfWeek => DayNumber.DayOfWeek;

    /// <inheritdoc />
    public bool IsIntercalary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsIntercalaryDay(y, m, d);
        }
    }

<#+ if (EnableIsSupplementary) { #>
    /// <inheritdoc />
    public bool IsSupplementary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsSupplementaryDay(y, m, d);
        }
    }
<#+ } else { #>
    bool IDateable.IsSupplementary => false;
<#+ } #>

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return FormattableString.Invariant($"{d:D2}/{m:D2}/{y:D4} ({chr})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month, out int day) =>
        Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out year, out month, out day);

    /// <inheritdoc />
    public void Deconstruct(out int year, out int dayOfYear) =>
        year = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out dayOfYear);
}
<#+
    } // T4: End of EmitDatePreamble()

    protected virtual void EmitDateFactories()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Factories & conversions
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date FromDayNumber(DayNumber dayNumber)
    {
        Calendar.Scope.Validate(dayNumber);

        // NB: the subtraction won't overflow.
        return new(dayNumber.DaysSinceZero - EpochDaysSinceZero);
    }

    /// <inheritdoc />
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= Prefix #>Date IDateFactory<<#= Prefix #>Date>.UnsafeCreate(int <#= DaysSinceEpochVar #>) =>
        new(<#= DaysSinceEpochVar #>);
}
<#+
    } // T4: End of EmitDateFactories()

    protected virtual void EmitDateCounting()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear() => Calendar.Schema.CountDaysInYearBefore(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear() => Calendar.Schema.CountDaysInYearAfter(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInMonth() => Calendar.Schema.CountDaysInMonthBefore(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInMonth() => Calendar.Schema.CountDaysInMonthAfter(_<#= DaysSinceEpochVar #>);
}
<#+
    } // T4: End of EmitDateCounting()

    protected virtual void EmitDateAdjustment()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithYear(int newYear)
    {
        var (_, m, d) = this;

        var chr = Calendar;
        // We MUST re-validate the entire date.
        chr.Scope.ValidateYearMonthDay(newYear, m, d, nameof(newYear));

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(newYear, m, d);
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithMonth(int newMonth)
    {
        var (y, _, d) = this;

        var chr = Calendar;
        // We only need to validate "newMonth" and "d".
        chr.Scope.PreValidator.ValidateMonthDay(y, newMonth, d, nameof(newMonth));

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(y, newMonth, d);
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithDay(int newDay)
    {
        var (y, m, _) = this;

        var chr = Calendar;
        // We only need to validate "newDay".
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, newDay, nameof(newDay));

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(y, m, newDay);
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithDayOfYear(int newDayOfYear)
    {
        int y = Year;

        var chr = Calendar;
        // We only need to validate "newDayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(y, newDayOfYear, nameof(newDayOfYear));

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(y, newDayOfYear);
        return new(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitDateAdjustment()

    protected virtual void EmitDateCloseByDayOfWeek()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Find close by day of the week
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Previous(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ >= 0 ? δ - DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> < 0) ThrowHelpers.ThrowDateOverflow();
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ > 0 ? δ - DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> < 0) ThrowHelpers.ThrowDateOverflow();
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Nearest(DayOfWeek dayOfWeek)
    {
        var nearest = DayNumber.Nearest(dayOfWeek);
        int <#= DaysSinceEpochVar #> = nearest.DaysSinceZero - EpochDaysSinceZero;
        if (unchecked((uint)<#= DaysSinceEpochVar #>) > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ < 0 ? δ + DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Next(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ <= 0 ? δ + DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitDateCloseByDayOfWeek()

    protected virtual void EmitDateEquatable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> == right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator !=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> != right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public bool Equals(<#= Prefix #>Date other) => _<#= DaysSinceEpochVar #> == other._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is <#= Prefix #>Date date && Equals(date);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _<#= DaysSinceEpochVar #>;
}
<#+
    } // T4: End of EmitDateEquatable()

    protected virtual void EmitDateComparable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // IComparable
{
    /// <inheritdoc />
    public static bool operator <(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> < right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator <=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> <= right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator >(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> > right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator >=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> >= right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Min(<#= Prefix #>Date x, <#= Prefix #>Date y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Max(<#= Prefix #>Date x, <#= Prefix #>Date y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(<#= Prefix #>Date other) => _<#= DaysSinceEpochVar #>.CompareTo(other._<#= DaysSinceEpochVar #>);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is <#= Prefix #>Date date ? CompareTo(date)
        : ThrowHelpers.ThrowNonComparable(typeof(<#= Prefix #>Date), obj);
}
<#+
    } // T4: End of EmitDateComparable()

    protected virtual void EmitDateMath()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified dates and returns the number of days between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountDaysSince()")]
    public static int operator -(<#= Prefix #>Date left, <#= Prefix #>Date right) => left.CountDaysSince(right);

    /// <summary>
    /// Adds a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static <#= Prefix #>Date operator +(<#= Prefix #>Date value, int days) => value.PlusDays(days);

    /// <summary>
    /// Subtracts a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static <#= Prefix #>Date operator -(<#= Prefix #>Date value, int days) => value.PlusDays(-days);

    /// <summary>
    /// Adds one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextDay()")]
    public static <#= Prefix #>Date operator ++(<#= Prefix #>Date value) => value.NextDay();

    /// <summary>
    /// Subtracts one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousDay()")]
    public static <#= Prefix #>Date operator --(<#= Prefix #>Date value) => value.PreviousDay();

    /// <inheritdoc />
    [Pure]
    public int CountDaysSince(<#= Prefix #>Date other) =>
        // No need to use a checked context here. Indeed, the result is at most
        // equal to (<#= MaxDaysSinceEpoch #> - <#= MinDaysSinceEpoch #>) ie <#= MaxDaysSinceEpoch #>.
        _<#= DaysSinceEpochVar #> - other._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PlusDays(int days)
    {
        int <#= DaysSinceEpochVar #> = checked(_<#= DaysSinceEpochVar #> + days);
        if (unchecked((uint)<#= DaysSinceEpochVar #>) > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextDay()
    {
        if (_<#= DaysSinceEpochVar #> == <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new(_<#= DaysSinceEpochVar #> + 1);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousDay()
    {
        if (_<#= DaysSinceEpochVar #> == 0) ThrowHelpers.ThrowDateOverflow();
        return new(_<#= DaysSinceEpochVar #> - 1);
    }
}
<#+
    } // T4: End of EmitDateMath()

    protected virtual void EmitDateMathNonStandard()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Non-standard math ops
{
    /// <summary>
    /// Counts the number of months elapsed since the specified date.
    /// </summary>
    [Pure]
    public int CountMonthsSince(<#= Prefix #>Date other) => Calendar.CountMonthsBetween(other, this);

    /// <summary>
    /// Adds a number of months to the month field of this date instance,
    /// yielding a new date.
    /// </summary>
    [Pure]
    public <#= Prefix #>Date PlusMonths(int months) => Calendar.AddMonths(this, months);

    /// <summary>
    /// Counts the number of years elapsed since the specified date.
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Date other) => Calendar.CountYearsBetween(other, this);

    /// <summary>
    /// Adds a number of years to the year field of this date instance, yielding
    /// a new date.
    /// </summary>
    [Pure]
    public <#= Prefix #>Date PlusYears(int years) => Calendar.AddYears(this, years);
}
<#+
    } // T4: End of EmitDateMathNonStandard()

} // T4: End of CalendarTemplate

#>
