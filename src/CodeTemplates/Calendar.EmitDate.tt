<#+

public partial class CalendarTemplate
{
    protected string EpochDaysSinceEpoch =>
        EnableMicroOptimizations ? "s_EpochDaysSinceZero" : "s_Epoch.DaysSinceZero";

    protected virtual void EmitDate()
    {
        EmitDateDecl();
        EmitDatePreamble();
        EmitDateFactories();
        EmitDateCounting();
        EmitDateAdjustment();
        EmitDateEquatable();
        EmitDateComparable();
        EmitDateMath();
    }

    protected virtual void EmitDateDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> date.
/// <para><see cref="<#= Prefix #>Date"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Date :
    IDate<<#= Prefix #>Date, <#= Prefix #>Calendar>,
    IAdjustableDayOfWeekField<<#= Prefix #>Date>,
    IMutableDateFields<<#= Prefix #>Date>,
    IDateFactory<<#= Prefix #>Date>,
    ISubtractionOperators<<#= Prefix #>Date, <#= Prefix #>Date, int>
{ }
<#+
    } // T4: End of EmitDateDecl()

    protected virtual void EmitDatePreamble()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Preamble
{
    // WARNING: the order in which the static fields are written is __important__.

<#+ if (EnableMicroOptimizations) { #>
    private static readonly int s_EpochDaysSinceZero = <#= Prefix #>Calendar.Instance.Epoch.DaysSinceZero;
<#+ } else { #>
    /// <summary>Represents the epoch of the associated calendar.</summary>
    private static readonly DayNumber s_Epoch = <#= Prefix #>Calendar.Instance.Epoch;
<#+ } #>

    /// <summary>Represents the minimum value of <see cref="_<#= DaysSinceEpochVar #>"/>.</summary>
    private static readonly int s_Min<#= DaysSinceEpochSuffix #> = <#= Prefix #>Calendar.Instance.Min<#= DaysSinceEpochSuffix #>;
    /// <summary>Represents the maximum value of <see cref="_<#= DaysSinceEpochVar #>"/>.</summary>
    private static readonly int s_Max<#= DaysSinceEpochSuffix #> = <#= Prefix #>Calendar.Instance.Max<#= DaysSinceEpochSuffix #>;

    /// <summary>Represents the minimum value of the current type.</summary>
    private static readonly <#= Prefix #>Date s_MinValue = new(s_Min<#= DaysSinceEpochSuffix #>);
    /// <summary>Represents the maximum value of the current type.</summary>
    private static readonly <#= Prefix #>Date s_MaxValue = new(s_Max<#= DaysSinceEpochSuffix #>);

    /// <summary>
    /// Represents the count of consecutive days since the epoch <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from <see cref="s_Min<#= DaysSinceEpochSuffix #>"/>
    /// to <see cref="s_Max<#= DaysSinceEpochSuffix #>"/>.</para>
    /// </summary>
    private readonly int _<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid date or <paramref name="year"/> is outside the range
    /// of supported years.</exception>
    public <#= Prefix #>Date(int year, int month, int day)
    {
        var chr = <#= Prefix #>Calendar.Instance;

        chr.Scope.ValidateYearMonthDay(year, month, day);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, month, day);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified ordinal date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid ordinal date or <paramref name="year"/> is outside
    /// the range of supported years.</exception>
    public <#= Prefix #>Date(int year, int dayOfYear)
    {
        var chr = <#= Prefix #>Calendar.Instance;

        chr.Scope.ValidateOrdinal(year, dayOfYear);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
    }

    /// <summary>
    /// This constructor does NOT validate its parameter.
    /// </summary>
    internal <#= Prefix #>Date(int <#= DaysSinceEpochVar #>)
    {
        _<#= DaysSinceEpochVar #> = <#= DaysSinceEpochVar #>;
    }

    /// <inheritdoc />
    /// <remarks>This static property is thread-safe.</remarks>
    public static <#= Prefix #>Date MinValue => s_MinValue;

    /// <inheritdoc />
    /// <remarks>This static property is thread-safe.</remarks>
    public static <#= Prefix #>Date MaxValue => s_MaxValue;

    /// <inheritdoc />
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    /// <summary>
    /// Gets the adjuster of the current date type.
    /// <remarks>This static property is thread-safe.</remarks>
    /// </summary>
    public static DateAdjuster<<#= Prefix #>Date> Adjuster => <#= Prefix #>Calendar.Instance.Adjuster;

    /// <inheritdoc />
    //
    // We already know that the resulting day number is valid so instead of
    // > public DayNumber DayNumber => s_Epoch + _<#= DaysSinceEpochVar #>;
    // we can use an unchecked addition
    public DayNumber DayNumber => new(<#= EpochDaysSinceEpoch #> + _daysSinceEpoch);

    /// <inheritdoc />
    public int DaysSinceEpoch => _<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <inheritdoc />
    public int Century => YearNumbering.GetCentury(Year);

    /// <inheritdoc />
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <inheritdoc />
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <inheritdoc />
    public int Year => Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out int m, out _);
            return m;
        }
    }

    /// <inheritdoc />
    public int DayOfYear
    {
        get
        {
            _ = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out int doy);
            return doy;
        }
    }

    /// <inheritdoc />
    public int Day
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out _, out int d);
            return d;
        }
    }

    /// <inheritdoc />
    public DayOfWeek DayOfWeek => DayNumber.DayOfWeek;

    /// <inheritdoc />
    public bool IsIntercalary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsIntercalaryDay(y, m, d);
        }
    }

<#+ if (EnableIsSupplimentary) { #>
    /// <inheritdoc />
    public bool IsSupplementary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsSupplementaryDay(y, m, d);
        }
    }
<#+ } else { #>
    bool IDateable.IsSupplementary => false;
<#+ } #>

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return FormattableString.Invariant($"{d:D2}/{m:D2}/{y:D4} ({chr})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month, out int day) =>
        Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out year, out month, out day);

    /// <inheritdoc />
    public void Deconstruct(out int year, out int dayOfYear) =>
        year = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out dayOfYear);
}
<#+
    } // T4: End of EmitDatePreamble()

    protected virtual void EmitDateFactories()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Factories & conversions
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date FromDayNumber(DayNumber dayNumber)
    {
        Calendar.Scope.Validate(dayNumber);

        // We know that the subtraction won't overflow
        // > return new(dayNumber - s_Epoch);
        return new(dayNumber.DaysSinceZero - <#= EpochDaysSinceEpoch #>);
    }

    /// <inheritdoc />
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= Prefix #>Date IDateFactory<<#= Prefix #>Date>.FromDayNumberUnchecked(DayNumber dayNumber) =>
        new(dayNumber.DaysSinceZero - <#= EpochDaysSinceEpoch #>);

    /// <inheritdoc />
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= Prefix #>Date IDateFactory<<#= Prefix #>Date>.FromDaysSinceEpochUnchecked(int daysSinceEpoch) =>
        new(daysSinceEpoch);
}
<#+
    } // T4: End of EmitDateFactories()

    protected virtual void EmitDateCounting()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear() =>
        Calendar.UnderlyingSchema.CountDaysInYearBefore(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear() =>
        Calendar.UnderlyingSchema.CountDaysInYearAfter(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInMonth() =>
        Calendar.UnderlyingSchema.CountDaysInMonthBefore(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInMonth() =>
        Calendar.UnderlyingSchema.CountDaysInMonthAfter(_<#= DaysSinceEpochVar #>);
}
<#+
    } // T4: End of EmitDateCounting()

    protected virtual void EmitDateAdjustment()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Adjust(Func<<#= Prefix #>Date, <#= Prefix #>Date> adjuster)
    {
        ArgumentNullException.ThrowIfNull(adjuster);

        return adjuster.Invoke(this);
    }

    //
    // "Nondestructive mutation"
    //

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithYear(int newYear) =>
        Calendar.Adjuster.AdjustYear(this, newYear);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithMonth(int newMonth) =>
        Calendar.Adjuster.AdjustMonth(this, newMonth);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithDay(int newDay) =>
        Calendar.Adjuster.AdjustDayOfMonth(this, newDay);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithDayOfYear(int newDayOfYear) =>
        Calendar.Adjuster.AdjustDayOfYear(this, newDayOfYear);

    //
    // Adjust the day of the week
    //

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Previous(DayOfWeek dayOfWeek) =>
        Calendar.Adjuster.Previous(this, dayOfWeek);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousOrSame(DayOfWeek dayOfWeek) =>
        Calendar.Adjuster.PreviousOrSame(this, dayOfWeek);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Nearest(DayOfWeek dayOfWeek) =>
        Calendar.Adjuster.Nearest(this, dayOfWeek);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextOrSame(DayOfWeek dayOfWeek) =>
        Calendar.Adjuster.NextOrSame(this, dayOfWeek);

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Next(DayOfWeek dayOfWeek) =>
        Calendar.Adjuster.Next(this, dayOfWeek);
}
<#+
    } // T4: End of EmitDateAdjustment()

    protected virtual void EmitDateEquatable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> == right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator !=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> != right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public bool Equals(<#= Prefix #>Date other) => _<#= DaysSinceEpochVar #> == other._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is <#= Prefix #>Date date && Equals(date);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _<#= DaysSinceEpochVar #>;
}
<#+
    } // T4: End of EmitDateEquatable()

    protected virtual void EmitDateComparable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // IComparable
{
    /// <inheritdoc />
    public static bool operator <(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> < right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator <=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> <= right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator >(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> > right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator >=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> >= right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Min(<#= Prefix #>Date x, <#= Prefix #>Date y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Max(<#= Prefix #>Date x, <#= Prefix #>Date y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(<#= Prefix #>Date other) => _<#= DaysSinceEpochVar #>.CompareTo(other._<#= DaysSinceEpochVar #>);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is <#= Prefix #>Date date ? CompareTo(date)
        : ThrowHelpers.ThrowNonComparable(typeof(<#= Prefix #>Date), obj);
}
<#+
    } // T4: End of EmitDateComparable()

    protected virtual void EmitDateMath()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Math
{
#pragma warning disable CA2225 // Operator overloads have named alternates (Usage) ✓
    // Friendly alternates do exist but use domain-specific names.

    /// <summary>
    /// Subtracts the two specified dates and returns the number of days between
    /// them.
    /// </summary>
    public static int operator -(<#= Prefix #>Date left, <#= Prefix #>Date right) => left.CountDaysSince(right);

    /// <summary>
    /// Adds a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    public static <#= Prefix #>Date operator +(<#= Prefix #>Date value, int days) => value.AddDays(days);

    /// <summary>
    /// Subtracts a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    public static <#= Prefix #>Date operator -(<#= Prefix #>Date value, int days) => value.AddDays(-days);

    /// <summary>
    /// Adds one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    public static <#= Prefix #>Date operator ++(<#= Prefix #>Date value) => value.NextDay();

    /// <summary>
    /// Subtracts one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    public static <#= Prefix #>Date operator --(<#= Prefix #>Date value) => value.PreviousDay();

#pragma warning restore CA2225

    /// <inheritdoc />
    [Pure]
    public int CountDaysSince(<#= Prefix #>Date other) =>
        // No need to use a checked context here.
        _<#= DaysSinceEpochVar #> - other._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date AddDays(int days)
    {
        int <#= DaysSinceEpochVar #> = checked(_<#= DaysSinceEpochVar #> + days);

        // Don't write (the addition may also overflow...):
        // > Scope.CheckOverflow(Epoch + <#= DaysSinceEpochVar #>);
        if (<#= DaysSinceEpochVar #> < s_Min<#= DaysSinceEpochSuffix #> || <#= DaysSinceEpochVar #> > s_Max<#= DaysSinceEpochSuffix #>)
            ThrowHelpers.ThrowDateOverflow();

        return new(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextDay()
    {
        if (this == s_MaxValue) ThrowHelpers.ThrowDateOverflow();
        return new(_<#= DaysSinceEpochVar #> + 1);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousDay()
    {
        if (this == s_MinValue) ThrowHelpers.ThrowDateOverflow();
        return new(_<#= DaysSinceEpochVar #> - 1);
    }
}
<#+
    } // T4: End of EmitDateMath()
} // T4: End of CalendarTemplate

#>
