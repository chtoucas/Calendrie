<#+

public partial class CalendarTemplate
{
    protected void EmitDate()
    {
#>

#region <#= Prefix #>Date
<#+
        EmitDateDecl();
        EmitDatePreamble();
        EmitDateFactories();
        EmitDateConversions();
        EmitDateCounting();
        EmitDateAdjustments();
        EmitDateCloseByDayOfWeek();
        EmitDateEquatable();
        EmitDateComparable();
        EmitDateMath();

        if (IsRegular)
        {
            EmitDateMathNonStandardRegular();
        }
        else
        {
            EmitDateMathNonStandardNonRegular();
        }
#>

#endregion
<#+
    }

    protected virtual void EmitDateDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> date.
/// <para><i>All</i> dates within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="<#= Prefix #>Date"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Date :
    IDate<<#= Prefix #>Date>,
    IUnsafeFactory<<#= Prefix #>Date>,
    ISubtractionOperators<<#= Prefix #>Date, <#= Prefix #>Date, int>
{ }
<#+
    } // T4: End of EmitDateDecl()

    protected virtual void EmitDatePreamble()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Preamble
{
    /// <summary>Represents the value of the property <see cref="DayNumber.DaysSinceZero"/>
    /// for the epoch <see cref="<#= Epoch #>"/>.
    /// <para>This field is a constant equal to <#= EpochDaysSinceZeroValue #>.</para></summary>
    internal const int EpochDaysSinceZero = <#= EpochDaysSinceZeroValue #>;

    /// <summary>Represents the maximum value of <see cref="_<#= DaysSinceEpochVar #>"/>.
    /// <para>This field is a constant equal to <#= MaxDaysSinceEpochValue #>.</para></summary>
    internal const int <#= MaxDaysSinceEpoch #> = <#= MaxDaysSinceEpochValue #>;

    /// <summary>
    /// Represents the count of consecutive days since the epoch
    /// <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from 0 to <see cref="<#= MaxDaysSinceEpoch #>"/>.
    /// </para>
    /// </summary>
    private readonly int _<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid date or <paramref name="year"/> is outside the range
    /// of supported years.</exception>
    public <#= Prefix #>Date(int year, int month, int day)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateYearMonthDay(year, month, day);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, month, day);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified ordinal date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid ordinal date or <paramref name="year"/> is outside
    /// the range of supported years.</exception>
    public <#= Prefix #>Date(int year, int dayOfYear)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateOrdinal(year, dayOfYear);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct.
    /// <para>This constructor does NOT validate its parameter.</para>
    /// </summary>
    private <#= Prefix #>Date(int <#= DaysSinceEpochVar #>)
    {
        _<#= DaysSinceEpochVar #> = <#= DaysSinceEpochVar #>;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="<#= Prefix #>Date"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported date.</returns>
    //
    // MinValue = new(0) = new() = default(<#= Prefix #>Date)
    public static <#= Prefix #>Date MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="<#= Prefix #>Date"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported date.</returns>
    public static <#= Prefix #>Date MaxValue { get; } = new(<#= MaxDaysSinceEpoch #>);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    static Calendar IDate.Calendar => Calendar;

    /// <inheritdoc />
    //
    // We already know that the resulting day number is valid, so instead of
    // > public DayNumber DayNumber => Epoch + _<#= DaysSinceEpochVar #>;
    // we can use an unchecked addition
    public DayNumber DayNumber => new(EpochDaysSinceZero + _<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    public int DaysSinceEpoch => _<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year => Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out int m, out _);
            return m;
        }
    }

    /// <inheritdoc />
    public int DayOfYear
    {
        get
        {
            _ = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out int doy);
            return doy;
        }
    }

    /// <inheritdoc />
    public int Day
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out _, out int d);
            return d;
        }
    }

    /// <inheritdoc />
    public DayOfWeek DayOfWeek => DayNumber.DayOfWeek;

<#+ if (EnableIsIntercalaryDay) { #>
    /// <inheritdoc />
    public bool IsIntercalary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsIntercalaryDay(y, m, d);
        }
    }

<#+ } else { #>
    bool IDateable.IsIntercalary => false;

<#+ } #>
<#+ if (EnableIsSupplementaryDay) { #>
    /// <inheritdoc />
    public bool IsSupplementary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsSupplementaryDay(y, m, d);
        }
    }
<#+ } else { #>
    bool IDateable.IsSupplementary => false;
<#+ } #>

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return FormattableString.Invariant($"{d:D2}/{m:D2}/{y:D4} ({<#= Prefix #>Calendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month, out int day) =>
        Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out year, out month, out day);

    /// <inheritdoc />
    public void Deconstruct(out int year, out int dayOfYear) =>
        year = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out dayOfYear);
}
<#+
    } // T4: End of EmitDatePreamble()

    protected virtual void EmitDateFactories()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Factories
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Create(int year, int month, int day) => new(year, month, day);

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Create(int year, int dayOfYear) => new(year, dayOfYear);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="<#= Prefix #>Date"/>
    /// struct from the specified date components.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Date? TryCreate(int year, int month, int day)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckYearMonthDay(year, month, day)) return null;

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, month, day);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <summary>
    /// Attempts to create a new instance of the <see cref="<#= Prefix #>Date"/>
    /// struct from the specified ordinal components.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Date? TryCreate(int year, int dayOfYear)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckOrdinal(year, dayOfYear)) return null;

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    // Explicit implementation: <#= Prefix #>Date being a value type, better
    // to use the others TryCreate().

    [Pure]
    static bool IDate<<#= Prefix #>Date>.TryCreate(int year, int month, int day, out <#= Prefix #>Date result)
    {
        var dateValue = TryCreate(year, month, day);
        result = dateValue ?? default;
        return dateValue.HasValue;
    }

    [Pure]
    static bool IDate<<#= Prefix #>Date>.TryCreate(int year, int dayOfYear, out <#= Prefix #>Date result)
    {
        var dateValue = TryCreate(year, dayOfYear);
        result = dateValue ?? default;
        return dateValue.HasValue;
    }

    // No method UnsafeCreate(int year, int month, int day) to avoid multiple
    // lookup to the property Calendar.

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// from the specified count of consecutive days since the epoch.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static <#= Prefix #>Date UnsafeCreate(int <#= DaysSinceEpochVar #>) => new(<#= DaysSinceEpochVar #>);

    [Pure]
    static <#= Prefix #>Date IUnsafeFactory<<#= Prefix #>Date>.UnsafeCreate(int <#= DaysSinceEpochVar #>) =>
        UnsafeCreate(<#= DaysSinceEpochVar #>);
}
<#+
    } // T4: End of EmitDateFactories()

    protected virtual void EmitDateConversions()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Conversions
{
    /// <summary>
    /// Defines an implicit conversion of a <see cref="<#= Prefix #>Date"/> value
    /// to a <see cref="Calendrie.DayNumber"/> value.
    /// <para>See also <seealso cref="DayNumber"/>.</para>
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See DayNumber")]
    public static implicit operator DayNumber(<#= Prefix #>Date date) => date.DayNumber;

    /// <summary>
    /// Defines an explicit conversion of a <see cref="<#= Prefix #>Date"/> value
    /// to a <see cref="GregorianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    public static explicit operator GregorianDate(<#= Prefix #>Date date) =>
        GregorianDate.UnsafeCreate(date.DayNumber.DaysSinceZero);

    /// <summary>
    /// Defines an explicit conversion of a <see cref="<#= Prefix #>Date"/> value
    /// to a <see cref="JulianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    public static explicit operator JulianDate(<#= Prefix #>Date date) =>
        JulianDate.UnsafeCreate(date.DayNumber);

    // Why FromAbsoluteDate() rather than FromDayNumber()? Usability.
    // Why not simply change the interface? It makes sense to apply this only
    // here because there is also an implicit conversion from all date types in
    // Calendrie.Systems to DayNumber.

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// from the specified absolute value.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayNumber"/>
    /// is outside the range of supported values.</exception>
    [Pure]
    public static <#= Prefix #>Date FromAbsoluteDate(DayNumber dayNumber)
    {
        Calendar.Scope.Validate(dayNumber);
        // NB: now that we have validated the day number, we know for sure that
        // the subtraction won't overflow.
        return new <#= Prefix #>Date(dayNumber.DaysSinceZero - EpochDaysSinceZero);
    }

    [Pure]
    static <#= Prefix #>Date IAbsoluteDate<<#= Prefix #>Date>.FromDayNumber(DayNumber dayNumber) =>
        FromAbsoluteDate(dayNumber);

    /// <summary>
    /// Converts the current instance to a <see cref="GregorianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    [Pure]
    public GregorianDate ToGregorianDate() => GregorianDate.UnsafeCreate(DayNumber.DaysSinceZero);

    /// <summary>
    /// Converts the current instance to a <see cref="JulianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    [Pure]
    public JulianDate ToJulianDate() => JulianDate.UnsafeCreate(DayNumber);
}
<#+
    } // T4: End of EmitDateConversions()

    protected virtual void EmitDateCounting()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear() => Calendar.Schema.CountDaysInYearBefore(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear() => Calendar.Schema.CountDaysInYearAfter(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInMonth() => Calendar.Schema.CountDaysInMonthBefore(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInMonth() => Calendar.Schema.CountDaysInMonthAfter(_<#= DaysSinceEpochVar #>);
}
<#+
    } // T4: End of EmitDateCounting()

    protected virtual void EmitDateAdjustments()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithYear(int newYear)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out int m, out int d);

        // We MUST re-validate the entire date.
        // We don't use the constructor just to avoid another calendar lookup.
        chr.Scope.ValidateYearMonthDay(newYear, m, d, nameof(newYear));

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newYear, m, d);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithMonth(int newMonth)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out _, out int d);

        // We only need to validate "newMonth" and "d".
        chr.Scope.PreValidator.ValidateMonthDay(y, newMonth, d, nameof(newMonth));

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, newMonth, d);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithDay(int newDay)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out _);

        // We only need to validate "newDay".
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, newDay, nameof(newDay));

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, m, newDay);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date WithDayOfYear(int newDayOfYear)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        int y = sch.GetYear(_<#= DaysSinceEpochVar #>);

        // We only need to validate "newDayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(y, newDayOfYear, nameof(newDayOfYear));

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, newDayOfYear);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitDateAdjustments()

    protected virtual void EmitDateCloseByDayOfWeek()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Find a close by day of the week
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Previous(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ >= 0 ? δ - DaysPerWeek : δ);
        if (<#= DaysSinceEpochVar #> < 0) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ > 0 ? δ - DaysPerWeek : δ);
        if (<#= DaysSinceEpochVar #> < 0) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Nearest(DayOfWeek dayOfWeek)
    {
        var nearest = DayNumber.Nearest(dayOfWeek);
        int <#= DaysSinceEpochVar #> = nearest.DaysSinceZero - EpochDaysSinceZero;
        if (unchecked((uint)<#= DaysSinceEpochVar #>) > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ < 0 ? δ + DaysPerWeek : δ);
        if (<#= DaysSinceEpochVar #> > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Next(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ <= 0 ? δ + DaysPerWeek : δ);
        if (<#= DaysSinceEpochVar #> > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitDateCloseByDayOfWeek()

    protected virtual void EmitDateEquatable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> == right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator !=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> != right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public bool Equals(<#= Prefix #>Date other) => _<#= DaysSinceEpochVar #> == other._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is <#= Prefix #>Date date && Equals(date);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _<#= DaysSinceEpochVar #>;
}
<#+
    } // T4: End of EmitDateEquatable()

    protected virtual void EmitDateComparable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // IComparable
{
    /// <summary>
    /// Compares the two specified dates to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> < right._<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Compares the two specified dates to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> <= right._<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Compares the two specified dates to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> > right._<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Compares the two specified dates to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(<#= Prefix #>Date left, <#= Prefix #>Date right) =>
        left._<#= DaysSinceEpochVar #> >= right._<#= DaysSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Min(<#= Prefix #>Date x, <#= Prefix #>Date y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Max(<#= Prefix #>Date x, <#= Prefix #>Date y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(<#= Prefix #>Date other) => _<#= DaysSinceEpochVar #>.CompareTo(other._<#= DaysSinceEpochVar #>);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is <#= Prefix #>Date date ? CompareTo(date)
        : ThrowHelpers.ThrowNonComparable(typeof(<#= Prefix #>Date), obj);
}
<#+
    } // T4: End of EmitDateComparable()

    protected virtual void EmitDateMath()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified dates and returns the number of days between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountDaysSince()")]
    public static int operator -(<#= Prefix #>Date left, <#= Prefix #>Date right) => left.CountDaysSince(right);

    /// <summary>
    /// Adds a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static <#= Prefix #>Date operator +(<#= Prefix #>Date value, int days) => value.PlusDays(days);

    /// <summary>
    /// Subtracts a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static <#= Prefix #>Date operator -(<#= Prefix #>Date value, int days) => value.PlusDays(-days);

    /// <summary>
    /// Adds one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextDay()")]
    public static <#= Prefix #>Date operator ++(<#= Prefix #>Date value) => value.NextDay();

    /// <summary>
    /// Subtracts one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousDay()")]
    public static <#= Prefix #>Date operator --(<#= Prefix #>Date value) => value.PreviousDay();

    /// <summary>
    /// Counts the number of whole days from <paramref name="other"/> to this
    /// date instance.
    /// </summary>
    [Pure]
    public int CountDaysSince(<#= Prefix #>Date other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to <#= MaxDaysSinceEpoch #>.
        _<#= DaysSinceEpochVar #> - other._<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Adds a number of days to the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [Pure]
    public <#= Prefix #>Date PlusDays(int days)
    {
        int <#= DaysSinceEpochVar #> = checked(_<#= DaysSinceEpochVar #> + days);
        if (unchecked((uint)<#= DaysSinceEpochVar #>) > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <summary>
    /// Obtains the date after the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [Pure]
    public <#= Prefix #>Date NextDay()
    {
        if (_<#= DaysSinceEpochVar #> == <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(_<#= DaysSinceEpochVar #> + 1);
    }

    /// <summary>
    /// Obtains the date before the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [Pure]
    public <#= Prefix #>Date PreviousDay()
    {
        if (_<#= DaysSinceEpochVar #> == 0) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(_<#= DaysSinceEpochVar #> - 1);
    }

    //
    // Math operations based on the week unit
    //

    /// <summary>
    /// Counts the number of whole weeks from <paramref name="other"/> to this
    /// date instance.
    /// </summary>
    [Pure]
    public int CountWeeksSince(<#= Prefix #>Date other) => MathZ.Divide(CountDaysSince(other), DaysPerWeek);

    /// <summary>
    /// Adds a number of weeks to the current instance, yielding a new value.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [Pure]
    public <#= Prefix #>Date PlusWeeks(int weeks) => PlusDays(DaysPerWeek * weeks);

    /// <summary>
    /// Obtains the date after the current instance falling on the same day of
    /// the week, yielding a new date.
    /// </summary>
    [Pure]
    public <#= Prefix #>Date NextWeek() => PlusDays(DaysPerWeek);

    /// <summary>
    /// Obtains the date before the current instance falling on the same day of
    /// the week, yielding a new date.
    /// </summary>
    [Pure]
    public <#= Prefix #>Date PreviousWeek() => PlusDays(-DaysPerWeek);
}
<#+
    } // T4: End of EmitDateMath()

    protected virtual void EmitDateMathNonStandardRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Non-standard math ops
{
    /// <summary>
    /// Adds the specified number of years to the year part of this date instance,
    /// yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusYears(int years)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years);
    }

<#+ if (EnableIsLeapYear) { #>
    /// <summary>
    /// Adds the specified number of years to the year part of this date instance
    /// and also returns the roundoff in an output parameter, yielding a new date.
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusYears(int years, out int roundoff)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years, out roundoff);
    }
<#+ } else { #>
    [Pure]
    <#= Prefix #>Date IDateBase<<#= Prefix #>Date>.PlusYears(int years, out int roundoff)
    {
        roundoff = 0;
        return PlusYears(years);
    }
<#+ } #>

    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance, yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusMonths(int months)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return chr.AddMonths(y, m, d, months);
    }

<#+ if (EnableIsLeapYear) { #>
    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance and also returns the roundoff in an output parameter, yielding
    /// a new date.
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusMonths(int months, out int roundoff)
    {
        var sch = Calendar.Schema;
        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return Calendar.AddMonths(y, m, d, months, out roundoff);
    }
<#+ } else { #>
    [Pure]
    <#= Prefix #>Date IDateBase<<#= Prefix #>Date>.PlusMonths(int months, out int roundoff)
    {
        roundoff = 0;
        return PlusMonths(months);
    }
<#+ } #>

    /// <summary>
    /// Counts the number of whole years from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusYears(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Date other)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(other._<#= DaysSinceEpochVar #>, out int y0, out int m0, out int d0);

        // Exact difference between two calendar years.
        int years = Year - y0;

        // To avoid extracting y0 twice, we inline:
        // > var newStart = other.PlusYears(years);
        var newStart = chr.AddYears(y0, m0, d0, years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }

    /// <summary>
    /// Counts the number of whole months from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusMonths(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountMonthsSince(<#= Prefix #>Date other)
    {
        var chr = Calendar;
        var sch = chr.Schema;
        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out _);
        sch.GetDateParts(other._<#= DaysSinceEpochVar #>, out int y0, out int m0, out int d0);

        // Exact difference between two calendar months.
        int months = checked(<#= SchemaClass #>.MonthsPerYear * (y - y0) + m - m0);

        // To avoid extracting (y0, m0, d0) twice, we inline:
        // > var newStart = other.PlusMonths(months);
        var newStart = chr.AddMonths(y0, m0, d0, months);

        if (other < this)
        {
            if (newStart > this) months--;
        }
        else
        {
            if (newStart < this) months++;
        }

        return months;
    }
}
<#+
    } // T4: End of EmitDateMathNonStandardRegular

    protected virtual void EmitDateMathNonStandardNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Non-standard math ops
{
    /// <summary>
    /// Adds the specified number of years to the year part of this date instance,
    /// yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusYears(int years)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years);
    }

    /// <summary>
    /// Adds the specified number of years to the year part of this date instance
    /// and also returns the roundoff in an output parameter, yielding a new date.
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusYears(int years, out int roundoff)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years, out roundoff);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance, yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusMonths(int months)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return chr.AddMonths(y, m, d, months);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance and also returns the roundoff in an output parameter, yielding
    /// a new date.
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public <#= Prefix #>Date PlusMonths(int months, out int roundoff)
    {
        var sch = Calendar.Schema;
        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return Calendar.AddMonths(y, m, d, months, out roundoff);
    }

    /// <summary>
    /// Counts the number of whole years from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusYears(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Date other)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(other._<#= DaysSinceEpochVar #>, out int y0, out int m0, out int d0);

        // Exact difference between two calendar years.
        int years = Year - y0;

        // To avoid extracting y0 twice, we inline:
        // > var newStart = other.PlusYears(years);
        var newStart = chr.AddYears(y0, m0, d0, years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }

    /// <summary>
    /// Counts the number of whole months from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusMonths(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountMonthsSince(<#= Prefix #>Date other)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;
        sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out _);
        sch.GetDateParts(other._<#= DaysSinceEpochVar #>, out int y0, out int m0, out int d0);

        // Exact difference between two calendar months.
        int months = checked(sch.CountMonthsSinceEpoch(y, m) - sch.CountMonthsSinceEpoch(y0, m0));

        // To avoid extracting (y0, m0, d0) twice, we inline:
        // > var newStart = other.PlusMonths(months);
        var newStart = chr.AddMonths(y0, m0, d0, months);

        if (other < this)
        {
            if (newStart > this) months--;
        }
        else
        {
            if (newStart < this) months++;
        }

        return months;
    }
}
<#+
    } // T4: End of EmitDateMathNonStandardNonRegular

} // T4: End of CalendarTemplate

#>
