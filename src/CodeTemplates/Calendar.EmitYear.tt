<#+

public partial class CalendarTemplate
{
    protected virtual void EmitYear()
    {
#>

#region <#= Prefix #>Year
<#+
        EmitYearDecl();
        EmitYearPreamble();
        EmitYearFactories();

        if (IsRegular)
        {
            EmitYearMonthSegmentRegular();
        }
        else
        {
            EmitYearMonthSegmentNonRegular();
        }

        EmitYearDateSegment();
        EmitYearEquatable();
        EmitYearComparable();
        EmitYearMath();
#>

#endregion
<#+
    }

    protected virtual void EmitYearDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= Prefix #> year.
/// <para><i>All</i> years within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="<#= Prefix #>Year"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Year :
    IYear<<#= Prefix #>Year>,
    // A year viewed as a finite sequence of months
    IMonthSegment<<#= Prefix #>Month>,
    ISetMembership<<#= Prefix #>Month>,
    // A year viewed as a finite sequence of days
    IDateSegment<<#= Prefix #>Date>,
    ISetMembership<<#= Prefix #>Date>,
    // Arithmetic
    ISubtractionOperators<<#= Prefix #>Year, <#= Prefix #>Year, int>
{ }
<#+
    } // T4: End of EmitYearDecl()

    protected virtual void EmitYearPreamble()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_yearsSinceEpoch"/>.
    /// <para>This field is a constant equal to 9998.</para></summary>
    private const int MaxYearsSinceEpoch = <#= ScopeClass #>.MaxYear - 1;

    /// <summary>
    /// Represents the count of consecutive years since the epoch
    /// <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxYearsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly ushort _yearsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Year"/> struct
    /// to the specified year.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="year"/> is
    /// outside the range of years supported values.</exception>
    public <#= Prefix #>Year(int year)
    {
        if (year < <#= ScopeClass #>.MinYear || year > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(year);

        _yearsSinceEpoch = (ushort)(year - 1);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Year"/> struct.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    private <#= Prefix #>Year(ushort yearsSinceEpoch)
    {
        _yearsSinceEpoch = yearsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="<#= Prefix #>Year"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported year.</returns>
    //
    // MinValue = new(1) = new() = default(<#= Prefix #>Year)
    public static <#= Prefix #>Year MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="<#= Prefix #>Year"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported year.</returns>
    public static <#= Prefix #>Year MaxValue { get; } = new((ushort)MaxYearsSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    static Calendar IYear.Calendar => Calendar;

    /// <inheritdoc />
    public int YearsSinceEpoch => _yearsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// </summary>
    //
    // Actually, this property returns the algebraic year, but since its value
    // is greater than 0, one can ignore this subtlety.
    public int Year => _yearsSinceEpoch + 1;

    /// <inheritdoc />
    public bool IsLeap => Calendar.Schema.IsLeapYear(Year);

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString() =>
        FormattableString.Invariant($"{Year:D4} ({<#= Prefix #>Calendar.DisplayName})");
}
<#+
    } // T4: End of EmitYearPreamble()

    protected virtual void EmitYearFactories()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // Factories & conversions
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Year Create(int year) => new(year);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="<#= Prefix #>Year"/>
    /// struct from the specified year.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Year? TryCreate(int year)
    {
        bool ok = year >= <#= ScopeClass #>.MinYear && year <= <#= ScopeClass #>.MaxYear;
        return ok ? UnsafeCreate(year) : null;
    }

    // Explicit implementation: <#= Prefix #>Year being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IYear<<#= Prefix #>Year>.TryCreate(int year, out <#= Prefix #>Year result)
    {
        var yearValue = TryCreate(year);
        result = yearValue ?? default;
        return yearValue.HasValue;
    }

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Year"/> struct
    /// from the specified year.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static <#= Prefix #>Year UnsafeCreate(int year) => new((ushort)(year - 1));

    //
    // Conversions
    //

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Year"/> struct
    /// from the specified <see cref="<#= Prefix #>Month"/> value.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Year FromMonth(<#= Prefix #>Month month) => UnsafeCreate(month.Year);

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Year"/> struct
    /// from the specified <see cref="<#= Prefix #>Date"/> value.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Year FromDate(<#= Prefix #>Date date) => UnsafeCreate(date.Year);
}
<#+
    } // T4: End of EmitYearFactories()

    protected virtual void EmitYearMonthSegmentRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // IMonthSegment
{
    /// <summary>
    /// Represents the total number of months in a year.
    /// <para>This field is constant equal to <#= MonthsInYear #>.</para>
    /// </summary>
    public const int MonthCount = <#= Prefix #>Calendar.MonthsInYear;

    /// <inheritdoc />
    public <#= Prefix #>Month MinMonth => <#= Prefix #>Month.UnsafeCreate(Year, 1);

    /// <inheritdoc />
    public <#= Prefix #>Month MaxMonth => <#= Prefix #>Month.UnsafeCreate(Year, MonthCount);

    /// <inheritdoc />
    [Pure]
    int IMonthSegment<<#= Prefix #>Month>.CountMonths() => MonthCount;

    /// <inheritdoc />
    [Pure]
    public Range<<#= Prefix #>Month> ToMonthRange() => Range.StartingAt(MinMonth, MonthCount);

    /// <inheritdoc />
    [Pure]
    public IEnumerable<<#= Prefix #>Month> EnumerateMonths()
    {
        int startOfYear = <#= Prefix #>Month.UnsafeCreate(Year, 1).MonthsSinceEpoch;

        return from monthsSinceEpoch
               in Enumerable.Range(startOfYear, MonthCount)
               select <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the current year instance contains
    /// the specified month; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(<#= Prefix #>Month month) => month.Year == Year;

    /// <summary>
    /// Obtains the month corresponding to the specified month of this year
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="month"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public <#= Prefix #>Month GetMonthOfYear(int month)
    {
        // We already know that "y" is valid, we only need to check "month".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.PreValidator.ValidateMonth(Year, month);
        if (month < 1 || month > GregorianCalendar.MonthsInYear)
            ThrowHelpers.ThrowMonthOutOfRange(month);

        return <#= Prefix #>Month.UnsafeCreate(Year, month);
    }
}
<#+
    } // T4: End of EmitYearMonthSegmentRegular()

    protected virtual void EmitYearMonthSegmentNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // IMonthSegment
{
    /// <inheritdoc />
    public <#= Prefix #>Month MinMonth
    {
        get
        {
            int monthsSinceEpoch = Calendar.Schema.CountMonthsSinceEpoch(Year, 1);
            return <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
        }
    }

    /// <inheritdoc />
    public <#= Prefix #>Month MaxMonth
    {
        get
        {
            var sch = Calendar.Schema;
            int m = sch.CountMonthsInYear(Year);
            int monthsSinceEpoch = sch.CountMonthsSinceEpoch(Year, m);
            return <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
        }
    }

    /// <inheritdoc />
    [Pure]
    public int CountMonths() => Calendar.Schema.CountMonthsInYear(Year);

    /// <inheritdoc />
    [Pure]
    public Range<<#= Prefix #>Month> ToMonthRange()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountMonthsSinceEpoch(Year, 1);
        int monthsInYear = sch.CountMonthsInYear(Year);
        return Range.StartingAt(<#= Prefix #>Month.UnsafeCreate(startOfYear), monthsInYear);
    }

    /// <inheritdoc />
    [Pure]
    public IEnumerable<<#= Prefix #>Month> EnumerateMonths()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountMonthsSinceEpoch(Year, 1);
        int monthsInYear = sch.CountMonthsInYear(Year);

        return from monthsSinceEpoch
               in Enumerable.Range(startOfYear, monthsInYear)
               select <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the current year instance contains
    /// the specified month; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(<#= Prefix #>Month month) => month.Year == Year;

    /// <summary>
    /// Obtains the month corresponding to the specified month of this year
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="month"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public <#= Prefix #>Month GetMonthOfYear(int month)
    {
        var chr = Calendar;
        // We already know that "y" is valid, we only need to check "month".
        chr.Scope.PreValidator.ValidateMonth(Year, month);
        int monthsSinceEpoch = chr.Schema.CountMonthsSinceEpoch(Year, month);
        return <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
    }
}
<#+
    } // T4: End of EmitYearMonthSegmentNonRegular()

    protected virtual void EmitYearDateSegment()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // IDateSegment
{
    /// <summary>
    /// Gets the the start of the current year instance.
    /// </summary>
    public <#= Prefix #>Date MinDay
    {
        get
        {
            int <#= DaysSinceEpochVar #> = Calendar.Schema.CountDaysSinceEpoch(Year, 1);
            return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
        }
    }

    /// <summary>
    /// Gets the the end of the current year instance.
    /// </summary>
    public <#= Prefix #>Date MaxDay
    {
        get
        {
            var sch = Calendar.Schema;
            int doy = sch.CountDaysInYear(Year);
            int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(Year, doy);
            return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    [Pure]
    public int CountDays() => Calendar.Schema.CountDaysInYear(Year);

    /// <inheritdoc />
    [Pure]
    public Range<<#= Prefix #>Date> ToDayRange()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountDaysSinceEpoch(Year, 1);
        int daysInYear = sch.CountDaysInYear(Year);
        return Range.StartingAt(<#= Prefix #>Date.UnsafeCreate(startOfYear), daysInYear);
    }

    /// <inheritdoc />
    [Pure]
    public IEnumerable<<#= Prefix #>Date> EnumerateDays()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountDaysSinceEpoch(Year, 1);
        int daysInYear = sch.CountDaysInYear(Year);

        return from <#= DaysSinceEpochVar #>
               in Enumerable.Range(startOfYear, daysInYear)
               select <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the year month instance contains
    /// the specified date; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(<#= Prefix #>Date date) => date.Year == Year;

    /// <summary>
    /// Obtains the date corresponding to the specified day of this year instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfYear"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public <#= Prefix #>Date GetDayOfYear(int dayOfYear)
    {
        var chr = Calendar;
        // We already know that "y" is valid, we only need to check "dayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(Year, dayOfYear);
        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(Year, dayOfYear);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitYearDateSegment()

    protected virtual void EmitYearEquatable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(<#= Prefix #>Year left, <#= Prefix #>Year right) =>
        left._yearsSinceEpoch == right._yearsSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(<#= Prefix #>Year left, <#= Prefix #>Year right) =>
        left._yearsSinceEpoch != right._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(<#= Prefix #>Year other) => _yearsSinceEpoch == other._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is <#= Prefix #>Year year && Equals(year);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _yearsSinceEpoch;
}
<#+
    } // T4: End of EmitYearEquatable()

    protected virtual void EmitYearComparable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(<#= Prefix #>Year left, <#= Prefix #>Year right) =>
        left._yearsSinceEpoch < right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(<#= Prefix #>Year left, <#= Prefix #>Year right) =>
        left._yearsSinceEpoch <= right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(<#= Prefix #>Year left, <#= Prefix #>Year right) =>
        left._yearsSinceEpoch > right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(<#= Prefix #>Year left, <#= Prefix #>Year right) =>
        left._yearsSinceEpoch >= right._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Year Min(<#= Prefix #>Year x, <#= Prefix #>Year y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Year Max(<#= Prefix #>Year x, <#= Prefix #>Year y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(<#= Prefix #>Year other) =>
        _yearsSinceEpoch.CompareTo(other._yearsSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is <#= Prefix #>Year year ? CompareTo(year)
        : ThrowHelpers.ThrowNonComparable(typeof(<#= Prefix #>Year), obj);
}
<#+
    } // T4: End of EmitYearComparable()

    protected virtual void EmitYearMath()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Year // Math ops
{
    /// <summary>
    /// Subtracts the two specified years and returns the number of years between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountYearsSince()")]
    public static int operator -(<#= Prefix #>Year left, <#= Prefix #>Year right) => left.CountYearsSince(right);

    /// <summary>
    /// Adds a number of years to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported years.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusYears()")]
    public static <#= Prefix #>Year operator +(<#= Prefix #>Year value, int years) => value.PlusYears(years);

    /// <summary>
    /// Subtracts a number of years to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the range
    /// of supported years.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusYears()")]
    public static <#= Prefix #>Year operator -(<#= Prefix #>Year value, int years) => value.PlusYears(-years);

    /// <summary>
    /// Adds one year to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported year.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextYear()")]
    public static <#= Prefix #>Year operator ++(<#= Prefix #>Year value) => value.NextYear();

    /// <summary>
    /// Subtracts one year to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported year.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousYear()")]
    public static <#= Prefix #>Year operator --(<#= Prefix #>Year value) => value.PreviousYear();

    /// <summary>
    /// Counts the number of years elapsed since the specified year.
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Year other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to (MaxYear - 1).
        _yearsSinceEpoch - other._yearsSinceEpoch;

    /// <summary>
    /// Adds a number of years to the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported years.
    /// </exception>
    [Pure]
    public <#= Prefix #>Year PlusYears(int years)
    {
        int yearsSinceEpoch = checked(_yearsSinceEpoch + years);
        if (unchecked((uint)yearsSinceEpoch) > MaxYearsSinceEpoch) ThrowHelpers.ThrowYearOverflow();
        return new <#= Prefix #>Year((ushort)yearsSinceEpoch);
    }

    /// <summary>
    /// Obtains the year after the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported year.</exception>
    [Pure]
    public <#= Prefix #>Year NextYear()
    {
        if (_yearsSinceEpoch == MaxYearsSinceEpoch) ThrowHelpers.ThrowYearOverflow();
        return new <#= Prefix #>Year((ushort)(_yearsSinceEpoch + 1));
    }

    /// <summary>
    /// Obtains the year before the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported year.</exception>
    [Pure]
    public <#= Prefix #>Year PreviousYear()
    {
        if (_yearsSinceEpoch == 0) ThrowHelpers.ThrowYearOverflow();
        return new <#= Prefix #>Year((ushort)(_yearsSinceEpoch - 1));
    }
}
<#+
    } // T4: End of EmitYearMath()

} // T4: End of CalendarTemplate

#>
