<#+

public partial class CalendarTemplate
{
    protected void EmitCalendar()
    {
        // WARNING: the constructors of the schema and the scope MUST have a
        // fixed form as one can see below.

        WriteLine();
#>
#region <#= Prefix #>Calendar
<#+
        EmitCalendarPreamble();

        if (IsRegular)
        {
            EmitCalendarMathRegular();
        }
        else
        {
            EmitCalendarMathNonRegular();
        }
#>

#endregion
<#+
    }

    protected virtual void EmitCalendarPreamble()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> calendar.
/// <para>This calendar is <i>retropolated</i>. It supports <i>all</i> dates
/// within the range [1..9999] of years.</para>
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class <#= Prefix #>Calendar : Calendar
{
    /// <summary>
    /// Represents the display name.
    /// <para>This field is a constant.</para>
    /// </summary>
    internal const string DisplayName = "<#= DisplayName #>";

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Calendar"/> class.
    /// </summary>
    public <#= Prefix #>Calendar() : this(new <#= SchemaClass #>()) { }

    private <#= Prefix #>Calendar(<#= SchemaClass #> schema)
        : base(DisplayName, new <#= ScopeClass #>(schema, <#= Epoch #>))
    {
        Debug.Assert(Epoch.DaysSinceZero == <#= EpochDaysSinceZeroValue #>);
#if DEBUG
        // The next four properties only exist in DEBUG mode.
        Debug.Assert(MinDaysSinceEpoch == 0);
        Debug.Assert(MaxDaysSinceEpoch == <#= MaxDaysSinceEpochValue #>);
        Debug.Assert(MinMonthsSinceEpoch == 0);
        Debug.Assert(MaxMonthsSinceEpoch == <#= MaxMonthsSinceEpochValue #>);
#endif

        Schema = schema;
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="<#= Prefix #>Calendar"/> class.
    /// <para>See <see cref="<#= Prefix #>Date.Calendar"/>.</para>
    /// </summary>
    internal static <#= Prefix #>Calendar Instance { get; } = new();

    /// <summary>
    /// Gets the earliest supported year.
    /// </summary>
    public static int MinYear => <#= ScopeClass #>.MinYear;

    /// <summary>
    /// Gets the latest supported year.
    /// </summary>
    public static int MaxYear => <#= ScopeClass #>.MaxYear;

    /// <summary>
    /// Gets the schema.
    /// </summary>
    internal <#= SchemaClass #> Schema { get; }
}
<#+
    } // T4: End of EmitCalendarPreamble()

    protected virtual void EmitCalendarMathRegular()
    {
        WriteLine();
#>
public partial class <#= Prefix #>Calendar // Math
{
    /// <summary>
    /// Adds the specified number of years to the year part of the specified date,
    /// yielding a new date.
    /// <para>This method may truncate the result to the end of the target month
    /// to ensure that it returns a valid date; see <see cref="AdditionRule.Truncate"/>.
    /// </para>
    /// </summary>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal <#= Prefix #>Date AddYears(int y, int m, int d, int years)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        // NB: AdditionRule.Truncate.
        int newD = Math.Min(d, sch.CountDaysInMonth(newY, m));

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newY, m, newD);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }
<#+ if (EnableIsLeapYear) { #>

    /// <summary>
    /// Adds the specified number of years to the year part of the specified date
    /// and also returns the roundoff in an output parameter, yielding a new date.
    /// <para><paramref name="roundoff"/> corresponds to the number of days that
    /// were cut off, which is greater than or equal to 0, the latter only
    /// happening when the operation is exact.</para>
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal <#= Prefix #>Date AddYears(int y, int m, int d, int years, out int roundoff)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        int daysInMonth = sch.CountDaysInMonth(newY, m);
        roundoff = Math.Max(0, d - daysInMonth);
        // On retourne le dernier jour du mois si d > daysInMonth.
        int newD = roundoff == 0 ? d : daysInMonth;

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newY, m, newD);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }
<#+ } #>

    /// <summary>
    /// Adds the specified number of months to the month part of the specified
    /// date, yielding a new date.
    /// <para>This method may truncate the result to the end of the target month
    /// to ensure that it returns a valid date; see <see cref="AdditionRule.Truncate"/>.
    /// </para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal <#= Prefix #>Date AddMonths(int y, int m, int d, int months)
    {
        // Exact addition of months to a calendar month.
        int newM = 1 + MathZ.Modulo(
            checked(m - 1 + months), <#= SchemaClass #>.MonthsPerYear, out int years);

        return AddYears(y, newM, d, years);
    }
<#+ if (EnableIsLeapYear) { #>

    /// <summary>
    /// Adds the specified number of months to the month part of the specified
    /// date and also returns the roundoff in an output parameter, yielding a
    /// new date.
    /// <para><paramref name="roundoff"/> corresponds to the number of days that
    /// were cut off, which is greater than or equal to 0, the latter only
    /// happening when the operation is exact.</para>
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal <#= Prefix #>Date AddMonths(int y, int m, int d, int months, out int roundoff)
    {
        // Exact addition of months to a calendar month.
        int newM = 1 + MathZ.Modulo(
            checked(m - 1 + months), <#= SchemaClass #>.MonthsPerYear, out int years);

        return AddYears(y, newM, d, years, out roundoff);
    }
<#+ } #>
}
<#+
    } // T4: End of EmitCalendarMathRegular()

    protected virtual void EmitCalendarMathNonRegular()
    {
        WriteLine();
#>
public partial class <#= Prefix #>Calendar // Math
{
    //
    // <#= Prefix #>Date
    //

    [Pure]
    internal <#= Prefix #>Date AddYears(int y, int m, int d, int years)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        // NB: AdditionRule.Truncate.
        int monthsInYear = sch.CountMonthsInYear(newY);
        int newM;
        int newD;
        if (m > monthsInYear)
        {
            newM = monthsInYear;
            newD = sch.CountDaysInMonth(newY, monthsInYear);
        }
        else
        {
            newM = m;
            newD = Math.Min(d, sch.CountDaysInMonth(newY, m));
        }

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newY, newM, newD);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }

    [Pure]
    internal <#= Prefix #>Date AddYears(int y, int m, int d, int years, out int roundoff)
    {
        var sch = Schema;

        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        // FIXME(code): AddYears/Months() for non-regular calendars.

        int monthsInYear = sch.CountMonthsInYear(newY);
        int newM;
        int newD;
        if (m > monthsInYear)
        {
            // L'année cible newY a moins de mois que l'année y, on retourne le
            // dernier jour valide de l'année newY.
            // roundoff =
            //   "days" after the end of (y, monthsInYear) until (y, m, d) included
            //   + diff between end of (y, monthsInYear) and (newY, monthsInYear)
            roundoff = d;
            // En général, la boucle suivante est vide. Par exemple, pour le
            // calendrier Pax, on aurait ici monthsInYear = 13 (année ordinaire)
            // et m = 14 (mois intercalaire). Pour que ce ne soit pas le cas,
            // il faudrait au moins 2 mois intercalaires.
            for (int i = monthsInYear + 1; i < m; i++)
            {
                roundoff += sch.CountDaysInMonth(y, i);
            }
            int daysInMonth = sch.CountDaysInMonth(newY, monthsInYear);
            // TODO(code): roundoff += Math.Max(0, d - daysInMonth);

            // On retourne le dernier jour valide de l'année newY.
            newM = monthsInYear;
            newD = daysInMonth;
        }
        else
        {
            int daysInMonth = sch.CountDaysInMonth(newY, m);
            roundoff = Math.Max(0, d - daysInMonth);

            newM = m;
            // On retourne le dernier jour du mois si d > daysInMonth.
            newD = roundoff == 0 ? d : daysInMonth;
        }

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newY, newM, newD);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }

    [Pure]
    internal <#= Prefix #>Date AddMonths(int y, int m, int d, int months)
    {
        var sch = Schema;

        // Exact addition of months to a calendar month.
        int monthsSinceEpoch = checked(sch.CountMonthsSinceEpoch(y, m) + months);
        if (unchecked((uint)monthsSinceEpoch) > <#= Prefix #>Month.MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowDateOverflow();

        sch.GetMonthParts(monthsSinceEpoch, out int newY, out int newM);

        // NB: AdditionRule.Truncate.
        int newD = Math.Min(d, sch.CountDaysInMonth(newY, newM));

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newY, newM, newD);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }

    [Pure]
    internal <#= Prefix #>Date AddMonths(int y, int m, int d, int months, out int roundoff)
    {
        var sch = Schema;

        int monthsSinceEpoch = checked(sch.CountMonthsSinceEpoch(y, m) + months);
        if (unchecked((uint)monthsSinceEpoch) > <#= Prefix #>Month.MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowDateOverflow();

        sch.GetMonthParts(monthsSinceEpoch, out int newY, out int newM);

        int daysInMonth = sch.CountDaysInMonth(newY, newM);
        roundoff = Math.Max(0, d - daysInMonth);
        // On retourne le dernier jour du mois si d > daysInMonth.
        int newD = roundoff == 0 ? d : daysInMonth;

        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(newY, newM, newD);
        return <#= Prefix #>Date.UnsafeCreate(<#= DaysSinceEpochVar #>);
    }

    //
    // <#= Prefix #>Month
    //

    /// <summary>
    /// Adds a number of years to the year part of the specified month, yielding
    /// a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid month; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The last month of the target year when truncation happens.
    /// </returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal <#= Prefix #>Month AddYears(int y, int m, int years)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        // NB: AdditionRule.Truncate.
        int newM = Math.Min(m, sch.CountMonthsInYear(newY));

        int monthsSinceEpoch = sch.CountMonthsSinceEpoch(newY, newM);
        return <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
    }

    [Pure]
    internal <#= Prefix #>Month AddYears(int y, int m, int years, out int roundoff)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        int monthsInYear = sch.CountMonthsInYear(newY);
        roundoff = Math.Max(0, m - monthsInYear);
        // On retourne le dernier mois de l'année si m > monthsInYear.
        int newM = roundoff == 0 ? m : monthsInYear;

        int monthsSinceEpoch = sch.CountMonthsSinceEpoch(newY, newM);
        return <#= Prefix #>Month.UnsafeCreate(monthsSinceEpoch);
    }
}
<#+
    } // T4: End of EmitCalendarMathNonRegular()

} // T4: End of CalendarTemplate

#>
