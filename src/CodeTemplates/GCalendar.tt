<#@ include file="Calendar.tt" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #><#+

// Special case: Epoch = Gregorian epoch (DayZero.NewStyle)

public class GCalendarTemplate : CalendarTemplate
{
    public GCalendarTemplate(TextTransformation parent, string schema) : base(parent, schema)
    {
        DaysSinceEpochField = "_daysSinceZero";
    }

    protected override void EmitUsings()
    {
        WriteLine();
#>
using Calendrie.Core.Schemas;
using Calendrie.Hemerology;
using Calendrie.Hemerology.Scopes;
<#+ if (EnableClock) { #>
using Calendrie.Horology;
<#+ } #>
<#+
    } // T4: End of EmitUsings()

    protected override void EmitClock()
    {
        WriteLine();
#>
/// <summary>
/// Represents a clock for the <#= DisplayName #> calendar.
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class <#= Prefix #>Clock
{
    private readonly IClock _clock;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Clock"/> class.
    /// </summary>
    /// <exception cref="ArgumentNullException"><paramref name="clock"/> is
    /// <see langword="null"/>.</exception>
    public <#= Prefix #>Clock(IClock clock)
    {
        ArgumentNullException.ThrowIfNull(clock);

        _clock = clock;
    }

    /// <summary>
    /// Gets an instance of the <see cref="<#= Prefix #>Clock"/> class for the
    /// system clock using the current time zone setting on this machine.
    /// </summary>
    public static <#= Prefix #>Clock Local { get; } = new(SystemClocks.Local);

    /// <summary>
    /// Gets an instance of the <see cref="<#= Prefix #>Clock"/> class for the
    /// system clock using the Coordinated Universal Time (UTC).
    /// </summary>
    public static <#= Prefix #>Clock Utc { get; } = new(SystemClocks.Utc);

    /// <summary>
    /// Obtains an instance of the <see cref="<#= Prefix #>Clock"/> class for the
    /// specified clock.
    /// </summary>
    /// <exception cref="ArgumentNullException"><paramref name="clock"/> is
    /// <see langword="null"/>.</exception>
    [Pure]
    public static <#= Prefix #>Clock GetClock(IClock clock) => new(clock);

    /// <summary>
    /// Obtains a <see cref="<#= Prefix #>Date"/> value representing the current
    /// date.
    /// </summary>
    [Pure]
    public <#= Prefix #>Date GetCurrentDate() => new(_clock.Today().DaysSinceZero);
}
<#+
    } // T4: End of EmitClock()

    protected override void EmitDateDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> date.
/// <para><see cref="<#= Prefix #>Date"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Date :
    IDate<<#= Prefix #>Date, <#= Prefix #>Calendar>,
    IAdjustable<<#= Prefix #>Date>
{ }
<#+
    } // T4: End of EmitDateDecl()

    protected override void EmitDateAdjustment()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Adjustments
{
    /// <inheritdoc />
    /// <remarks>See also <seealso cref="Adjuster"/>.</remarks>
    [Pure]
    public <#= Prefix #>Date Adjust(Func<<#= Prefix #>Date, <#= Prefix #>Date> adjuster)
    {
        ArgumentNullException.ThrowIfNull(adjuster);

        return adjuster.Invoke(this);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Previous(DayOfWeek dayOfWeek)
    {
        var dayNumber = DayNumber.Previous(dayOfWeek);
        if (!s_Domain.Contains(dayNumber)) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(dayNumber.DaysSinceZero);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousOrSame(DayOfWeek dayOfWeek)
    {
        var dayNumber = DayNumber.PreviousOrSame(dayOfWeek);
        if (!s_Domain.Contains(dayNumber)) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(dayNumber.DaysSinceZero);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Nearest(DayOfWeek dayOfWeek)
    {
        var dayNumber = DayNumber.Nearest(dayOfWeek);
        if (!s_Domain.Contains(dayNumber)) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(dayNumber.DaysSinceZero);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextOrSame(DayOfWeek dayOfWeek)
    {
        var dayNumber = DayNumber.NextOrSame(dayOfWeek);
        if (!s_Domain.Contains(dayNumber)) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(dayNumber.DaysSinceZero);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Next(DayOfWeek dayOfWeek)
    {
        var dayNumber = DayNumber.Next(dayOfWeek);
        if (!s_Domain.Contains(dayNumber)) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(dayNumber.DaysSinceZero);
    }
}
<#+
    } // T4: End of EmitDateAdjustment()
} // T4: End of SpecializedCalendarTemplate

#>
