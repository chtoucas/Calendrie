<#+

public partial class CalendarTemplate
{
    protected virtual void EmitMonth()
    {
#>

#region <#= Prefix #>Month
<#+
        EmitMonthDecl();

        if (IsRegular)
        {
            EmitMonthPreambleRegular();
            EmitMonthFactoriesRegular();
            EmitMonthCountingRegular();
            EmitMonthAdjustmentsRegular();
            EmitMonthDateSegmentRegular();
            EmitMonthEquatable();
            EmitMonthComparable();
            EmitMonthMath();
            EmitMonthMathNonStandardRegular();
        }
        else
        {
            EmitMonthPreambleNonRegular();
            EmitMonthFactoriesNonRegular();
            EmitMonthCountingNonRegular();
            EmitMonthAdjustmentsNonRegular();
            EmitMonthDateSegmentNonRegular();
            EmitMonthEquatable();
            EmitMonthComparable();
            EmitMonthMath();
            EmitMonthMathNonStandardNonRegular();
        }
#>

#endregion
<#+
        if (EnableMonthCustomMath) {
#>

#region <#= Prefix #>MonthMath
<#+
            if (!IsRegular)
            {
                EmitMonthCustomMathNonRegular();
            }
#>

#endregion
<#+
        }
    }

    protected virtual void EmitMonthDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> month.
/// <para><i>All</i> months within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="<#= Prefix #>Month"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Month :
    IMonth<<#= Prefix #>Month>,
    ICalendarBound<<#= Prefix #>Calendar>,
    IUnsafeFactory<<#= Prefix #>Month>,
    // A month viewed as a finite sequence of days
    IDateSegment<<#= Prefix #>Date>,
    ISetMembership<<#= Prefix #>Date>,
    // Arithmetic
    ISubtractionOperators<<#= Prefix #>Month, <#= Prefix #>Month, int>
{ }
<#+
    } // T4: End of EmitMonthDecl()

    protected virtual void EmitMonthPreambleRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_monthsSinceEpoch"/>.
    /// <para>This field is a constant equal to <#= MaxMonthsSinceEpochValue #>.</para></summary>
    private const int MaxMonthsSinceEpoch = <#= MaxMonthsSinceEpochValue #>;

    /// <summary>
    /// Represents the count of consecutive months since the epoch
    /// <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxMonthsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly int _monthsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// to the specified month components.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid month or <paramref name="year"/> is outside the
    /// range of supported years.</exception>
    public <#= Prefix #>Month(int year, int month)
    {
        // The calendar being regular, no need to use the Scope:
        // > <#= Prefix #>Calendar.Instance.Scope.ValidateYearMonth(year, month);
        if (year < <#= ScopeClass #>.MinYear || year > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(year);
        if (month < 1 || month > <#= Prefix #>Calendar.MonthsInYear)
            ThrowHelpers.ThrowMonthOutOfRange(month);

        _monthsSinceEpoch = CountMonthsSinceEpoch(year, month);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Month"/> struct.
    /// <para>This constructor does NOT validate its parameters.</para>
    /// </summary>
    internal <#= Prefix #>Month(int monthsSinceEpoch)
    {
        _monthsSinceEpoch = monthsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="<#= Prefix #>Month"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported month.</returns>
    //
    // MinValue = new(0) = new() = default(<#= Prefix #>Month)
    public static <#= Prefix #>Month MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="<#= Prefix #>Month"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported month.</returns>
    public static <#= Prefix #>Month MaxValue { get; } = new(MaxMonthsSinceEpoch);

    /// <summary>
    /// Gets the calendar to which belongs the current month type.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    /// <inheritdoc />
    public int MonthsSinceEpoch => _monthsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year =>
        // NB: both dividend and divisor are >= 0.
        1 + _monthsSinceEpoch / <#= Prefix #>Calendar.MonthsInYear;

    /// <inheritdoc />
    public int Month
    {
        get
        {
            var (_, m) = this;
            return m;
        }
    }

    /// <inheritdoc />
    bool IMonth.IsIntercalary => false;

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        var (y, m) = this;
        return FormattableString.Invariant($"{m:D2}/{y:D4} ({<#= Prefix #>Calendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month)
    {
        // See RegularSchema.GetMonthParts().
        // NB: both dividend and divisor are >= 0.
        year = 1 + MathN.Divide(_monthsSinceEpoch, <#= Prefix #>Calendar.MonthsInYear, out int m0);
        month = 1 + m0;
    }
}
<#+
    } // T4: End of EmitMonthPreambleRegular()

    protected virtual void EmitMonthPreambleNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_monthsSinceEpoch"/>.
    /// <para>This field is a constant equal to <#= MaxMonthsSinceEpochValue #>.</para></summary>
    private const int MaxMonthsSinceEpoch = <#= MaxMonthsSinceEpochValue #>;

    /// <summary>
    /// Represents the count of consecutive months since the epoch
    /// <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxMonthsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly int _monthsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// to the specified month components.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid month or <paramref name="year"/> is outside the
    /// range of years.</exception>
    public <#= Prefix #>Month(int year, int month)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateYearMonth(year, month);

        _monthsSinceEpoch = chr.Schema.CountMonthsSinceEpoch(year, month);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Month"/> struct.
    /// <para>This constructor does NOT validate its parameters.</para>
    /// </summary>
    internal <#= Prefix #>Month(int monthsSinceEpoch)
    {
        _monthsSinceEpoch = monthsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="<#= Prefix #>Month"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported month.</returns>
    //
    // MinValue = new(0) = new() = default(<#= Prefix #>Month)
    public static <#= Prefix #>Month MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="<#= Prefix #>Month"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported month.</returns>
    public static <#= Prefix #>Month MaxValue { get; } = new(MaxMonthsSinceEpoch);

    /// <summary>
    /// Gets the calendar to which belongs the current month type.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    /// <inheritdoc />
    public int MonthsSinceEpoch => _monthsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year
    {
        get
        {
            Calendar.Schema.GetMonthParts(_monthsSinceEpoch, out int y, out _);
            return y;
        }
    }

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetMonthParts(_monthsSinceEpoch, out _, out int m);
            return m;
        }
    }

    /// <inheritdoc />
    public bool IsIntercalary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
            return sch.IsIntercalaryMonth(y, m);
        }
    }

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        Calendar.Schema.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        return FormattableString.Invariant($"{m:D2}/{y:D4} ({<#= Prefix #>Calendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month) =>
        Calendar.Schema.GetMonthParts(_monthsSinceEpoch, out year, out month);
}
<#+
    } // T4: End of EmitMonthPreambleNonRegular()

    protected virtual void EmitMonthFactoriesRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Factories & conversions
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Month Create(int year, int month) => new(year, month);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="<#= Prefix #>Month"/>
    /// struct from the specified month components.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Month? TryCreate(int year, int month)
    {
        // The calendar being regular, no need to use the PreValidator.
        if (year < <#= ScopeClass #>.MinYear || year > <#= ScopeClass #>.MaxYear
            || month < 1 || month > <#= Prefix #>Calendar.MonthsInYear)
        {
            return null;
        }

        return UnsafeCreate(year, month);
    }

    // Explicit implementation: <#= Prefix #>Month being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IMonth<<#= Prefix #>Month>.TryCreate(int year, int month, out <#= Prefix #>Month result)
    {
        var monthValue = TryCreate(year, month);
        result = monthValue ?? default;
        return monthValue.HasValue;
    }

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// from the specified month components.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static <#= Prefix #>Month UnsafeCreate(int year, int month)
    {
        int monthsSinceEpoch = CountMonthsSinceEpoch(year, month);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }

    [Pure]
    static <#= Prefix #>Month IUnsafeFactory<<#= Prefix #>Month>.UnsafeCreate(int monthsSinceEpoch) =>
        new(monthsSinceEpoch);

    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static int CountMonthsSinceEpoch(int y, int m) =>
        // See RegularSchema.CountMonthsSinceEpoch().
        <#= Prefix #>Calendar.MonthsInYear * (y - 1) + m - 1;

    //
    // Conversions
    //

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// from the specified number of consecutive months since the epoch.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Month FromMonthsSinceEpoch(int monthsSinceEpoch)
    {
        if (unchecked((uint)monthsSinceEpoch) > MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowMonthsSinceEpochOutOfRange(monthsSinceEpoch);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// from the specified <see cref="<#= Prefix #>Date"/> value.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Month FromDate(<#= Prefix #>Date date)
    {
        var (y, m, _) = date;
        return UnsafeCreate(y, m);
    }
}
<#+
    } // T4: End of EmitMonthFactoriesRegular()

    protected virtual void EmitMonthFactoriesNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Factories & conversions
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Month Create(int year, int month) => new(year, month);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="<#= Prefix #>Month"/>
    /// struct from the specified month components.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Month? TryCreate(int year, int month)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckYearMonth(year, month)) return null;

        int monthsSinceEpoch = chr.Schema.CountMonthsSinceEpoch(year, month);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }

    // Explicit implementation: <#= Prefix #>Month being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IMonth<<#= Prefix #>Month>.TryCreate(int year, int month, out <#= Prefix #>Month result)
    {
        var monthValue = TryCreate(year, month);
        result = monthValue ?? default;
        return monthValue.HasValue;
    }

    // No method UnsafeCreate(int year, int month) to avoid multiple lookup to
    // the property Calendar.

    [Pure]
    static <#= Prefix #>Month IUnsafeFactory<<#= Prefix #>Month>.UnsafeCreate(int monthsSinceEpoch) =>
        new(monthsSinceEpoch);

    //
    // Conversions
    //

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// from the specified number of consecutive months since the epoch.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Month FromMonthsSinceEpoch(int monthsSinceEpoch)
    {
        if (unchecked((uint)monthsSinceEpoch) > MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowMonthsSinceEpochOutOfRange(monthsSinceEpoch);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Month"/> struct
    /// from the specified <see cref="<#= Prefix #>Date"/> value.
    /// </summary>
    [Pure]
    public static <#= Prefix #>Month FromDate(<#= Prefix #>Date date)
    {
        var sch = Calendar.Schema;
        sch.GetDateParts(date.DaysSinceEpoch, out int y, out int m, out _);
        int monthsSinceEpoch = sch.CountMonthsSinceEpoch(y, m);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }
}
<#+
    } // T4: End of EmitMonthFactoriesNonRegular()

    protected virtual void EmitMonthCountingRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedMonthsInYear() => Month - 1;

    /// <inheritdoc />
    [Pure]
    public int CountRemainingMonthsInYear() => <#= Prefix #>Calendar.MonthsInYear - 1;

#if false
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearBeforeMonth(y, m);
    }

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearAfterMonth(y, m);
    }
#endif
}
<#+
    } // T4: End of EmitMonthCountingRegular()

    protected virtual void EmitMonthCountingNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedMonthsInYear() => Month - 1;

    /// <inheritdoc />
    [Pure]
    public int CountRemainingMonthsInYear() => Calendar.Schema.CountMonthsInYear(Year) - 1;

#if false
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear()
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        return sch.CountDaysInYearBeforeMonth(y, m);
    }

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear()
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        return sch.CountDaysInYearAfterMonth(y, m);
    }
#endif
}
<#+
    } // T4: End of EmitMonthCountingNonRegular()

    protected virtual void EmitMonthAdjustmentsRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Month WithYear(int newYear)
    {
        int m = Month;

        // Even when "newYear" is valid, we must re-check "m".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.ValidateYearMonth(newYear, m, nameof(newYear));
        if (newYear < <#= ScopeClass #>.MinYear || newYear > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(newYear);
        if (m < 1 || m > <#= Prefix #>Calendar.MonthsInYear)
            ThrowHelpers.ThrowMonthOutOfRange(m, nameof(newYear));

        return UnsafeCreate(newYear, m);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Month WithMonth(int newMonth)
    {
        int y = Year;

        // We already know that "y" is valid, we only need to check "newMonth".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.PreValidator.ValidateMonth(y, newMonth, nameof(newMonth));
        if (newMonth < 1 || newMonth > <#= Prefix #>Calendar.MonthsInYear)
            ThrowHelpers.ThrowMonthOutOfRange(newMonth, nameof(newMonth));

        return UnsafeCreate(y, newMonth);
    }
}
<#+
    } // T4: End of EmitMonthAdjustmentsRegular()

    protected virtual void EmitMonthAdjustmentsNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Month WithYear(int newYear)
    {
        var chr = Calendar;
        var sch = chr.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out _, out int m);
        // Even when "newYear" is valid, we must re-check "m".
        chr.Scope.ValidateYearMonth(newYear, m, nameof(newYear));
        int monthsSinceEpoch = sch.CountMonthsSinceEpoch(newYear, m);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Month WithMonth(int newMonth)
    {
        var chr = Calendar;
        var sch = chr.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out _);
        // We already know that "y" is valid, we only need to check "newMonth".
        chr.Scope.PreValidator.ValidateMonth(y, newMonth, nameof(newMonth));
        int monthsSinceEpoch = sch.CountMonthsSinceEpoch(y, newMonth);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }
}
<#+
    } // T4: End of EmitMonthAdjustmentsNonRegular()

    protected virtual void EmitMonthDateSegmentRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IDateSegment
{
    /// <inheritdoc />
    public <#= Prefix #>Date MinDay
    {
        get
        {
            var (y, m) = this;
            int <#= DaysSinceEpochVar #> = Calendar.Schema.CountDaysSinceEpoch(y, m, 1);
            return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    public <#= Prefix #>Date MaxDay
    {
        get
        {
            var (y, m) = this;
            var sch = Calendar.Schema;
            int d = sch.CountDaysInMonth(y, m);
            int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, m, d);
            return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    /// <remarks>See also <see cref="CalendarSystem{TDate}.CountDaysInMonth(int, int)"/>.
    /// </remarks>
    [Pure]
    public int CountDays()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInMonth(y, m);
    }

    /// <summary>
    /// Converts the current instance to a range of days.
    /// </summary>
    /// <remarks>See also <see cref="CalendarSystem{TDate}.GetDaysInMonth(int, int)"/>.
    /// </remarks>
    [Pure]
    public Range<<#= Prefix #>Date> ToRange()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);
        return Range.StartingAt(new <#= Prefix #>Date(startOfMonth), daysInMonth);
    }

    [Pure]
    Range<<#= Prefix #>Date> IDateSegment<<#= Prefix #>Date>.ToDayRange() => ToRange();

    /// <summary>
    /// Returns an enumerable collection of all days in this month instance.
    /// </summary>
    [Pure]
    public IEnumerable<<#= Prefix #>Date> ToEnumerable()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);

        return from <#= DaysSinceEpochVar #>
               in Enumerable.Range(startOfMonth, daysInMonth)
               select new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    [Pure]
    IEnumerable<<#= Prefix #>Date> IDateSegment<<#= Prefix #>Date>.EnumerateDays() => ToEnumerable();

    /// <inheritdoc />
    [Pure]
    public bool Contains(<#= Prefix #>Date date)
    {
        var (y, m) = this;
        Calendar.Schema.GetDateParts(date.<#= DaysSinceEpochPC #>, out int y1, out int m1, out _);
        return y1 == y && m1 == m;
    }

    /// <summary>
    /// Obtains the date corresponding to the specified day of this month
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfMonth"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public <#= Prefix #>Date GetDayOfMonth(int dayOfMonth)
    {
        var (y, m) = this;
        var chr = Calendar;
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, dayOfMonth);
        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(y, m, dayOfMonth);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitMonthDateSegmentRegular()

    protected virtual void EmitMonthDateSegmentNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IDateSegment
{
    /// <inheritdoc />
    public <#= Prefix #>Date MinDay
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
            int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, m, 1);
            return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    public <#= Prefix #>Date MaxDay
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
            int d = sch.CountDaysInMonth(y, m);
            int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, m, d);
            return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    /// <remarks>See also <see cref="CalendarSystem{TDate}.CountDaysInMonth(int, int)"/>.
    /// </remarks>
    [Pure]
    public int CountDays()
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        return sch.CountDaysInMonth(y, m);
    }

    /// <summary>
    /// Converts the current instance to a range of days.
    /// </summary>
    /// <remarks>See also <see cref="CalendarSystem{TDate}.GetDaysInMonth(int, int)"/>.
    /// </remarks>
    [Pure]
    public Range<<#= Prefix #>Date> ToRange()
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);
        return Range.StartingAt(new <#= Prefix #>Date(startOfMonth), daysInMonth);
    }

    [Pure]
    Range<<#= Prefix #>Date> IDateSegment<<#= Prefix #>Date>.ToDayRange() => ToRange();

    /// <summary>
    /// Returns an enumerable collection of all days in this month instance.
    /// </summary>
    [Pure]
    public IEnumerable<<#= Prefix #>Date> ToEnumerable()
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);

        return from <#= DaysSinceEpochVar #>
               in Enumerable.Range(startOfMonth, daysInMonth)
               select new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    [Pure]
    IEnumerable<<#= Prefix #>Date> IDateSegment<<#= Prefix #>Date>.EnumerateDays() => ToEnumerable();

    /// <inheritdoc />
    [Pure]
    public bool Contains(<#= Prefix #>Date date)
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        sch.GetDateParts(date.DaysSinceEpoch, out int y1, out int m1, out _);
        return y1 == y && m1 == m;
    }

    /// <summary>
    /// Obtains the date corresponding to the specified day of this month
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfMonth"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public <#= Prefix #>Date GetDayOfMonth(int dayOfMonth)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, dayOfMonth);
        int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, m, dayOfMonth);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitMonthDateSegmentNonRegular()

    protected virtual void EmitMonthEquatable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._monthsSinceEpoch == right._monthsSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._monthsSinceEpoch != right._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(<#= Prefix #>Month other) => _monthsSinceEpoch == other._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is <#= Prefix #>Month month && Equals(month);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _monthsSinceEpoch;
}
<#+
    } // T4: End of EmitMonthEquatable()

    protected virtual void EmitMonthComparable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._monthsSinceEpoch < right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._monthsSinceEpoch <= right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._monthsSinceEpoch > right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._monthsSinceEpoch >= right._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Month Min(<#= Prefix #>Month x, <#= Prefix #>Month y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Month Max(<#= Prefix #>Month x, <#= Prefix #>Month y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(<#= Prefix #>Month other) => _monthsSinceEpoch.CompareTo(other._monthsSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is <#= Prefix #>Month month ? CompareTo(month)
        : ThrowHelpers.ThrowNonComparable(typeof(<#= Prefix #>Month), obj);
}
<#+
    } // T4: End of EmitMonthComparable()

    protected virtual void EmitMonthMath()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified months and returns the number of months
    /// between them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountMonthsSince()")]
    public static int operator -(<#= Prefix #>Month left, <#= Prefix #>Month right) => left.CountMonthsSince(right);

    /// <summary>
    /// Adds a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static <#= Prefix #>Month operator +(<#= Prefix #>Month value, int months) => value.PlusMonths(months);

    /// <summary>
    /// Subtracts a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static <#= Prefix #>Month operator -(<#= Prefix #>Month value, int months) => value.PlusMonths(-months);

    /// <summary>
    /// Adds one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextMonth()")]
    public static <#= Prefix #>Month operator ++(<#= Prefix #>Month value) => value.NextMonth();

    /// <summary>
    /// Subtracts one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousMonth()")]
    public static <#= Prefix #>Month operator --(<#= Prefix #>Month value) => value.PreviousMonth();

    /// <summary>
    /// Counts the number of months elapsed since the specified month.
    /// </summary>
    [Pure]
    public int CountMonthsSince(<#= Prefix #>Month other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to MaxMonthsSinceEpoch.
        _monthsSinceEpoch - other._monthsSinceEpoch;

    /// <summary>
    /// Adds a number of months to the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [Pure]
    public <#= Prefix #>Month PlusMonths(int months)
    {
        int monthsSinceEpoch = checked(_monthsSinceEpoch + months);
        if (unchecked((uint)monthsSinceEpoch) > MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowMonthOverflow();
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }

    /// <summary>
    /// Obtains the month after the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [Pure]
    public <#= Prefix #>Month NextMonth()
    {
        if (_monthsSinceEpoch == MaxMonthsSinceEpoch) ThrowHelpers.ThrowMonthOverflow();
        return new <#= Prefix #>Month(_monthsSinceEpoch + 1);
    }

    /// <summary>
    /// Obtains the month before the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [Pure]
    public <#= Prefix #>Month PreviousMonth()
    {
        if (_monthsSinceEpoch == 0) ThrowHelpers.ThrowMonthOverflow();
        return new <#= Prefix #>Month(_monthsSinceEpoch - 1);
    }
}
<#+
    } // T4: End of EmitMonthMath()

    protected virtual void EmitMonthMathNonStandardRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Non-standard math ops
{
    /// <summary>
    /// Adds a number of years to the year field of this month instance, yielding
    /// a new month.
    /// <para>In the particular case of the <#= Prefix #> calendar, this
    /// operation is exact.</para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported months.</exception>
    [Pure]
    public <#= Prefix #>Month PlusYears(int years)
    {
        var (y, m) = this;
        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        return UnsafeCreate(newY, m);
    }

    /// <summary>
    /// Counts the number of years elapsed since the specified month.
    /// <para>In the particular case of the <#= Prefix #> calendar, this
    /// operation is exact.</para>
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Month other) =>
        // NB: this subtraction never overflows.
        Year - other.Year;
}
<#+
    } // T4: End of EmitMonthMathNonStandardRegular

    protected virtual void EmitMonthMathNonStandardNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Non-standard math ops
{
    /// <summary>
    /// Adds a number of years to the year field of this month instance, yielding
    /// a new month.
    /// <para>This method may truncate the (naïve) to ensure that it returns a
    /// valid month; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported months.</exception>
    [Pure]
    public <#= Prefix #>Month PlusYears(int years)
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(_monthsSinceEpoch, out int y, out int m);
        return AddYears(sch, y, m, years);
    }

    /// <summary>
    /// Counts the number of years elapsed since the specified month.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusYears(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Month other)
    {
        var sch = Calendar.Schema;
        sch.GetMonthParts(other._monthsSinceEpoch, out int y0, out int m0);

        // Exact difference between two calendar years.
        int years = Year - y0;

        // To avoid extracting y0 twice, we inline:
        // > var newStart = other.PlusYears(years);
        var newStart = AddYears(sch, y0, m0, years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }

    /// <summary>
    /// Adds a number of years to the year field of the specified date, yielding
    /// a new date.
    /// <para>This method may truncate the (naïve) to ensure that it returns a
    /// valid month; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    private static <#= Prefix #>Month AddYears(<#= Prefix #>Schema sch, int y, int m, int years)
    {
        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < <#= ScopeClass #>.MinYear || newY > <#= ScopeClass #>.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        // NB: AdditionRule.Truncate.
        int newM = Math.Min(m, sch.CountMonthsInYear(newY));

        int monthsSinceEpoch = sch.CountMonthsSinceEpoch(newY, newM);
        return new <#= Prefix #>Month(monthsSinceEpoch);
    }
}
<#+
    } // T4: End of EmitMonthMathNonStandardNonRegular

    protected virtual void EmitMonthCustomMathNonRegular()
    {
        WriteLine();
#>
/// <summary>
/// Provides non-standard mathematical operations for the
/// <see cref="<#= Prefix #>Month"/> type.
/// <para>This class allows to customize the <see cref="AdditionRule"/> strategy.
/// </para>
/// </summary>
public sealed class <#= Prefix #>MonthMath : MonthMathPlain<<#= Prefix #>Month, <#= Prefix #>Calendar>
{
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>MonthMath"/> class.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="rule"/>
    /// was not a known member of the enum <see cref="AdditionRule"/>.</exception>
    public <#= Prefix #>MonthMath(AdditionRule rule) : base(rule) { }
}
<#+
    } // T4: End of EmitMonthCustomMathNonRegular

} // T4: End of CalendarTemplate

#>
