<#+

public partial class CalendarTemplate
{
    protected virtual void EmitMonth()
    {
#>

#region <#= Prefix #>Month
<#+
        EmitMonthDecl();

        if (IsRegular)
        {
            EmitMonthPreamble();
            EmitMonthCounting();
            EmitMonthAdjustment();
            EmitMonthDaySegment();
            EmitMonthEquatable();
            EmitMonthComparable();
            EmitMonthMath();
            EmitMonthMathNonStandardRegular();
        }
        else
        {
            EmitMonthMathNonStandardNonRegular();
        }
#>

#endregion
<#+
    }

    protected virtual void EmitMonthDecl()
    {
        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> month.
/// <para><i>All</i> months within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="<#= Prefix #>Month"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct <#= Prefix #>Month :
    ICalendarMonth<<#= Prefix #>Month>,
    ICalendarBound<<#= Prefix #>Calendar>,
    // A month viewed as a finite sequence of days
    IDaySegment<<#= Prefix #>Date>,
    ISetMembership<<#= Prefix #>Date>,
    // Arithmetic
    ISubtractionOperators<<#= Prefix #>Month, <#= Prefix #>Month, int>
{ }
<#+
    } // T4: End of EmitMonthDecl()

    protected virtual void EmitMonthPreamble()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_<#= MonthsSinceEpochVar #>"/>.
    /// <para>This field is a constant equal to <#= MaxMonthsSinceEpochValue #>.</para></summary>
    private const int <#= MaxMonthsSinceEpoch #> = <#= MaxMonthsSinceEpochValue #>;

    /// <summary>
    /// Represents the count of consecutive months since the epoch <see cref="<#= Epoch #>"/>.
    /// <para>This field is in the range from 0 to <see cref="<#= MaxMonthsSinceEpoch #>"/>.
    /// </para>
    /// </summary>
    private readonly int _<#= MonthsSinceEpochVar #>;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Month"/> struct to the
    /// specified month components.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid month or <paramref name="year"/> is outside the
    /// range of supported years.</exception>
    public <#= Prefix #>Month(int year, int month)
    {
        <#= Prefix #>Calendar.Instance.Scope.ValidateYearMonth(year, month);

        _<#= MonthsSinceEpochVar #> = CountMonthsSinceEpoch(year, month);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Month"/> struct.
    /// <para>This constructor does NOT validate its parameters.</para>
    /// </summary>
    internal <#= Prefix #>Month(int <#= MonthsSinceEpochVar #>)
    {
        _<#= MonthsSinceEpochVar #> = <#= MonthsSinceEpochVar #>;
    }

    /// <summary>
    /// Gets the earliest possible value of a <see cref="<#= Prefix #>Month"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    //
    // MinValue = new(0) = new() = default(<#= Prefix #>Month)
    public static <#= Prefix #>Month MinValue { get; }

    /// <summary>
    /// Gets the latest possible value of a <see cref="<#= Prefix #>Month"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Month MaxValue { get; } = new(<#= MaxMonthsSinceEpoch #>);

    /// <summary>
    /// Gets the calendar to which belongs the current month type.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    /// <inheritdoc />
    public int MonthsSinceEpoch => _<#= MonthsSinceEpochVar #>;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>This property represents the algebraic year, but since it's greater
    /// than 0, there is no difference between the algebraic year and the year
    /// of the era.</para>
    /// </summary>
    public int Year => 1 + MathZ.Divide(_<#= MonthsSinceEpochVar #>, <#= Prefix #>Calendar.MonthsInYear);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            var (_, m) = this;
            return m;
        }
    }

    /// <inheritdoc />
    bool ICalendarMonth.IsIntercalary => false;

#if false
    /// <summary>
    /// Gets the calendar year.
    /// </summary>
    public <#= Prefix #>Year CalendarYear => new(Year, true);
#endif

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        var (y, m) = this;
        return FormattableString.Invariant($"{m:D2}/{y:D4} ({Calendar})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month)
    {
        // See RegularSchema.GetMonthParts().
        year = 1 + MathZ.Divide(_<#= MonthsSinceEpochVar #>, <#= Prefix #>Calendar.MonthsInYear, out int m0);
        month = 1 + m0;
    }

    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static int CountMonthsSinceEpoch(int y, int m) =>
        // See RegularSchema.CountMonthsSinceEpoch().
        <#= Prefix #>Calendar.MonthsInYear * (y - 1) + m - 1;
}
<#+
    } // T4: End of EmitMonthPreamble()

    protected virtual void EmitMonthCounting()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedMonthsInYear() => Month - 1;

    /// <inheritdoc />
    [Pure]
    public int CountRemainingMonthsInYear() => <#= Prefix #>Calendar.MonthsInYear - 1;

#if false
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearBeforeMonth(y, m);
    }

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearAfterMonth(y, m);
    }
#endif
}
<#+
    } // T4: End of EmitMonthCounting()

    protected virtual void EmitMonthAdjustment()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Month WithYear(int newYear)
    {
        int m = Month;
        // Even when "newYear" is valid, we must re-check "m".
        Calendar.Scope.ValidateYearMonth(newYear, m, nameof(newYear));
        return new <#= Prefix #>Month(newYear, m);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Month WithMonth(int newMonth)
    {
        int y = Year;
        // We already know that "y" is valid, we only need to check "newMonth".
        Calendar.Scope.PreValidator.ValidateMonth(y, newMonth, nameof(newMonth));
        return new <#= Prefix #>Month(y, newMonth);
    }
}
<#+
    } // T4: End of EmitMonthAdjustment()

    protected virtual void EmitMonthDaySegment()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IDaySegment
{
    /// <inheritdoc />
    public <#= Prefix #>Date MinDay
    {
        get
        {
            var (y, m) = this;
            int <#= DaysSinceEpochVar #> = Calendar.Schema.CountDaysSinceEpoch(y, m, 1);
            return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    public <#= Prefix #>Date MaxDay
    {
        get
        {
            var (y, m) = this;
            var sch = Calendar.Schema;
            int d = sch.CountDaysInMonth(y, m);
            int <#= DaysSinceEpochVar #> = sch.CountDaysSinceEpoch(y, m, d);
            return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
        }
    }

    /// <inheritdoc />
    /// <remarks>See also <see cref="CalendarSystem{TDate}.CountDaysInMonth(int, int)"/>.
    /// </remarks>
    [Pure]
    public int CountDays()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInMonth(y, m);
    }

    /// <summary>
    /// Converts the current instance to a range of days.
    /// </summary>
    /// <remarks>See also <see cref="CalendarSystem{TDate}.GetDaysInMonth(int, int)"/>.
    /// </remarks>
    [Pure]
    public Range<<#= Prefix #>Date> ToRange() => Range.UnsafeCreate(MinDay, MaxDay);

    [Pure]
    Range<<#= Prefix #>Date> IDaySegment<<#= Prefix #>Date>.ToDayRange() => ToRange();

    /// <summary>
    /// Returns an enumerable collection of all days in this month instance.
    /// </summary>
    [Pure]
    public IEnumerable<<#= Prefix #>Date> ToEnumerable()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);

        return from <#= DaysSinceEpochVar #>
               in Enumerable.Range(startOfMonth, daysInMonth)
               select new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    [Pure]
    IEnumerable<<#= Prefix #>Date> IDaySegment<<#= Prefix #>Date>.EnumerateDays() => ToEnumerable();

    /// <inheritdoc />
    [Pure]
    public bool Contains(<#= Prefix #>Date date)
    {
        var (y, m) = this;
        Calendar.Schema.GetDateParts(date.<#= DaysSinceEpochProp #>, out int y1, out int m1, out _);
        return y1 == y && m1 == m;
    }

    /// <summary>
    /// Obtains the date corresponding to the specified day of this month
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfMonth"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public <#= Prefix #>Date GetDayOfMonth(int dayOfMonth)
    {
        var (y, m) = this;
        Calendar.Scope.PreValidator.ValidateDayOfMonth(y, m, dayOfMonth);
        return new <#= Prefix #>Date(y, m, dayOfMonth);
    }
}
<#+
    } // T4: End of EmitMonthDaySegment()

    protected virtual void EmitMonthEquatable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._<#= MonthsSinceEpochVar #> == right._<#= MonthsSinceEpochVar #>;

    /// <inheritdoc />
    public static bool operator !=(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._<#= MonthsSinceEpochVar #> != right._<#= MonthsSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public bool Equals(<#= Prefix #>Month other) => _<#= MonthsSinceEpochVar #> == other._<#= MonthsSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is <#= Prefix #>Month month && Equals(month);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _<#= MonthsSinceEpochVar #>;
}
<#+
    } // T4: End of EmitMonthEquatable()

    protected virtual void EmitMonthComparable()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._<#= MonthsSinceEpochVar #> < right._<#= MonthsSinceEpochVar #>;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._<#= MonthsSinceEpochVar #> <= right._<#= MonthsSinceEpochVar #>;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._<#= MonthsSinceEpochVar #> > right._<#= MonthsSinceEpochVar #>;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(<#= Prefix #>Month left, <#= Prefix #>Month right) =>
        left._<#= MonthsSinceEpochVar #> >= right._<#= MonthsSinceEpochVar #>;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Month Min(<#= Prefix #>Month x, <#= Prefix #>Month y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Month Max(<#= Prefix #>Month x, <#= Prefix #>Month y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(<#= Prefix #>Month other) => _<#= MonthsSinceEpochVar #>.CompareTo(other._<#= MonthsSinceEpochVar #>);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is <#= Prefix #>Month month ? CompareTo(month)
        : ThrowHelpers.ThrowNonComparable(typeof(<#= Prefix #>Month), obj);
}
<#+
    } // T4: End of EmitMonthComparable()

    protected virtual void EmitMonthMath()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified months and returns the number of months
    /// between them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountMonthsSince()")]
    public static int operator -(<#= Prefix #>Month left, <#= Prefix #>Month right) => left.CountMonthsSince(right);

    /// <summary>
    /// Adds a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static <#= Prefix #>Month operator +(<#= Prefix #>Month value, int months) => value.PlusMonths(months);

    /// <summary>
    /// Subtracts a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static <#= Prefix #>Month operator -(<#= Prefix #>Month value, int months) => value.PlusMonths(-months);

    /// <summary>
    /// Adds one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextMonth()")]
    public static <#= Prefix #>Month operator ++(<#= Prefix #>Month value) => value.NextMonth();

    /// <summary>
    /// Subtracts one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousMonth()")]
    public static <#= Prefix #>Month operator --(<#= Prefix #>Month value) => value.PreviousMonth();

    /// <summary>
    /// Counts the number of months elapsed since the specified month.
    /// </summary>
    [Pure]
    public int CountMonthsSince(<#= Prefix #>Month other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to <#= MaxMonthsSinceEpoch #>.
        _<#= MonthsSinceEpochVar #> - other._<#= MonthsSinceEpochVar #>;

    /// <summary>
    /// Adds a number of months to the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [Pure]
    public <#= Prefix #>Month PlusMonths(int months)
    {
        int <#= MonthsSinceEpochVar #> = checked(_<#= MonthsSinceEpochVar #> + months);
        if (unchecked((uint)<#= MonthsSinceEpochVar #>) > <#= MaxMonthsSinceEpoch #>)
            ThrowHelpers.ThrowMonthOverflow();
        return new(<#= MonthsSinceEpochVar #>);
    }

    /// <summary>
    /// Obtains the month after the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [Pure]
    public <#= Prefix #>Month NextMonth()
    {
        if (_<#= MonthsSinceEpochVar #> == <#= MaxMonthsSinceEpoch #>) ThrowHelpers.ThrowMonthOverflow();
        return new(_<#= MonthsSinceEpochVar #> + 1);
    }

    /// <summary>
    /// Obtains the month before the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [Pure]
    public <#= Prefix #>Month PreviousMonth()
    {
        if (_<#= MonthsSinceEpochVar #> == 0) ThrowHelpers.ThrowMonthOverflow();
        return new(_<#= MonthsSinceEpochVar #> - 1);
    }
}
<#+
    } // T4: End of EmitMonthMath()

    protected virtual void EmitMonthMathNonStandardRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Non-standard math ops
{
    // For regular calendars, the next operations are unambiguous.

    /// <summary>
    /// Adds a number of years to the year field of this month instance, yielding
    /// a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported months.</exception>
    [Pure]
    public <#= Prefix #>Month PlusYears(int years)
    {
        var (y, m) = this;
        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < StandardScope.MinYear || newY > StandardScope.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        int <#= MonthsSinceEpochVar #> = CountMonthsSinceEpoch(newY, m);
        return new <#= Prefix #>Month(<#= MonthsSinceEpochVar #>);
    }

    /// <summary>
    /// Counts the number of years elapsed since the specified month.
    /// </summary>
    [Pure]
    public int CountYearsSince(<#= Prefix #>Month other) =>
        // NB: this subtraction never overflows.
        Year - other.Year;
}
<#+
    } // T4: End of EmitMonthMathNonStandardRegular

    protected virtual void EmitMonthMathNonStandardNonRegular()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Month // Non-standard math ops
{
}
<#+
    } // T4: End of EmitMonthMathNonStandardNonRegular

} // T4: End of CalendarTemplate

#>
