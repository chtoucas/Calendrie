<#@ include file="Calendar.tt" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #><#+

// Special case when Epoch = DayZero.NewStyle, the Gregorian epoch ie DayNumber.Zero
// We use "Zero" instead of "Epoch" and we remove s_Epoch.

public class ZeroCalendarTemplate : CalendarTemplate
{
    public ZeroCalendarTemplate(TextTransformation parent, string schema, string maxDaysSinceEpochValue) :
        base(parent, schema, "DayZero.NewStyle", "0", maxDaysSinceEpochValue)
    {
        DaysSinceEpochPC = "DaysSinceZero";
        DaysSinceEpochVar = "daysSinceZero";
        MaxDaysSinceEpoch = "MaxDaysSinceZero";
    }

    protected override void EmitClock()
    {
        WriteLine();
#>

#region <#= Prefix #>Clock

/// <summary>
/// Represents a clock for the <#= DisplayName #> calendar.
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class <#= Prefix #>Clock
{
    private readonly IClock _clock;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Clock"/> class.
    /// </summary>
    /// <exception cref="ArgumentNullException"><paramref name="clock"/> is
    /// <see langword="null"/>.</exception>
    public <#= Prefix #>Clock(IClock clock)
    {
        ArgumentNullException.ThrowIfNull(clock);

        _clock = clock;
    }

    /// <summary>
    /// Gets an instance of the <see cref="<#= Prefix #>Clock"/> class for the
    /// system clock using the current time zone setting on this machine.
    /// </summary>
    public static <#= Prefix #>Clock Local { get; } = new(SystemClocks.Local);

    /// <summary>
    /// Gets an instance of the <see cref="<#= Prefix #>Clock"/> class for the
    /// system clock using the Coordinated Universal Time (UTC).
    /// </summary>
    public static <#= Prefix #>Clock Utc { get; } = new(SystemClocks.Utc);

    /// <summary>
    /// Obtains an instance of the <see cref="<#= Prefix #>Clock"/> class for the
    /// specified clock.
    /// </summary>
    /// <exception cref="ArgumentNullException"><paramref name="clock"/> is
    /// <see langword="null"/>.</exception>
    [Pure]
    public static <#= Prefix #>Clock GetClock(IClock clock) => new(clock);

    /// <summary>
    /// Obtains a <see cref="<#= Prefix #>Date"/> value representing the current
    /// date.
    /// </summary>
    [Pure]
    public <#= Prefix #>Date GetCurrentDate() => new(_clock.Today().DaysSinceZero);
}

#endregion
<#+
    } // T4: End of EmitClock()

    protected override void EmitDatePreamble()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_<#= DaysSinceEpochVar #>"/>.
    /// <para>This field is a constant equal to <#= MaxDaysSinceEpochValue #>.</para></summary>
    private const int <#= MaxDaysSinceEpoch #> = <#= MaxDaysSinceEpochValue #>;

    /// <summary>
    /// Represents the count of consecutive days since the Gregorian epoch.
    /// <para>This field is in the range from 0 to <see cref="<#= MaxDaysSinceEpoch #>"/>.
    /// </para>
    /// </summary>
    private readonly int _<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid date or <paramref name="year"/> is outside the range
    /// of supported years.</exception>
    public <#= Prefix #>Date(int year, int month, int day)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateYearMonthDay(year, month, day);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, month, day);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// to the specified ordinal date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid ordinal date or <paramref name="year"/> is outside
    /// the range of supported years.</exception>
    public <#= Prefix #>Date(int year, int dayOfYear)
    {
        var chr = <#= Prefix #>Calendar.Instance;
        chr.Scope.ValidateOrdinal(year, dayOfYear);

        _<#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Date"/> struct.
    /// <para>This constructor does NOT validate its parameter.</para>
    /// </summary>
    private <#= Prefix #>Date(int <#= DaysSinceEpochVar #>)
    {
        _<#= DaysSinceEpochVar #> = <#= DaysSinceEpochVar #>;
    }

    /// <summary>
    /// Gets the smallest possible value of a <see cref="<#= Prefix #>Date"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    //
    // MinValue = new(0) = new() = default(<#= Prefix #>Date)
    public static <#= Prefix #>Date MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of a <see cref="<#= Prefix #>Date"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Date MaxValue { get; } = new(<#= MaxDaysSinceEpoch #>);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static <#= Prefix #>Calendar Calendar => <#= Prefix #>Calendar.Instance;

    static Calendar IDate.Calendar => Calendar;

    /// <inheritdoc />
    public DayNumber DayNumber => new(_<#= DaysSinceEpochVar #>);

    /// <summary>
    /// Gets the count of consecutive days since the Gregorian epoch.
    /// </summary>
    public int DaysSinceZero => _<#= DaysSinceEpochVar #>;

    int IAbsoluteDate.DaysSinceEpoch => _<#= DaysSinceEpochVar #>;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year => Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out int m, out _);
            return m;
        }
    }

    /// <inheritdoc />
    public int DayOfYear
    {
        get
        {
            _ = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out int doy);
            return doy;
        }
    }

    /// <inheritdoc />
    public int Day
    {
        get
        {
            Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out _, out _, out int d);
            return d;
        }
    }

    /// <inheritdoc />
    public DayOfWeek DayOfWeek => DayNumber.DayOfWeek;

    /// <inheritdoc />
    public bool IsIntercalary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsIntercalaryDay(y, m, d);
        }
    }

<#+ if (EnableIsSupplementary) { #>
    /// <inheritdoc />
    public bool IsSupplementary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
            return sch.IsSupplementaryDay(y, m, d);
        }
    }
<#+ } else { #>
    bool IDateable.IsSupplementary => false;
<#+ } #>

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out int y, out int m, out int d);
        return FormattableString.Invariant($"{d:D2}/{m:D2}/{y:D4} ({<#= Prefix #>Calendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month, out int day) =>
        Calendar.Schema.GetDateParts(_<#= DaysSinceEpochVar #>, out year, out month, out day);

    /// <inheritdoc />
    public void Deconstruct(out int year, out int dayOfYear) =>
        year = Calendar.Schema.GetYear(_<#= DaysSinceEpochVar #>, out dayOfYear);
}
<#+
    } // T4: End of EmitDatePreamble()

    protected override void EmitDateFactories()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Factories
{
    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Create(int year, int month, int day) => new(year, month, day);

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date Create(int year, int dayOfYear) => new(year, dayOfYear);

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date? TryCreate(int year, int month, int day)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckYearMonthDay(year, month, day)) return null;

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, month, day);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date? TryCreate(int year, int dayOfYear)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckOrdinal(year, dayOfYear)) return null;

        int <#= DaysSinceEpochVar #> = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    // Explicit implementation: <#= Prefix #>Date being a value type, better
    // to use the others TryCreate().

    [Pure]
    static bool IDate<<#= Prefix #>Date>.TryCreate(int year, int month, int day, out <#= Prefix #>Date result)
    {
        var date = TryCreate(year, month, day);
        result = date ?? default;
        return date.HasValue;
    }

    [Pure]
    static bool IDate<<#= Prefix #>Date>.TryCreate(int year, int dayOfYear, out <#= Prefix #>Date result)
    {
        var date = TryCreate(year, dayOfYear);
        result = date ?? default;
        return date.HasValue;
    }

    // No method UnsafeCreate(int year, int month, int day) to avoid multiple
    // lookup to the property Calendar.

    /// <summary>
    /// Creates a new instance of the <see cref="<#= Prefix #>Date"/> struct
    /// from the specified count of consecutive days since the epoch.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static <#= Prefix #>Date UnsafeCreate(int <#= DaysSinceEpochVar #>) => new(<#= DaysSinceEpochVar #>);

    [Pure]
    static <#= Prefix #>Date IUnsafeFactory<<#= Prefix #>Date>.UnsafeCreate(int <#= DaysSinceEpochVar #>) =>
        new(<#= DaysSinceEpochVar #>);
}

public partial struct <#= Prefix #>Date // Conversions
{
    /// <summary>
    /// Defines an explicit conversion of a <see cref="<#= Prefix #>Date"/> value
    /// to a <see cref="GregorianDate"/> value.
    /// </summary>
    public static explicit operator GregorianDate(<#= Prefix #>Date date) =>
        GregorianDate.UnsafeCreate(date._<#= DaysSinceEpochVar #>);

    /// <summary>
    /// Defines an explicit conversion of a <see cref="<#= Prefix #>Date"/> value
    /// to a <see cref="JulianDate"/> value.
    /// </summary>
    public static explicit operator JulianDate(<#= Prefix #>Date date) =>
        JulianDate.FromAbsoluteDate(date.DayNumber);

    /// <inheritdoc />
    [Pure]
    public static <#= Prefix #>Date FromDayNumber(DayNumber dayNumber)
    {
        int <#= DaysSinceEpochVar #> = dayNumber.DaysSinceZero;

        if (unchecked((uint)<#= DaysSinceEpochVar #>) > <#= MaxDaysSinceEpoch #>)
            ThrowHelpers.ThrowDayNumberOutOfRange(dayNumber);

        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <summary>
    /// Converts the current instance to a <see cref="GregorianDate"/> value.
    /// </summary>
    [Pure]
    public GregorianDate ToGregorianDate() => GregorianDate.UnsafeCreate(_<#= DaysSinceEpochVar #>);

    /// <summary>
    /// Converts the current instance to a <see cref="JulianDate"/> value.
    /// </summary>
    [Pure]
    public JulianDate ToJulianDate() => JulianDate.FromAbsoluteDate(DayNumber);
}
<#+
    } // T4: End of EmitDateFactories()

    protected override void EmitDateCloseByDayOfWeek()
    {
        WriteLine();
#>
public partial struct <#= Prefix #>Date // Find close by day of the week
{
    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Previous(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ >= 0 ? δ - DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> < 0) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date PreviousOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ > 0 ? δ - DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> < 0) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Nearest(DayOfWeek dayOfWeek)
    {
        int <#= DaysSinceEpochVar #> = DayNumber.Nearest(dayOfWeek).DaysSinceZero;
        if (unchecked((uint)<#= DaysSinceEpochVar #>) > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date NextOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ < 0 ? δ + DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }

    /// <inheritdoc />
    [Pure]
    public <#= Prefix #>Date Next(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int <#= DaysSinceEpochVar #> = _<#= DaysSinceEpochVar #> + (δ <= 0 ? δ + DaysInWeek : δ);
        if (<#= DaysSinceEpochVar #> > <#= MaxDaysSinceEpoch #>) ThrowHelpers.ThrowDateOverflow();
        return new <#= Prefix #>Date(<#= DaysSinceEpochVar #>);
    }
}
<#+
    } // T4: End of EmitDateCloseByDayOfWeek()

} // T4: End of ZeroCalendarTemplate

#>
