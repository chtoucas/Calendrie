<#@ assembly name="$(CalendrieT4Assembly)" #>
<#@ include file="Calendar.EmitAdjuster.tt" #>
<#@ include file="Calendar.EmitClock.tt" #>
<#@ include file="Calendar.EmitDate.tt" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Calendrie.TextTemplating" #><#+

public partial class CalendarTemplate : CSharpTemplate
{
    public CalendarTemplate(TextTransformation parent, string schemaClass, string epoch) : base(parent)
    {
        if (String.IsNullOrWhiteSpace(schemaClass))
            throw new ArgumentException("The schema can not be null or blank.", nameof(schemaClass));

        if (String.IsNullOrWhiteSpace(epoch))
            throw new ArgumentException("The epoch can not be null or blank.", nameof(epoch));

        SchemaClass = schemaClass;
        Epoch = epoch;
        DisplayName = Name;
        Prefix = Name;
    }

    public string SchemaClass { get; }
    public string Epoch { get; }
    public string ScopeClass { get; set; } = "StandardScope";

    // NB: we don't check the setter because these are design time templates:
    // if "value" is null or invalid, then the T4 transformation will fail right
    // away.

    public string DisplayName { get; set; }
    public string Prefix { get; set; }

    public string DaysSinceEpochVar { get; set; } = "daysSinceEpoch";
    public string DaysSinceEpochSuffix { get; set; } = "DaysSinceEpoch";

    public bool EnablePragmas { get; set; }

    // Temporary property until we decide what to do with clocks.
    public bool EnableClock { get; set; }

    public bool EnableMicroOptimizations { get; set; } = true;

    protected sealed override void WriteContent()
    {
        // TODO(code): why is it necessary for Calendrier.Sketches but not within Calendrie?
        if (EnablePragmas) EmitPragmas();

        EmitNamespace();
        EmitUsings();

        EmitCalendar();
        EmitAdjuster();

        if (EnableClock) EmitClock();

        EmitDate();
    } // T4: End of WriteContent()

    protected virtual void EmitPragmas()
    {
        WriteLine();
#>
#nullable enable
<#+
    } // T4: End of EmitPragmas()

    protected virtual void EmitNamespace()
    {
        WriteLine();
#>
namespace <#= Namespace #>;
<#+
    } // T4: End of EmitNamespace()

    protected virtual void EmitUsings()
    {
        WriteLine();
#>
using Calendrie.Core.Intervals;
using Calendrie.Core.Schemas;
using Calendrie.Core.Validation;
using Calendrie.Hemerology;
<#+ if (EnableClock) { #>
using Calendrie.Horology;
<#+ } #>
<#+
    } // T4: End of EmitUsings()

    protected virtual void EmitCalendar()
    {
        // WARNING: the constructors of the schema and the scope MUST have a
        // fixed form as one can see below.

        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> calendar.
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class <#= Prefix #>Calendar : SpecialCalendar<<#= Prefix #>Date>
{
    // WARNING: the order in which the static fields are written is __important__.

    // This schema instance is the one used by:
    // - <#= Prefix #>Calendar.Instance via <#= Prefix #>Calendar.ScopeT
    // - All instances of the <#= Prefix #>Date type via its property Schema
    // - <#= Prefix #>Calendar, custom methods only (see the file _Calendar.cs)
    internal static readonly <#= SchemaClass #> SchemaT = new();

    // This scope instance is the one used by:
    // - <#= Prefix #>Calendar.Instance (ctor)
    // - All instances of the <#= Prefix #>Date type via its property Scope
    internal static readonly <#= ScopeClass #> ScopeT = CreateScope(SchemaT);

    // This class is not a singleton but we ensure that all date instances are
    // using the same calendar instance. While not mandatory at all, I like the
    // idea.
    internal static readonly <#= Prefix #>Calendar Instance = new(ScopeT);

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Calendar"/> class.
    /// <para>See also <seealso cref="<#= Prefix #>Date.Calendar"/>.</para>
    /// </summary>
    public <#= Prefix #>Calendar() : this(CreateScope(new <#= SchemaClass #>())) { }

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Calendar"/> class.
    /// </summary>
    private <#= Prefix #>Calendar(<#= ScopeClass #> scope) : base("<#= DisplayName #>", scope)
    {
        Adjuster = new <#= Prefix #>Adjuster(this);
    }

    /// <summary>
    /// Gets the date adjuster.
    /// </summary>
    public <#= Prefix #>Adjuster Adjuster { get; }

    /// <summary>
    /// Creates a new instance of the <#= ScopeClass #> class suitable for use
    /// with <see cref="<#= Prefix #>Calendar"/>.
    /// </summary>
    private static <#= ScopeClass #> CreateScope(<#= SchemaClass #> schema) => new(schema, <#= Epoch #>);

    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private protected sealed override <#= Prefix #>Date NewDate(int <#= DaysSinceEpochVar #>) => new(<#= DaysSinceEpochVar #>);
}
<#+
    } // T4: End of EmitCalendar()
} // T4: End of CalendarTemplate

#>
