<#@ assembly name="$(CalendrieT4Assembly)" #>
<#@ include file="Calendar.EmitClock.tt" #>
<#@ include file="Calendar.EmitDate.tt" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Calendrie.TextTemplating" #><#+

public partial class CalendarTemplate : CSharpTemplate
{
    public CalendarTemplate(TextTransformation parent, string schemaClass, string epoch) : base(parent)
    {
        if (String.IsNullOrWhiteSpace(schemaClass))
            throw new ArgumentException("The schema can not be null or blank.", nameof(schemaClass));

        if (String.IsNullOrWhiteSpace(epoch))
            throw new ArgumentException("The epoch can not be null or blank.", nameof(epoch));

        SchemaClass = schemaClass;
        Epoch = epoch;
        DisplayName = Name;
        Prefix = Name;
    }

    public string SchemaClass { get; }
    public string Epoch { get; }
    public string ScopeClass { get; set; } = "StandardScope";

    // NB: we don't check the setter because these are design time templates:
    // if "value" is null or invalid, then the T4 transformation will fail right
    // away.

    public string DisplayName { get; set; }
    public string Prefix { get; set; }

    public string DaysSinceEpochVar { get; set; } = "daysSinceEpoch";
    public string DaysSinceEpochSuffix { get; set; } = "DaysSinceEpoch";

    public bool EnableIsSupplimentary { get; set; } = true;

    public bool EnablePragmas { get; set; }
    public bool EnableMicroOptimizations { get; set; } = true;
    public bool ImportCalendrieSystemsNamespace { get; set; }

    // Temporary property until we decide what to do with clocks.
    public bool EnableClock { get; set; }

    protected sealed override void WriteContent()
    {
        // May be necessary, depends on the Code Analysis settings regarding
        // generated files.
        if (EnablePragmas) EmitPragmas();

        EmitNamespace();
        EmitUsings();

        EmitCalendar();

        if (EnableClock) EmitClock();

        EmitDate();
    } // T4: End of WriteContent()

    protected virtual void EmitPragmas()
    {
        WriteLine();
#>
#nullable enable
<#+
    } // T4: End of EmitPragmas()

    protected virtual void EmitNamespace()
    {
        WriteLine();
#>
namespace <#= Namespace #>;
<#+
    } // T4: End of EmitNamespace()

    protected virtual void EmitUsings()
    {
        WriteLine();
#>
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Numerics;
using System.Runtime.CompilerServices;

using Calendrie;
using Calendrie.Core.Schemas;
using Calendrie.Core.Utilities;
using Calendrie.Hemerology;
<#+ if (EnableClock) { #>
using Calendrie.Horology;
<#+ } #>
<#+ if (ImportCalendrieSystemsNamespace) { #>
using Calendrie.Systems;
<#+ } #>
<#+
    } // T4: End of EmitUsings()

    protected virtual void EmitCalendar()
    {
        // WARNING: the constructors of the schema and the scope MUST have a
        // fixed form as one can see below.

        WriteLine();
#>
/// <summary>
/// Represents the <#= DisplayName #> calendar.
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class <#= Prefix #>Calendar : CalendarSystem<<#= Prefix #>Date>
{
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= Prefix #>Calendar"/> class.
    /// </summary>
    public <#= Prefix #>Calendar() : this(new <#= SchemaClass #>()) { }

    private <#= Prefix #>Calendar(<#= SchemaClass #> schema)
        : this(schema, new <#= ScopeClass #>(schema, <#= Epoch #>)) { }

    private <#= Prefix #>Calendar(<#= SchemaClass #> schema, <#= ScopeClass #> scope)
        : base("<#= DisplayName #>", scope)
    {
        UnderlyingSchema = schema;
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="<#= Prefix #>Calendar"/> class.
    /// <para>See <see cref="<#= Prefix #>Date.Calendar"/>.</para>
    /// </summary>
    internal static <#= Prefix #>Calendar Instance { get; } = new();

    /// <summary>
    /// Gets the earliest supported year.
    /// </summary>
    public static int MinYear => <#= ScopeClass #>.MinYear;

    /// <summary>
    /// Gets the latest supported year.
    /// </summary>
    public static int MaxYear => <#= ScopeClass #>.MaxYear;

    /// <summary>
    /// Gets the schema.
    /// </summary>
    internal <#= SchemaClass #> UnderlyingSchema { get; }
}
<#+
    } // T4: End of EmitCalendar()
} // T4: End of CalendarTemplate

#>
