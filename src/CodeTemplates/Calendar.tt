<#@ assembly name="$(CalendrieT4Assembly)" #>
<#@ include file="Calendar.EmitCalendar.tt" #>
<#@ include file="Calendar.EmitClock.tt" #>
<#@ include file="Calendar.EmitDate.tt" #>
<#@ include file="Calendar.EmitMonth.tt" #>
<#@ include file="Calendar.EmitYear.tt" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Calendrie.TextTemplating" #><#+

public partial class CalendarTemplate : CSharpTemplate
{
    public CalendarTemplate(
        TextTransformation parent,
        string schemaClass,
        string epoch,
        string epochDaysSinceZeroValue,
        string maxDaysSinceEpochValue,
        bool regular = true) : base(parent)
    {
        if (String.IsNullOrWhiteSpace(schemaClass))
            throw new ArgumentException("The schema can not be null or blank.", nameof(schemaClass));

        if (String.IsNullOrWhiteSpace(epoch))
            throw new ArgumentException("The epoch can not be null or blank.", nameof(epoch));

        SchemaClass = schemaClass;
        Epoch = epoch;
        EpochDaysSinceZeroValue = epochDaysSinceZeroValue;
        DisplayName = Name;
        Prefix = Name;
        MaxDaysSinceEpochValue = maxDaysSinceEpochValue;

        IsRegular = regular;
    }

    public string SchemaClass { get; }
    public string Epoch { get; }
    public string EpochDaysSinceZeroValue { get; }
    public string ScopeClass { get; set; } = "StandardScope";

    public bool IsRegular { get; }
    public int MonthsInYear { get; set; }

    // NB: we don't check the setter because these are design time templates:
    // if "value" is null or invalid, then the T4 transformation will fail right
    // away.

    public string DisplayName { get; set; }
    public string Prefix { get; set; }

    // PC = Pascal case
    public string DaysSinceEpochPC { get; set; } = "DaysSinceEpoch";
    public string DaysSinceEpochVar { get; set; } = "daysSinceEpoch";
    public string MaxDaysSinceEpoch { get; set; } = "MaxDaysSinceEpoch";
    public string MaxDaysSinceEpochValue { get; }

    // Fake "integer" value therefore, if not set, the T4 output will be invalid.
    public string MaxMonthsSinceEpochValue { get; set; } = "XXX";

    public bool EnableIsIntercalaryDay { get; set; } = true;
    public bool EnableIsSupplementaryDay { get; set; } = true;
    // EnableIsIntercalaryMonth is handled automatically.
    public bool EnableIsLeapYear { get; set; } = true;

    // Depends on the EditorConfig. If CA is enabled on generated files, this
    // is not necessary.
    public bool EnableNullable { get; set; }
    public bool EnablePragmas { get; set; }
    public bool ImportCalendrieSystemsNamespace { get; set; }

    public bool EnableCalendar { get; set; } = true;
    public bool EnableDate { get; set; } = true;
    public bool EnableMonth { get; set; } = true;
    public bool EnableYear { get; set; } = true;
    public bool EnableClock { get; set; } = true;

    protected sealed override void WriteContent()
    {
        // May be necessary, depends on the Code Analysis settings regarding
        // generated files.
        if (EnableNullable) EmitNullable();
        if (EnablePragmas)  EmitPragmas();

        EmitNamespace();
        EmitUsings();

        if (EnableCalendar) EmitCalendar();
        if (EnableClock)    EmitClock();
        if (EnableDate)     EmitDate();
        if (EnableMonth)    EmitMonth();
        if (EnableYear)     EmitYear();
    } // T4: End of WriteContent()

    protected virtual void EmitNullable()
    {
        WriteLine();
#>
#nullable enable
<#+
    } // T4: End of EmitNullable()

    protected virtual void EmitPragmas()
    {
        WriteLine();
#>
#pragma warning disable IDE0002 // Simplify Member Access (Style) ✓
<#+
    } // T4: End of EmitPragmas()

    protected virtual void EmitNamespace()
    {
        WriteLine();
#>
namespace <#= Namespace #>;
<#+
    } // T4: End of EmitNamespace()

    protected virtual void EmitUsings()
    {
        WriteLine();

        // Assumption: we import globally the following namespaces
        // - System
        // - System.Collections.Generic
        // - System.Diagnostics
        // - System.Diagnostics.CodeAnalysis
        // - System.Diagnostics.Contracts
        // - System.Linq
        // - System.Runtime.CompilerServices
#>
using System.Numerics;

using Calendrie;
<#+ if (EnableMonth) { #>
using Calendrie.Core.Intervals;
<#+ } #>
using Calendrie.Core.Schemas;
using Calendrie.Core.Utilities;
using Calendrie.Hemerology;
<#+ if (EnableClock) { #>
using Calendrie.Horology;
<#+ } #>
<#+ if (ImportCalendrieSystemsNamespace) { #>
using Calendrie.Systems;
<#+ } #>

using static Calendrie.Core.CalendricalConstants;
<#+
    } // T4: End of EmitUsings()

} // T4: End of CalendarTemplate

#>
