<#@ template hostspecific="true" #>
<#@ output extension=".g.cs" #>
<#@ include file="$(CalendrieT4Directory)ZeroCalendar.tt" once="true" #>
<#= new GregorianTemplate(this).Execute() #><#+

public sealed class GregorianTemplate : ZeroCalendarTemplate
{
    public GregorianTemplate(TextTransformation parent)
        : base(parent, "GregorianSchema", maxDaysSinceEpochValue: "365_242_133")
    {
        ScopeClass = "GregorianScope";

        EnableCalendar = false;
        EnableDate = true;
        EnableMonth = false;
        EnableYear = false;
        EnableIsSupplementary = false;
        //MinMonthsSinceEpochValue = "-11_999_988";
        MaxMonthsSinceEpochValue = "11_999_987";
        MonthsInYear = 12;
    }

    protected sealed override void EmitUsings()
    {
        WriteLine();
#>
using Calendrie.Core.Utilities;
<#+ if (EnableClock) { #>
using Calendrie.Horology;
<#+ } #>
<#+
    } // T4: End of EmitUsings()

    // Date type
    protected sealed override void EmitDateDecl() { }
    protected sealed override void EmitDatePreamble() { }
    protected sealed override void EmitDateFactories() { }
    protected sealed override void EmitDateConversions() { }
    protected sealed override void EmitDateAdjustments() { }
    protected sealed override void EmitDateCloseByDayOfWeek() { }
    protected sealed override void EmitDateMath() { }
    protected sealed override void EmitDateMathNonStandardRegular() { }
    // NB : ce n'est pas nécessaire car le calendrier est régulier, mais bon...
    protected sealed override void EmitDateMathNonStandardNonRegular() { }

    // Month type
    protected sealed override void EmitMonthDecl() { }
    protected sealed override void EmitMonthPreambleRegular() { }
    protected sealed override void EmitMonthAdjustmentsRegular() { }
    protected sealed override void EmitMonthDaySegmentRegular() { }
    protected sealed override void EmitMonthMath() { }

    // Year type
    protected sealed override void EmitYearDecl() { }
    protected sealed override void EmitYearPreamble() { }
    protected sealed override void EmitYearFactories() { }
    protected sealed override void EmitYearDaySegment() { }
    protected sealed override void EmitYearMath() { }
}

#>
