<#@ template hostspecific="true" #>
<#@ output extension=".g.cs" #>
<#@ include file="$(CalendrieT4Directory)Calendar.tt" once="true" #>
<#= new JulianTemplate(this).Execute() #><#+

public sealed class JulianTemplate : CalendarTemplate
{
    public JulianTemplate(TextTransformation parent) : base(parent, "JulianSchema", "DayZero.OldStyle", "")
    {
        ScopeClass = "JulianScope";
    }

    protected override string EpochDaysSinceZero =>
        EnableMicroOptimizations ? "EpochDaysSinceZero" : "s_Epoch.DaysSinceZero";

    protected sealed override void EmitUsings()
    {
        WriteLine();
#>
using System.Numerics;

using Calendrie.Core.Utilities;
using Calendrie.Hemerology;
<#+ if (EnableClock) { #>
using Calendrie.Horology;
<#+ } #>

using static Calendrie.Core.CalendricalConstants;
<#+
    } // T4: End of EmitUsings()

    protected sealed override void EmitCalendar() { }

    protected sealed override void EmitDatePreamble() { }
    protected sealed override void EmitDateFactories() { }
    protected sealed override void EmitCloseByDayOfWeek() { }
    protected sealed override void EmitDateMath() { }
}

#>
