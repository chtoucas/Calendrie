// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Tran Ngoc Bich. All rights reserved.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behaviour and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable IDE0002 // Simplify Member Access (Style) ✓

namespace Calendrie.Systems;

using System.Numerics;

using Calendrie;
using Calendrie.Core.Intervals;
using Calendrie.Core.Schemas;
using Calendrie.Core.Utilities;
using Calendrie.Hemerology;

using static Calendrie.Core.CalendricalConstants;

#region ZoroastrianCalendar

/// <summary>
/// Represents the Zoroastrian calendar.
/// <para>This calendar is <i>retropolated</i>. It supports <i>all</i> dates
/// within the range [1..9999] of years.</para>
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class ZoroastrianCalendar : Calendar
{
    /// <summary>
    /// Represents the display name.
    /// <para>This field is a constant.</para>
    /// </summary>
    internal const string DisplayName = "Zoroastrian";

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianCalendar"/> class.
    /// </summary>
    public ZoroastrianCalendar() : this(new Egyptian12Schema()) { }

    private ZoroastrianCalendar(Egyptian12Schema schema)
        : base(DisplayName, new StandardScope(schema, DayZero.Zoroastrian))
    {
        Debug.Assert(Epoch.DaysSinceZero == 230_637);
#if DEBUG
        // The next four properties only exist in DEBUG mode.
        Debug.Assert(MinDaysSinceEpoch == 0);
        Debug.Assert(MaxDaysSinceEpoch == 3_649_634);
        Debug.Assert(MinMonthsSinceEpoch == 0);
        Debug.Assert(MaxMonthsSinceEpoch == 119_987);
#endif

        Schema = schema;
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="ZoroastrianCalendar"/> class.
    /// <para>See <see cref="ZoroastrianDate.Calendar"/>.</para>
    /// </summary>
    internal static ZoroastrianCalendar Instance { get; } = new();

    /// <summary>
    /// Gets the earliest supported year.
    /// </summary>
    public static int MinYear => StandardScope.MinYear;

    /// <summary>
    /// Gets the latest supported year.
    /// </summary>
    public static int MaxYear => StandardScope.MaxYear;

    /// <summary>
    /// Gets the earliest supported <see cref="DayNumber"/> value.
    /// </summary>
    public static DayNumber MinDayNumber { get; } = DayZero.Zoroastrian;

    /// <summary>
    /// Gets the latest supported <see cref="DayNumber"/> value.
    /// </summary>
    public static DayNumber MaxDayNumber { get; } = DayZero.Zoroastrian + 3_649_634;

    /// <summary>
    /// Gets the schema.
    /// </summary>
    internal Egyptian12Schema Schema { get; }
}

public partial class ZoroastrianCalendar // Math
{
    /// <summary>
    /// Adds the specified number of years to the year part of the specified date,
    /// yielding a new date.
    /// <para>This method may truncate the result to the end of the target month
    /// to ensure that it returns a valid date; see <see cref="AdditionRule.Truncate"/>.
    /// </para>
    /// </summary>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal ZoroastrianDate AddYears(int y, int m, int d, int years)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < StandardScope.MinYear || newY > StandardScope.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        // NB: AdditionRule.Truncate.
        int newD = Math.Min(d, sch.CountDaysInMonth(newY, m));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(newY, m, newD);
        return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of the specified
    /// date, yielding a new date.
    /// <para>This method may truncate the result to the end of the target month
    /// to ensure that it returns a valid date; see <see cref="AdditionRule.Truncate"/>.
    /// </para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal ZoroastrianDate AddMonths(int y, int m, int d, int months)
    {
        // Exact addition of months to a calendar month.
        int newM = 1 + MathZ.Modulo(
            checked(m - 1 + months), Egyptian12Schema.MonthsPerYear, out int years);

        return AddYears(y, newM, d, years);
    }
}

#endregion

#region ZoroastrianDate

/// <summary>
/// Represents the Zoroastrian date.
/// <para><i>All</i> dates within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="ZoroastrianDate"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct ZoroastrianDate :
    IDate<ZoroastrianDate>,
    IUnsafeFactory<ZoroastrianDate>,
    ISubtractionOperators<ZoroastrianDate, ZoroastrianDate, int>
{ }

public partial struct ZoroastrianDate // Preamble
{
    /// <summary>Represents the value of the property <see cref="DayNumber.DaysSinceZero"/>
    /// for the epoch <see cref="DayZero.Zoroastrian"/>.
    /// <para>This field is a constant equal to 230_637.</para></summary>
    internal const int EpochDaysSinceZero = 230_637;

    /// <summary>Represents the maximum value of <see cref="_daysSinceEpoch"/>.
    /// <para>This field is a constant equal to 3_649_634.</para></summary>
    internal const int MaxDaysSinceEpoch = 3_649_634;

    /// <summary>
    /// Represents the count of consecutive days since the epoch
    /// <see cref="DayZero.Zoroastrian"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxDaysSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly int _daysSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianDate"/> struct
    /// to the specified date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid date or <paramref name="year"/> is outside the range
    /// of supported years.</exception>
    public ZoroastrianDate(int year, int month, int day)
    {
        var chr = ZoroastrianCalendar.Instance;
        chr.Scope.ValidateYearMonthDay(year, month, day);

        _daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, month, day);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianDate"/> struct
    /// to the specified ordinal date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid ordinal date or <paramref name="year"/> is outside
    /// the range of supported years.</exception>
    public ZoroastrianDate(int year, int dayOfYear)
    {
        var chr = ZoroastrianCalendar.Instance;
        chr.Scope.ValidateOrdinal(year, dayOfYear);

        _daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianDate"/> struct.
    /// <para>This constructor does NOT validate its parameter.</para>
    /// </summary>
    private ZoroastrianDate(int daysSinceEpoch)
    {
        _daysSinceEpoch = daysSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="ZoroastrianDate"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported date.</returns>
    //
    // MinValue = new(0) = new() = default(ZoroastrianDate)
    public static ZoroastrianDate MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="ZoroastrianDate"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported date.</returns>
    public static ZoroastrianDate MaxValue { get; } = new(MaxDaysSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static ZoroastrianCalendar Calendar => ZoroastrianCalendar.Instance;

    static Calendar IDate.Calendar => Calendar;

    /// <inheritdoc />
    //
    // We already know that the resulting day number is valid, so instead of
    // > public DayNumber DayNumber => Epoch + _daysSinceEpoch;
    // we can use an unchecked addition
    public DayNumber DayNumber => new(EpochDaysSinceZero + _daysSinceEpoch);

    /// <inheritdoc />
    public int DaysSinceEpoch => _daysSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year => Calendar.Schema.GetYear(_daysSinceEpoch);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetDateParts(_daysSinceEpoch, out _, out int m, out _);
            return m;
        }
    }

    /// <inheritdoc />
    public int DayOfYear
    {
        get
        {
            _ = Calendar.Schema.GetYear(_daysSinceEpoch, out int doy);
            return doy;
        }
    }

    /// <inheritdoc />
    public int Day
    {
        get
        {
            Calendar.Schema.GetDateParts(_daysSinceEpoch, out _, out _, out int d);
            return d;
        }
    }

    /// <inheritdoc />
    public DayOfWeek DayOfWeek => DayNumber.DayOfWeek;

    bool IDateable.IsIntercalary => false;

    /// <inheritdoc />
    public bool IsSupplementary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
            return sch.IsSupplementaryDay(y, m, d);
        }
    }

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        Calendar.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return FormattableString.Invariant($"{d:D2}/{m:D2}/{y:D4} ({ZoroastrianCalendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month, out int day) =>
        Calendar.Schema.GetDateParts(_daysSinceEpoch, out year, out month, out day);

    /// <inheritdoc />
    public void Deconstruct(out int year, out int dayOfYear) =>
        year = Calendar.Schema.GetYear(_daysSinceEpoch, out dayOfYear);
}

public partial struct ZoroastrianDate // Factories
{
    /// <inheritdoc />
    [Pure]
    public static ZoroastrianDate Create(int year, int month, int day) => new(year, month, day);

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianDate Create(int year, int dayOfYear) => new(year, dayOfYear);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="ZoroastrianDate"/>
    /// struct from the specified date components.
    /// </summary>
    [Pure]
    public static ZoroastrianDate? TryCreate(int year, int month, int day)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckYearMonthDay(year, month, day)) return null;

        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, month, day);
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <summary>
    /// Attempts to create a new instance of the <see cref="ZoroastrianDate"/>
    /// struct from the specified ordinal components.
    /// </summary>
    [Pure]
    public static ZoroastrianDate? TryCreate(int year, int dayOfYear)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckOrdinal(year, dayOfYear)) return null;

        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
        return new ZoroastrianDate(daysSinceEpoch);
    }

    // Explicit implementation: ZoroastrianDate being a value type, better
    // to use the others TryCreate().

    [Pure]
    static bool IDate<ZoroastrianDate>.TryCreate(int year, int month, int day, out ZoroastrianDate result)
    {
        var dateValue = TryCreate(year, month, day);
        result = dateValue ?? default;
        return dateValue.HasValue;
    }

    [Pure]
    static bool IDate<ZoroastrianDate>.TryCreate(int year, int dayOfYear, out ZoroastrianDate result)
    {
        var dateValue = TryCreate(year, dayOfYear);
        result = dateValue ?? default;
        return dateValue.HasValue;
    }

    // No method UnsafeCreate(int year, int month, int day) to avoid multiple
    // lookup to the property Calendar.

    /// <summary>
    /// Creates a new instance of the <see cref="ZoroastrianDate"/> struct
    /// from the specified count of consecutive days since the epoch.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static ZoroastrianDate UnsafeCreate(int daysSinceEpoch) => new(daysSinceEpoch);

    [Pure]
    static ZoroastrianDate IUnsafeFactory<ZoroastrianDate>.UnsafeCreate(int daysSinceEpoch) =>
        UnsafeCreate(daysSinceEpoch);
}

public partial struct ZoroastrianDate // Conversions
{
    /// <summary>
    /// Defines an implicit conversion of a <see cref="ZoroastrianDate"/> value
    /// to a <see cref="Calendrie.DayNumber"/> value.
    /// <para>See also <seealso cref="DayNumber"/>.</para>
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See DayNumber")]
    public static implicit operator DayNumber(ZoroastrianDate date) => date.DayNumber;

    /// <summary>
    /// Defines an explicit conversion of a <see cref="ZoroastrianDate"/> value
    /// to a <see cref="GregorianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    public static explicit operator GregorianDate(ZoroastrianDate date) =>
        GregorianDate.UnsafeCreate(date.DayNumber.DaysSinceZero);

    /// <summary>
    /// Defines an explicit conversion of a <see cref="ZoroastrianDate"/> value
    /// to a <see cref="JulianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    public static explicit operator JulianDate(ZoroastrianDate date) =>
        JulianDate.UnsafeCreate(date.DayNumber);

    // Why FromAbsoluteDate() rather than FromDayNumber()? Usability.
    // Why not simply change the interface? It makes sense to apply this only
    // here because there is also an implicit conversion from all date types in
    // Calendrie.Systems to DayNumber.

    /// <summary>
    /// Creates a new instance of the <see cref="ZoroastrianDate"/> struct
    /// from the specified absolute value.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayNumber"/>
    /// is outside the range of supported values.</exception>
    [Pure]
    public static ZoroastrianDate FromAbsoluteDate(DayNumber dayNumber)
    {
        Calendar.Scope.Validate(dayNumber);
        // NB: now that we have validated the day number, we know for sure that
        // the subtraction won't overflow.
        return new ZoroastrianDate(dayNumber.DaysSinceZero - EpochDaysSinceZero);
    }

    [Pure]
    static ZoroastrianDate IAbsoluteDate<ZoroastrianDate>.FromDayNumber(DayNumber dayNumber) =>
        FromAbsoluteDate(dayNumber);

    /// <summary>
    /// Converts the current instance to a <see cref="GregorianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    [Pure]
    public GregorianDate ToGregorianDate() => GregorianDate.UnsafeCreate(DayNumber.DaysSinceZero);

    /// <summary>
    /// Converts the current instance to a <see cref="JulianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    [Pure]
    public JulianDate ToJulianDate() => JulianDate.UnsafeCreate(DayNumber);
}

public partial struct ZoroastrianDate // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear() => Calendar.Schema.CountDaysInYearBefore(_daysSinceEpoch);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear() => Calendar.Schema.CountDaysInYearAfter(_daysSinceEpoch);

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInMonth() => Calendar.Schema.CountDaysInMonthBefore(_daysSinceEpoch);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInMonth() => Calendar.Schema.CountDaysInMonthAfter(_daysSinceEpoch);
}

public partial struct ZoroastrianDate // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate WithYear(int newYear)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_daysSinceEpoch, out _, out int m, out int d);

        // We MUST re-validate the entire date.
        // We don't use the constructor just to avoid another calendar lookup.
        chr.Scope.ValidateYearMonthDay(newYear, m, d, nameof(newYear));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(newYear, m, d);
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate WithMonth(int newMonth)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_daysSinceEpoch, out int y, out _, out int d);

        // We only need to validate "newMonth" and "d".
        chr.Scope.PreValidator.ValidateMonthDay(y, newMonth, d, nameof(newMonth));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(y, newMonth, d);
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate WithDay(int newDay)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out _);

        // We only need to validate "newDay".
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, newDay, nameof(newDay));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(y, m, newDay);
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate WithDayOfYear(int newDayOfYear)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        int y = sch.GetYear(_daysSinceEpoch);

        // We only need to validate "newDayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(y, newDayOfYear, nameof(newDayOfYear));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(y, newDayOfYear);
        return new ZoroastrianDate(daysSinceEpoch);
    }
}

public partial struct ZoroastrianDate // Find a close by day of the week
{
    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate Previous(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int daysSinceEpoch = _daysSinceEpoch + (δ >= 0 ? δ - DaysPerWeek : δ);
        if (daysSinceEpoch < 0) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate PreviousOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int daysSinceEpoch = _daysSinceEpoch + (δ > 0 ? δ - DaysPerWeek : δ);
        if (daysSinceEpoch < 0) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate Nearest(DayOfWeek dayOfWeek)
    {
        var nearest = DayNumber.Nearest(dayOfWeek);
        int daysSinceEpoch = nearest.DaysSinceZero - EpochDaysSinceZero;
        if (unchecked((uint)daysSinceEpoch) > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate NextOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int daysSinceEpoch = _daysSinceEpoch + (δ < 0 ? δ + DaysPerWeek : δ);
        if (daysSinceEpoch > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianDate Next(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int daysSinceEpoch = _daysSinceEpoch + (δ <= 0 ? δ + DaysPerWeek : δ);
        if (daysSinceEpoch > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(daysSinceEpoch);
    }
}

public partial struct ZoroastrianDate // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(ZoroastrianDate left, ZoroastrianDate right) =>
        left._daysSinceEpoch == right._daysSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(ZoroastrianDate left, ZoroastrianDate right) =>
        left._daysSinceEpoch != right._daysSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(ZoroastrianDate other) => _daysSinceEpoch == other._daysSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is ZoroastrianDate date && Equals(date);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _daysSinceEpoch;
}

public partial struct ZoroastrianDate // IComparable
{
    /// <summary>
    /// Compares the two specified dates to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(ZoroastrianDate left, ZoroastrianDate right) =>
        left._daysSinceEpoch < right._daysSinceEpoch;

    /// <summary>
    /// Compares the two specified dates to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(ZoroastrianDate left, ZoroastrianDate right) =>
        left._daysSinceEpoch <= right._daysSinceEpoch;

    /// <summary>
    /// Compares the two specified dates to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(ZoroastrianDate left, ZoroastrianDate right) =>
        left._daysSinceEpoch > right._daysSinceEpoch;

    /// <summary>
    /// Compares the two specified dates to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(ZoroastrianDate left, ZoroastrianDate right) =>
        left._daysSinceEpoch >= right._daysSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianDate Min(ZoroastrianDate x, ZoroastrianDate y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianDate Max(ZoroastrianDate x, ZoroastrianDate y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(ZoroastrianDate other) => _daysSinceEpoch.CompareTo(other._daysSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is ZoroastrianDate date ? CompareTo(date)
        : ThrowHelpers.ThrowNonComparable(typeof(ZoroastrianDate), obj);
}

public partial struct ZoroastrianDate // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified dates and returns the number of days between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountDaysSince()")]
    public static int operator -(ZoroastrianDate left, ZoroastrianDate right) => left.CountDaysSince(right);

    /// <summary>
    /// Adds a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static ZoroastrianDate operator +(ZoroastrianDate value, int days) => value.PlusDays(days);

    /// <summary>
    /// Subtracts a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static ZoroastrianDate operator -(ZoroastrianDate value, int days) => value.PlusDays(-days);

    /// <summary>
    /// Adds one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextDay()")]
    public static ZoroastrianDate operator ++(ZoroastrianDate value) => value.NextDay();

    /// <summary>
    /// Subtracts one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousDay()")]
    public static ZoroastrianDate operator --(ZoroastrianDate value) => value.PreviousDay();

    /// <summary>
    /// Counts the number of whole days from <paramref name="other"/> to this
    /// date instance.
    /// </summary>
    [Pure]
    public int CountDaysSince(ZoroastrianDate other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to MaxDaysSinceEpoch.
        _daysSinceEpoch - other._daysSinceEpoch;

    /// <summary>
    /// Adds a number of days to the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [Pure]
    public ZoroastrianDate PlusDays(int days)
    {
        int daysSinceEpoch = checked(_daysSinceEpoch + days);
        if (unchecked((uint)daysSinceEpoch) > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(daysSinceEpoch);
    }

    /// <summary>
    /// Obtains the date after the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [Pure]
    public ZoroastrianDate NextDay()
    {
        if (_daysSinceEpoch == MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(_daysSinceEpoch + 1);
    }

    /// <summary>
    /// Obtains the date before the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [Pure]
    public ZoroastrianDate PreviousDay()
    {
        if (_daysSinceEpoch == 0) ThrowHelpers.ThrowDateOverflow();
        return new ZoroastrianDate(_daysSinceEpoch - 1);
    }

    //
    // Math operations based on the week unit
    //

    /// <summary>
    /// Counts the number of whole weeks from <paramref name="other"/> to this
    /// date instance.
    /// </summary>
    [Pure]
    public int CountWeeksSince(ZoroastrianDate other) => MathZ.Divide(CountDaysSince(other), DaysPerWeek);

    /// <summary>
    /// Adds a number of weeks to the current instance, yielding a new value.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [Pure]
    public ZoroastrianDate PlusWeeks(int weeks) => PlusDays(DaysPerWeek * weeks);

    /// <summary>
    /// Obtains the date after the current instance falling on the same day of
    /// the week, yielding a new date.
    /// </summary>
    [Pure]
    public ZoroastrianDate NextWeek() => PlusDays(DaysPerWeek);

    /// <summary>
    /// Obtains the date before the current instance falling on the same day of
    /// the week, yielding a new date.
    /// </summary>
    [Pure]
    public ZoroastrianDate PreviousWeek() => PlusDays(-DaysPerWeek);
}

public partial struct ZoroastrianDate // Non-standard math ops
{
    /// <summary>
    /// Adds the specified number of years to the year part of this date instance,
    /// yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public ZoroastrianDate PlusYears(int years)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years);
    }

    [Pure]
    ZoroastrianDate IDateBase<ZoroastrianDate>.PlusYears(int years, out int roundoff)
    {
        roundoff = 0;
        return PlusYears(years);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance, yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public ZoroastrianDate PlusMonths(int months)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return chr.AddMonths(y, m, d, months);
    }

    [Pure]
    ZoroastrianDate IDateBase<ZoroastrianDate>.PlusMonths(int months, out int roundoff)
    {
        roundoff = 0;
        return PlusMonths(months);
    }

    /// <summary>
    /// Counts the number of whole years from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusYears(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountYearsSince(ZoroastrianDate other)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(other._daysSinceEpoch, out int y0, out int m0, out int d0);

        // Exact difference between two calendar years.
        int years = Year - y0;

        // To avoid extracting y0 twice, we inline:
        // > var newStart = other.PlusYears(years);
        var newStart = chr.AddYears(y0, m0, d0, years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }

    /// <summary>
    /// Counts the number of whole months from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusMonths(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountMonthsSince(ZoroastrianDate other)
    {
        var chr = Calendar;
        var sch = chr.Schema;
        sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out _);
        sch.GetDateParts(other._daysSinceEpoch, out int y0, out int m0, out int d0);

        // Exact difference between two calendar months.
        int months = checked(Egyptian12Schema.MonthsPerYear * (y - y0) + m - m0);

        // To avoid extracting (y0, m0, d0) twice, we inline:
        // > var newStart = other.PlusMonths(months);
        var newStart = chr.AddMonths(y0, m0, d0, months);

        if (other < this)
        {
            if (newStart > this) months--;
        }
        else
        {
            if (newStart < this) months++;
        }

        return months;
    }
}

#endregion

#region ZoroastrianMonth

/// <summary>
/// Represents the Zoroastrian month.
/// <para><i>All</i> months within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="ZoroastrianMonth"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct ZoroastrianMonth :
    IMonth<ZoroastrianMonth>,
    IUnsafeFactory<ZoroastrianMonth>,
    // A month viewed as a finite sequence of days
    IDaySegment<ZoroastrianDate>,
    ISetMembership<ZoroastrianDate>,
    // Arithmetic
    ISubtractionOperators<ZoroastrianMonth, ZoroastrianMonth, int>
{ }

public partial struct ZoroastrianMonth // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_monthsSinceEpoch"/>.
    /// <para>This field is a constant equal to 119_987.</para></summary>
    internal const int MaxMonthsSinceEpoch = 119_987;

    /// <summary>
    /// Represents the count of consecutive months since the epoch
    /// <see cref="DayZero.Zoroastrian"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxMonthsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly int _monthsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianMonth"/> struct
    /// to the specified month components.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid month or <paramref name="year"/> is outside the
    /// range of supported years.</exception>
    public ZoroastrianMonth(int year, int month)
    {
        // The calendar being regular, no need to use the Scope:
        // > ZoroastrianCalendar.Instance.Scope.ValidateYearMonth(year, month);
        if (year < StandardScope.MinYear || year > StandardScope.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(year);
        if (month < 1 || month > Egyptian12Schema.MonthsPerYear)
            ThrowHelpers.ThrowMonthOutOfRange(month);

        _monthsSinceEpoch = CountMonthsSinceEpoch(year, month);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianMonth"/> struct
    /// from the specified <see cref="ZoroastrianDate"/> value.
    /// </summary>
    public ZoroastrianMonth(ZoroastrianDate date)
    {
        var (y, m, _) = date;
        _monthsSinceEpoch = CountMonthsSinceEpoch(y, m);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianMonth"/> struct.
    /// <para>This constructor does NOT validate its parameters.</para>
    /// </summary>
    private ZoroastrianMonth(int monthsSinceEpoch)
    {
        _monthsSinceEpoch = monthsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="ZoroastrianMonth"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported month.</returns>
    //
    // MinValue = new(0) = new() = default(ZoroastrianMonth)
    public static ZoroastrianMonth MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="ZoroastrianMonth"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported month.</returns>
    public static ZoroastrianMonth MaxValue { get; } = new(MaxMonthsSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static ZoroastrianCalendar Calendar => ZoroastrianCalendar.Instance;

    static Calendar IMonth.Calendar => Calendar;

    /// <inheritdoc />
    public int MonthsSinceEpoch => _monthsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year =>
        // NB: both dividend and divisor are >= 0.
        1 + _monthsSinceEpoch / Egyptian12Schema.MonthsPerYear;

    /// <inheritdoc />
    public int Month
    {
        get
        {
            var (_, m) = this;
            return m;
        }
    }

    /// <inheritdoc />
    bool IMonth.IsIntercalary => false;

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        var (y, m) = this;
        return FormattableString.Invariant($"{m:D2}/{y:D4} ({ZoroastrianCalendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month)
    {
        // See RegularSchema.GetMonthParts().
        // NB: both dividend and divisor are >= 0.
        year = 1 + MathN.Divide(_monthsSinceEpoch, Egyptian12Schema.MonthsPerYear, out int m0);
        month = 1 + m0;
    }
}

public partial struct ZoroastrianMonth // Factories
{
    /// <inheritdoc />
    [Pure]
    public static ZoroastrianMonth Create(int year, int month) => new(year, month);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="ZoroastrianMonth"/>
    /// struct from the specified month components.
    /// </summary>
    [Pure]
    public static ZoroastrianMonth? TryCreate(int year, int month)
    {
        // The calendar being regular, no need to use the PreValidator.
        if (year < StandardScope.MinYear || year > StandardScope.MaxYear
            || month < 1 || month > Egyptian12Schema.MonthsPerYear)
        {
            return null;
        }

        return UnsafeCreate(year, month);
    }

    // Explicit implementation: ZoroastrianMonth being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IMonth<ZoroastrianMonth>.TryCreate(int year, int month, out ZoroastrianMonth result)
    {
        var monthValue = TryCreate(year, month);
        result = monthValue ?? default;
        return monthValue.HasValue;
    }

    /// <summary>
    /// Creates a new instance of the <see cref="ZoroastrianMonth"/> struct
    /// from the specified month components.
    /// <para>This method does NOT validate its parameters.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static ZoroastrianMonth UnsafeCreate(int year, int month)
    {
        int monthsSinceEpoch = CountMonthsSinceEpoch(year, month);
        return new ZoroastrianMonth(monthsSinceEpoch);
    }

    /// <summary>
    /// Creates a new instance of the <see cref="ZoroastrianMonth"/> struct
    /// from the specified count of consecutive months since the epoch.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static ZoroastrianMonth UnsafeCreate(int monthsSinceEpoch) => new(monthsSinceEpoch);

    [Pure]
    static ZoroastrianMonth IUnsafeFactory<ZoroastrianMonth>.UnsafeCreate(int monthsSinceEpoch) =>
        UnsafeCreate(monthsSinceEpoch);

    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static int CountMonthsSinceEpoch(int y, int m) =>
        // See RegularSchema.CountMonthsSinceEpoch().
        Egyptian12Schema.MonthsPerYear * (y - 1) + m - 1;
}

public partial struct ZoroastrianMonth // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedMonthsInYear() => Month - 1;

    /// <inheritdoc />
    [Pure]
    public int CountRemainingMonthsInYear() => Egyptian12Schema.MonthsPerYear - Month;

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearBeforeMonth(y, m);
    }

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearAfterMonth(y, m);
    }
}

public partial struct ZoroastrianMonth // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public ZoroastrianMonth WithYear(int newYear)
    {
        int m = Month;

        // Even when "newYear" is valid, we should re-check "m", but the calendar
        // being regular this is not needed here.
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.ValidateYearMonth(newYear, m, nameof(newYear));
        if (newYear < StandardScope.MinYear || newYear > StandardScope.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(newYear, nameof(newYear));

        return UnsafeCreate(newYear, m);
    }

    /// <inheritdoc />
    [Pure]
    public ZoroastrianMonth WithMonth(int newMonth)
    {
        int y = Year;

        // We already know that "y" is valid, we only need to check "newMonth".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.PreValidator.ValidateMonth(y, newMonth, nameof(newMonth));
        if (newMonth < 1 || newMonth > Egyptian12Schema.MonthsPerYear)
            ThrowHelpers.ThrowMonthOutOfRange(newMonth, nameof(newMonth));

        return UnsafeCreate(y, newMonth);
    }
}

public partial struct ZoroastrianMonth // IDaySegment
{
    /// <summary>
    /// Gets the the start of the current month instance.
    /// </summary>
    public ZoroastrianDate MinDay
    {
        get
        {
            var (y, m) = this;
            int daysSinceEpoch = Calendar.Schema.CountDaysSinceEpoch(y, m, 1);
            return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <summary>
    /// Gets the the end of the current month instance.
    /// </summary>
    public ZoroastrianDate MaxDay
    {
        get
        {
            var (y, m) = this;
            var sch = Calendar.Schema;
            int d = sch.CountDaysInMonth(y, m);
            int daysSinceEpoch = sch.CountDaysSinceEpoch(y, m, d);
            return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <inheritdoc />
    [Pure]
    public int CountDays()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInMonth(y, m);
    }

    /// <summary>
    /// Converts the current instance to a range of days.
    /// </summary>
    [Pure]
    public Range<ZoroastrianDate> ToRange()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);
        return Range.StartingAt(ZoroastrianDate.UnsafeCreate(startOfMonth), daysInMonth);
    }

    [Pure]
    Range<ZoroastrianDate> IDaySegment<ZoroastrianDate>.ToDayRange() => ToRange();

    /// <summary>
    /// Returns an enumerable collection of all days in this month instance.
    /// </summary>
    [Pure]
    public IEnumerable<ZoroastrianDate> ToEnumerable()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);

        return from daysSinceEpoch
               in Enumerable.Range(startOfMonth, daysInMonth)
               select ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
    }

    [Pure]
    IEnumerable<ZoroastrianDate> IDaySegment<ZoroastrianDate>.EnumerateDays() => ToEnumerable();

    /// <summary>
    /// Returns <see langword="true"/> if the current month instance contains
    /// the specified date; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(ZoroastrianDate date)
    {
        var (y, m) = this;
        Calendar.Schema.GetDateParts(date.DaysSinceEpoch, out int y1, out int m1, out _);
        return y1 == y && m1 == m;
    }

    /// <summary>
    /// Obtains the date corresponding to the specified day of this month
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfMonth"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public ZoroastrianDate GetDayOfMonth(int dayOfMonth)
    {
        var (y, m) = this;
        var chr = Calendar;
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, dayOfMonth);
        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(y, m, dayOfMonth);
        return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
    }
}

public partial struct ZoroastrianMonth // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(ZoroastrianMonth left, ZoroastrianMonth right) =>
        left._monthsSinceEpoch == right._monthsSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(ZoroastrianMonth left, ZoroastrianMonth right) =>
        left._monthsSinceEpoch != right._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(ZoroastrianMonth other) => _monthsSinceEpoch == other._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is ZoroastrianMonth month && Equals(month);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _monthsSinceEpoch;
}

public partial struct ZoroastrianMonth // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(ZoroastrianMonth left, ZoroastrianMonth right) =>
        left._monthsSinceEpoch < right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(ZoroastrianMonth left, ZoroastrianMonth right) =>
        left._monthsSinceEpoch <= right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(ZoroastrianMonth left, ZoroastrianMonth right) =>
        left._monthsSinceEpoch > right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(ZoroastrianMonth left, ZoroastrianMonth right) =>
        left._monthsSinceEpoch >= right._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianMonth Min(ZoroastrianMonth x, ZoroastrianMonth y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianMonth Max(ZoroastrianMonth x, ZoroastrianMonth y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(ZoroastrianMonth other) => _monthsSinceEpoch.CompareTo(other._monthsSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is ZoroastrianMonth month ? CompareTo(month)
        : ThrowHelpers.ThrowNonComparable(typeof(ZoroastrianMonth), obj);
}

public partial struct ZoroastrianMonth // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified months and returns the number of months
    /// between them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountMonthsSince()")]
    public static int operator -(ZoroastrianMonth left, ZoroastrianMonth right) => left.CountMonthsSince(right);

    /// <summary>
    /// Adds a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static ZoroastrianMonth operator +(ZoroastrianMonth value, int months) => value.PlusMonths(months);

    /// <summary>
    /// Subtracts a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static ZoroastrianMonth operator -(ZoroastrianMonth value, int months) => value.PlusMonths(-months);

    /// <summary>
    /// Adds one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextMonth()")]
    public static ZoroastrianMonth operator ++(ZoroastrianMonth value) => value.NextMonth();

    /// <summary>
    /// Subtracts one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousMonth()")]
    public static ZoroastrianMonth operator --(ZoroastrianMonth value) => value.PreviousMonth();

    /// <summary>
    /// Counts the number of whole months elapsed since the specified month.
    /// </summary>
    [Pure]
    public int CountMonthsSince(ZoroastrianMonth other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to MaxMonthsSinceEpoch.
        _monthsSinceEpoch - other._monthsSinceEpoch;

    /// <summary>
    /// Adds a number of months to the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [Pure]
    public ZoroastrianMonth PlusMonths(int months)
    {
        int monthsSinceEpoch = checked(_monthsSinceEpoch + months);
        if (unchecked((uint)monthsSinceEpoch) > MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowMonthOverflow();
        return new ZoroastrianMonth(monthsSinceEpoch);
    }

    /// <summary>
    /// Obtains the month after the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [Pure]
    public ZoroastrianMonth NextMonth()
    {
        if (_monthsSinceEpoch == MaxMonthsSinceEpoch) ThrowHelpers.ThrowMonthOverflow();
        return new ZoroastrianMonth(_monthsSinceEpoch + 1);
    }

    /// <summary>
    /// Obtains the month before the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [Pure]
    public ZoroastrianMonth PreviousMonth()
    {
        if (_monthsSinceEpoch == 0) ThrowHelpers.ThrowMonthOverflow();
        return new ZoroastrianMonth(_monthsSinceEpoch - 1);
    }
}

public partial struct ZoroastrianMonth // Non-standard math ops
{
    /// <summary>
    /// Adds the specified number of years to the year part of this month
    /// instance, yielding a new date.
    /// <para>The underlying calendar being regular, this operation is <i>always</i>
    /// exact.</para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported months.</exception>
    [Pure]
    public ZoroastrianMonth PlusYears(int years)
    {
        var (y, m) = this;
        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < StandardScope.MinYear || newY > StandardScope.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        return UnsafeCreate(newY, m);
    }

    [Pure]
    ZoroastrianMonth IMonthBase<ZoroastrianMonth>.PlusYears(int years, out int roundoff)
    {
        roundoff = 0;
        return PlusYears(years);
    }

    /// <summary>
    /// Counts the number of whole years from <paramref name="other"/> to this
    /// month instance.
    /// </summary>
    [Pure]
    public int CountYearsSince(ZoroastrianMonth other)
    {
        // Exact difference between two calendar years.
        int years = Year - other.Year;

        var newStart = other.PlusYears(years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }
}

#endregion

#region ZoroastrianYear

/// <summary>
/// Represents the Zoroastrian year.
/// <para><i>All</i> years within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="ZoroastrianYear"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct ZoroastrianYear :
    IYear<ZoroastrianYear>,
    // A year viewed as a finite sequence of months
    IMonthSegment<ZoroastrianMonth>,
    ISetMembership<ZoroastrianMonth>,
    // A year viewed as a finite sequence of days
    IDaySegment<ZoroastrianDate>,
    ISetMembership<ZoroastrianDate>,
    // Arithmetic
    ISubtractionOperators<ZoroastrianYear, ZoroastrianYear, int>
{ }

public partial struct ZoroastrianYear // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_yearsSinceEpoch"/>.
    /// <para>This field is a constant equal to 9998.</para></summary>
    private const int MaxYearsSinceEpoch = StandardScope.MaxYear - 1;

    /// <summary>
    /// Represents the count of consecutive years since the epoch
    /// <see cref="DayZero.Zoroastrian"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxYearsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly ushort _yearsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianYear"/> struct
    /// to the specified year.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="year"/> is
    /// outside the range of years supported values.</exception>
    public ZoroastrianYear(int year)
    {
        if (year < StandardScope.MinYear || year > StandardScope.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(year);

        _yearsSinceEpoch = (ushort)(year - 1);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianYear"/> struct
    /// from the specified <see cref="ZoroastrianMonth"/> value.
    /// </summary>
    public ZoroastrianYear(ZoroastrianMonth month)
    {
        _yearsSinceEpoch = (ushort)(month.Year - 1);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianYear"/> struct
    /// from the specified <see cref="ZoroastrianDate"/> value.
    /// </summary>
    public ZoroastrianYear(ZoroastrianDate date)
    {
        _yearsSinceEpoch = (ushort)(date.Year - 1);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ZoroastrianYear"/> struct.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    private ZoroastrianYear(ushort yearsSinceEpoch)
    {
        _yearsSinceEpoch = yearsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="ZoroastrianYear"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported year.</returns>
    //
    // MinValue = new(1) = new() = default(ZoroastrianYear)
    public static ZoroastrianYear MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="ZoroastrianYear"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported year.</returns>
    public static ZoroastrianYear MaxValue { get; } = new((ushort)MaxYearsSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static ZoroastrianCalendar Calendar => ZoroastrianCalendar.Instance;

    static Calendar IYear.Calendar => Calendar;

    /// <inheritdoc />
    public int YearsSinceEpoch => _yearsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// </summary>
    //
    // Actually, this property returns the algebraic year, but since its value
    // is greater than 0, one can ignore this subtlety.
    public int Year => _yearsSinceEpoch + 1;

    bool IYear.IsLeap => false;

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString() =>
        FormattableString.Invariant($"{Year:D4} ({ZoroastrianCalendar.DisplayName})");
}

public partial struct ZoroastrianYear // Factories
{
    /// <inheritdoc />
    [Pure]
    public static ZoroastrianYear Create(int year) => new(year);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="ZoroastrianYear"/>
    /// struct from the specified year.
    /// </summary>
    [Pure]
    public static ZoroastrianYear? TryCreate(int year)
    {
        bool ok = year >= StandardScope.MinYear && year <= StandardScope.MaxYear;
        return ok ? UnsafeCreate(year) : null;
    }

    // Explicit implementation: ZoroastrianYear being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IYear<ZoroastrianYear>.TryCreate(int year, out ZoroastrianYear result)
    {
        var yearValue = TryCreate(year);
        result = yearValue ?? default;
        return yearValue.HasValue;
    }

    /// <summary>
    /// Creates a new instance of the <see cref="ZoroastrianYear"/> struct
    /// from the specified year.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static ZoroastrianYear UnsafeCreate(int year) => new((ushort)(year - 1));
}

public partial struct ZoroastrianYear // IMonthSegment
{
    /// <summary>
    /// Represents the total number of months in a year.
    /// <para>This field is constant equal to 12.</para>
    /// </summary>
    public const int MonthCount = Egyptian12Schema.MonthsPerYear;

    /// <inheritdoc />
    public ZoroastrianMonth MinMonth => ZoroastrianMonth.UnsafeCreate(Year, 1);

    /// <inheritdoc />
    public ZoroastrianMonth MaxMonth => ZoroastrianMonth.UnsafeCreate(Year, MonthCount);

    /// <inheritdoc />
    [Pure]
    int IMonthSegment<ZoroastrianMonth>.CountMonths() => MonthCount;

    /// <inheritdoc />
    [Pure]
    public Range<ZoroastrianMonth> ToMonthRange() => Range.StartingAt(MinMonth, MonthCount);

    /// <inheritdoc />
    [Pure]
    public IEnumerable<ZoroastrianMonth> EnumerateMonths()
    {
        int startOfYear = ZoroastrianMonth.UnsafeCreate(Year, 1).MonthsSinceEpoch;

        return from monthsSinceEpoch
               in Enumerable.Range(startOfYear, MonthCount)
               select ZoroastrianMonth.UnsafeCreate(monthsSinceEpoch);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the current year instance contains
    /// the specified month; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(ZoroastrianMonth month) => month.Year == Year;

    /// <summary>
    /// Obtains the month corresponding to the specified month of this year
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="month"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public ZoroastrianMonth GetMonthOfYear(int month)
    {
        // We already know that "y" is valid, we only need to check "month".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.PreValidator.ValidateMonth(Year, month);
        if (month < 1 || month > Egyptian12Schema.MonthsPerYear)
            ThrowHelpers.ThrowMonthOutOfRange(month);

        return ZoroastrianMonth.UnsafeCreate(Year, month);
    }
}

public partial struct ZoroastrianYear // IDaySegment
{
    /// <summary>
    /// Represents the total number of days in a year.
    /// <para>This field is constant equal to 0.</para>
    /// </summary>
    public const int DayCount = Egyptian12Schema.DaysPerYear;

    /// <summary>
    /// Gets the the start of the current year instance.
    /// </summary>
    public ZoroastrianDate MinDay
    {
        get
        {
            int daysSinceEpoch = Calendar.Schema.CountDaysSinceEpoch(Year, 1);
            return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <summary>
    /// Gets the the end of the current year instance.
    /// </summary>
    public ZoroastrianDate MaxDay
    {
        get
        {
            var sch = Calendar.Schema;
            int daysSinceEpoch = sch.CountDaysSinceEpoch(Year, DayCount);
            return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    [Pure]
    int IDaySegment<ZoroastrianDate>.CountDays() => DayCount;

    /// <inheritdoc />
    [Pure]
    public Range<ZoroastrianDate> ToDayRange()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountDaysSinceEpoch(Year, 1);
        return Range.StartingAt(ZoroastrianDate.UnsafeCreate(startOfYear), DayCount);
    }

    /// <inheritdoc />
    [Pure]
    public IEnumerable<ZoroastrianDate> EnumerateDays()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountDaysSinceEpoch(Year, 1);

        return from daysSinceEpoch
               in Enumerable.Range(startOfYear, DayCount)
               select ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the year month instance contains
    /// the specified date; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(ZoroastrianDate date) => date.Year == Year;

    /// <summary>
    /// Obtains the date corresponding to the specified day of this year instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfYear"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public ZoroastrianDate GetDayOfYear(int dayOfYear)
    {
        var chr = Calendar;
        // We already know that "y" is valid, we only need to check "dayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(Year, dayOfYear);
        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(Year, dayOfYear);
        return ZoroastrianDate.UnsafeCreate(daysSinceEpoch);
    }
}

public partial struct ZoroastrianYear // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(ZoroastrianYear left, ZoroastrianYear right) =>
        left._yearsSinceEpoch == right._yearsSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(ZoroastrianYear left, ZoroastrianYear right) =>
        left._yearsSinceEpoch != right._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(ZoroastrianYear other) => _yearsSinceEpoch == other._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is ZoroastrianYear year && Equals(year);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _yearsSinceEpoch;
}

public partial struct ZoroastrianYear // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(ZoroastrianYear left, ZoroastrianYear right) =>
        left._yearsSinceEpoch < right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(ZoroastrianYear left, ZoroastrianYear right) =>
        left._yearsSinceEpoch <= right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(ZoroastrianYear left, ZoroastrianYear right) =>
        left._yearsSinceEpoch > right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(ZoroastrianYear left, ZoroastrianYear right) =>
        left._yearsSinceEpoch >= right._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianYear Min(ZoroastrianYear x, ZoroastrianYear y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static ZoroastrianYear Max(ZoroastrianYear x, ZoroastrianYear y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(ZoroastrianYear other) =>
        _yearsSinceEpoch.CompareTo(other._yearsSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is ZoroastrianYear year ? CompareTo(year)
        : ThrowHelpers.ThrowNonComparable(typeof(ZoroastrianYear), obj);
}

public partial struct ZoroastrianYear // Math ops
{
    /// <summary>
    /// Subtracts the two specified years and returns the number of years between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountYearsSince()")]
    public static int operator -(ZoroastrianYear left, ZoroastrianYear right) => left.CountYearsSince(right);

    /// <summary>
    /// Adds a number of years to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported years.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusYears()")]
    public static ZoroastrianYear operator +(ZoroastrianYear value, int years) => value.PlusYears(years);

    /// <summary>
    /// Subtracts a number of years to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the range
    /// of supported years.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusYears()")]
    public static ZoroastrianYear operator -(ZoroastrianYear value, int years) => value.PlusYears(-years);

    /// <summary>
    /// Adds one year to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported year.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextYear()")]
    public static ZoroastrianYear operator ++(ZoroastrianYear value) => value.NextYear();

    /// <summary>
    /// Subtracts one year to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported year.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousYear()")]
    public static ZoroastrianYear operator --(ZoroastrianYear value) => value.PreviousYear();

    /// <summary>
    /// Counts the number of whole years elapsed since the specified year.
    /// </summary>
    [Pure]
    public int CountYearsSince(ZoroastrianYear other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to (MaxYear - 1).
        _yearsSinceEpoch - other._yearsSinceEpoch;

    /// <summary>
    /// Adds a number of years to the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported years.
    /// </exception>
    [Pure]
    public ZoroastrianYear PlusYears(int years)
    {
        int yearsSinceEpoch = checked(_yearsSinceEpoch + years);
        if (unchecked((uint)yearsSinceEpoch) > MaxYearsSinceEpoch) ThrowHelpers.ThrowYearOverflow();
        return new ZoroastrianYear((ushort)yearsSinceEpoch);
    }

    /// <summary>
    /// Obtains the year after the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported year.</exception>
    [Pure]
    public ZoroastrianYear NextYear()
    {
        if (_yearsSinceEpoch == MaxYearsSinceEpoch) ThrowHelpers.ThrowYearOverflow();
        return new ZoroastrianYear((ushort)(_yearsSinceEpoch + 1));
    }

    /// <summary>
    /// Obtains the year before the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported year.</exception>
    [Pure]
    public ZoroastrianYear PreviousYear()
    {
        if (_yearsSinceEpoch == 0) ThrowHelpers.ThrowYearOverflow();
        return new ZoroastrianYear((ushort)(_yearsSinceEpoch - 1));
    }
}

#endregion

