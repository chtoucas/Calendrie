// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) Tran Ngoc Bich. All rights reserved.

//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool. Changes to this file may cause incorrect
// behaviour and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calendrie.Systems;

using System.Numerics;

using Calendrie;
using Calendrie.Core.Intervals;
using Calendrie.Core.Schemas;
using Calendrie.Core.Utilities;
using Calendrie.Hemerology;

using static Calendrie.Core.CalendricalConstants;

#region TabularIslamicCalendar

/// <summary>
/// Represents the Tabular Islamic calendar.
/// <para>This calendar is <i>retropolated</i>. It supports <i>all</i> dates
/// within the range [1..9999] of years.</para>
/// <para>This class cannot be inherited.</para>
/// </summary>
public sealed partial class TabularIslamicCalendar : Calendar
{
    /// <summary>
    /// Represents the display name.
    /// <para>This field is a constant.</para>
    /// </summary>
    internal const string DisplayName = "Tabular Islamic";

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicCalendar"/> class.
    /// </summary>
    public TabularIslamicCalendar() : this(new TabularIslamicSchema()) { }

    private TabularIslamicCalendar(TabularIslamicSchema schema)
        : base(DisplayName, new StandardScope(schema, DayZero.TabularIslamic))
    {
        Schema = schema;
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="TabularIslamicCalendar"/> class.
    /// <para>See <see cref="TabularIslamicDate.Calendar"/>.</para>
    /// </summary>
    internal static TabularIslamicCalendar Instance { get; } = new();

    /// <summary>
    /// Gets the earliest supported year.
    /// </summary>
    public static int MinYear => StandardScope.MinYear;

    /// <summary>
    /// Gets the latest supported year.
    /// </summary>
    public static int MaxYear => StandardScope.MaxYear;

    /// <summary>
    /// Gets the schema.
    /// </summary>
    internal TabularIslamicSchema Schema { get; }
}

public partial class TabularIslamicCalendar // Math
{
    /// <summary>
    /// Adds the specified number of years to the year part of the specified date,
    /// yielding a new date.
    /// <para>This method may truncate the result to the end of the target month
    /// to ensure that it returns a valid date; see <see cref="AdditionRule.Truncate"/>.
    /// </para>
    /// </summary>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal TabularIslamicDate AddYears(int y, int m, int d, int years)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < StandardScope.MinYear || newY > StandardScope.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        // NB: AdditionRule.Truncate.
        int newD = Math.Min(d, sch.CountDaysInMonth(newY, m));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(newY, m, newD);
        return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
    }

    /// <summary>
    /// Adds the specified number of years to the year part of the specified date
    /// and also returns the roundoff in an output parameter, yielding a new date.
    /// <para><paramref name="roundoff"/> corresponds to the number of days that
    /// were cut off, which is greater than or equal to 0, the latter only
    /// happening when the operation is exact.</para>
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal TabularIslamicDate AddYears(int y, int m, int d, int years, out int roundoff)
    {
        var sch = Schema;

        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < StandardScope.MinYear || newY > StandardScope.MaxYear)
            ThrowHelpers.ThrowDateOverflow();

        int daysInMonth = sch.CountDaysInMonth(newY, m);
        roundoff = Math.Max(0, d - daysInMonth);
        // On retourne le dernier jour du mois si d > daysInMonth.
        int newD = roundoff == 0 ? d : daysInMonth;

        int daysSinceEpoch = sch.CountDaysSinceEpoch(newY, m, newD);
        return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of the specified
    /// date, yielding a new date.
    /// <para>This method may truncate the result to the end of the target month
    /// to ensure that it returns a valid date; see <see cref="AdditionRule.Truncate"/>.
    /// </para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal TabularIslamicDate AddMonths(int y, int m, int d, int months)
    {
        // Exact addition of months to a calendar month.
        int newM = 1 + MathZ.Modulo(
            checked(m - 1 + months), TabularIslamicSchema.MonthsPerYear, out int years);

        return AddYears(y, newM, d, years);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of the specified
    /// date and also returns the roundoff in an output parameter, yielding a
    /// new date.
    /// <para><paramref name="roundoff"/> corresponds to the number of days that
    /// were cut off, which is greater than or equal to 0, the latter only
    /// happening when the operation is exact.</para>
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    internal TabularIslamicDate AddMonths(int y, int m, int d, int months, out int roundoff)
    {
        // Exact addition of months to a calendar month.
        int newM = 1 + MathZ.Modulo(
            checked(m - 1 + months), TabularIslamicSchema.MonthsPerYear, out int years);

        return AddYears(y, newM, d, years, out roundoff);
    }
}

#endregion

#region TabularIslamicDate

/// <summary>
/// Represents the Tabular Islamic date.
/// <para><i>All</i> dates within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="TabularIslamicDate"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct TabularIslamicDate :
    IDate<TabularIslamicDate>,
    IUnsafeFactory<TabularIslamicDate>,
    ISubtractionOperators<TabularIslamicDate, TabularIslamicDate, int>
{ }

public partial struct TabularIslamicDate // Preamble
{
    /// <summary>Represents the value of the property <see cref="DayNumber.DaysSinceZero"/>
    /// for the epoch <see cref="DayZero.TabularIslamic"/>.
    /// <para>This field is a constant equal to 227_014.</para></summary>
    private const int EpochDaysSinceZero = 227_014;

    /// <summary>Represents the maximum value of <see cref="_daysSinceEpoch"/>.
    /// <para>This field is a constant equal to 3_543_311.</para></summary>
    private const int MaxDaysSinceEpoch = 3_543_311;

    /// <summary>
    /// Represents the count of consecutive days since the epoch
    /// <see cref="DayZero.TabularIslamic"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxDaysSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly int _daysSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicDate"/> struct
    /// to the specified date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid date or <paramref name="year"/> is outside the range
    /// of supported years.</exception>
    public TabularIslamicDate(int year, int month, int day)
    {
        var chr = TabularIslamicCalendar.Instance;
        chr.Scope.ValidateYearMonthDay(year, month, day);

        _daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, month, day);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicDate"/> struct
    /// to the specified ordinal date parts.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid ordinal date or <paramref name="year"/> is outside
    /// the range of supported years.</exception>
    public TabularIslamicDate(int year, int dayOfYear)
    {
        var chr = TabularIslamicCalendar.Instance;
        chr.Scope.ValidateOrdinal(year, dayOfYear);

        _daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicDate"/> struct.
    /// <para>This constructor does NOT validate its parameter.</para>
    /// </summary>
    private TabularIslamicDate(int daysSinceEpoch)
    {
        _daysSinceEpoch = daysSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="TabularIslamicDate"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported date.</returns>
    //
    // MinValue = new(0) = new() = default(TabularIslamicDate)
    public static TabularIslamicDate MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="TabularIslamicDate"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported date.</returns>
    public static TabularIslamicDate MaxValue { get; } = new(MaxDaysSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static TabularIslamicCalendar Calendar => TabularIslamicCalendar.Instance;

    static Calendar IDate.Calendar => Calendar;

    /// <inheritdoc />
    //
    // We already know that the resulting day number is valid, so instead of
    // > public DayNumber DayNumber => Epoch + _daysSinceEpoch;
    // we can use an unchecked addition
    public DayNumber DayNumber => new(EpochDaysSinceZero + _daysSinceEpoch);

    /// <inheritdoc />
    public int DaysSinceEpoch => _daysSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year => Calendar.Schema.GetYear(_daysSinceEpoch);

    /// <inheritdoc />
    public int Month
    {
        get
        {
            Calendar.Schema.GetDateParts(_daysSinceEpoch, out _, out int m, out _);
            return m;
        }
    }

    /// <inheritdoc />
    public int DayOfYear
    {
        get
        {
            _ = Calendar.Schema.GetYear(_daysSinceEpoch, out int doy);
            return doy;
        }
    }

    /// <inheritdoc />
    public int Day
    {
        get
        {
            Calendar.Schema.GetDateParts(_daysSinceEpoch, out _, out _, out int d);
            return d;
        }
    }

    /// <inheritdoc />
    public DayOfWeek DayOfWeek => DayNumber.DayOfWeek;

    /// <inheritdoc />
    public bool IsIntercalary
    {
        get
        {
            var sch = Calendar.Schema;
            sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
            return sch.IsIntercalaryDay(y, m, d);
        }
    }

    bool IDateable.IsSupplementary => false;

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        Calendar.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return FormattableString.Invariant($"{d:D2}/{m:D2}/{y:D4} ({TabularIslamicCalendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month, out int day) =>
        Calendar.Schema.GetDateParts(_daysSinceEpoch, out year, out month, out day);

    /// <inheritdoc />
    public void Deconstruct(out int year, out int dayOfYear) =>
        year = Calendar.Schema.GetYear(_daysSinceEpoch, out dayOfYear);
}

public partial struct TabularIslamicDate // Factories
{
    /// <inheritdoc />
    [Pure]
    public static TabularIslamicDate Create(int year, int month, int day) => new(year, month, day);

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicDate Create(int year, int dayOfYear) => new(year, dayOfYear);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="TabularIslamicDate"/>
    /// struct from the specified date components.
    /// </summary>
    [Pure]
    public static TabularIslamicDate? TryCreate(int year, int month, int day)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckYearMonthDay(year, month, day)) return null;

        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, month, day);
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <summary>
    /// Attempts to create a new instance of the <see cref="TabularIslamicDate"/>
    /// struct from the specified ordinal components.
    /// </summary>
    [Pure]
    public static TabularIslamicDate? TryCreate(int year, int dayOfYear)
    {
        var chr = Calendar;
        if (!chr.Scope.CheckOrdinal(year, dayOfYear)) return null;

        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(year, dayOfYear);
        return new TabularIslamicDate(daysSinceEpoch);
    }

    // Explicit implementation: TabularIslamicDate being a value type, better
    // to use the others TryCreate().

    [Pure]
    static bool IDate<TabularIslamicDate>.TryCreate(int year, int month, int day, out TabularIslamicDate result)
    {
        var dateValue = TryCreate(year, month, day);
        result = dateValue ?? default;
        return dateValue.HasValue;
    }

    [Pure]
    static bool IDate<TabularIslamicDate>.TryCreate(int year, int dayOfYear, out TabularIslamicDate result)
    {
        var dateValue = TryCreate(year, dayOfYear);
        result = dateValue ?? default;
        return dateValue.HasValue;
    }

    // No method UnsafeCreate(int year, int month, int day) to avoid multiple
    // lookup to the property Calendar.

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicDate"/> struct
    /// from the specified count of consecutive days since the epoch.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static TabularIslamicDate UnsafeCreate(int daysSinceEpoch) => new(daysSinceEpoch);

    [Pure]
    static TabularIslamicDate IUnsafeFactory<TabularIslamicDate>.UnsafeCreate(int daysSinceEpoch) =>
        UnsafeCreate(daysSinceEpoch);
}

public partial struct TabularIslamicDate // Conversions
{
    /// <summary>
    /// Defines an implicit conversion of a <see cref="TabularIslamicDate"/> value
    /// to a <see cref="Calendrie.DayNumber"/> value.
    /// <para>See also <seealso cref="DayNumber"/>.</para>
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See DayNumber")]
    public static implicit operator DayNumber(TabularIslamicDate date) => date.DayNumber;

    /// <summary>
    /// Defines an explicit conversion of a <see cref="TabularIslamicDate"/> value
    /// to a <see cref="GregorianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    public static explicit operator GregorianDate(TabularIslamicDate date) =>
        GregorianDate.UnsafeCreate(date.DayNumber.DaysSinceZero);

    /// <summary>
    /// Defines an explicit conversion of a <see cref="TabularIslamicDate"/> value
    /// to a <see cref="JulianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    public static explicit operator JulianDate(TabularIslamicDate date) =>
        JulianDate.UnsafeCreate(date.DayNumber);

    // Why FromAbsoluteDate() rather than FromDayNumber()? Usability.
    // Why not simply change the interface? It makes sense to apply this only
    // here because there is also an implicit conversion from all date types in
    // Calendrie.Systems to DayNumber.

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicDate"/> struct
    /// from the specified absolute value.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayNumber"/>
    /// is outside the range of supported values.</exception>
    [Pure]
    public static TabularIslamicDate FromAbsoluteDate(DayNumber dayNumber)
    {
        Calendar.Scope.Validate(dayNumber);
        // NB: now that we have validated the day number, we know for sure that
        // the subtraction won't overflow.
        return new TabularIslamicDate(dayNumber.DaysSinceZero - EpochDaysSinceZero);
    }

    [Pure]
    static TabularIslamicDate IAbsoluteDate<TabularIslamicDate>.FromDayNumber(DayNumber dayNumber) =>
        FromAbsoluteDate(dayNumber);

    /// <summary>
    /// Converts the current instance to a <see cref="GregorianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    [Pure]
    public GregorianDate ToGregorianDate() => GregorianDate.UnsafeCreate(DayNumber.DaysSinceZero);

    /// <summary>
    /// Converts the current instance to a <see cref="JulianDate"/> value.
    /// <para>The conversion always succeeds.</para>
    /// </summary>
    [Pure]
    public JulianDate ToJulianDate() => JulianDate.UnsafeCreate(DayNumber);
}

public partial struct TabularIslamicDate // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear() => Calendar.Schema.CountDaysInYearBefore(_daysSinceEpoch);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear() => Calendar.Schema.CountDaysInYearAfter(_daysSinceEpoch);

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInMonth() => Calendar.Schema.CountDaysInMonthBefore(_daysSinceEpoch);

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInMonth() => Calendar.Schema.CountDaysInMonthAfter(_daysSinceEpoch);
}

public partial struct TabularIslamicDate // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate WithYear(int newYear)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_daysSinceEpoch, out _, out int m, out int d);

        // We MUST re-validate the entire date.
        // We don't use the constructor just to avoid another calendar lookup.
        chr.Scope.ValidateYearMonthDay(newYear, m, d, nameof(newYear));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(newYear, m, d);
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate WithMonth(int newMonth)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_daysSinceEpoch, out int y, out _, out int d);

        // We only need to validate "newMonth" and "d".
        chr.Scope.PreValidator.ValidateMonthDay(y, newMonth, d, nameof(newMonth));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(y, newMonth, d);
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate WithDay(int newDay)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out _);

        // We only need to validate "newDay".
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, newDay, nameof(newDay));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(y, m, newDay);
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate WithDayOfYear(int newDayOfYear)
    {
        var chr = Calendar;
        var sch = Calendar.Schema;

        int y = sch.GetYear(_daysSinceEpoch);

        // We only need to validate "newDayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(y, newDayOfYear, nameof(newDayOfYear));

        int daysSinceEpoch = sch.CountDaysSinceEpoch(y, newDayOfYear);
        return new TabularIslamicDate(daysSinceEpoch);
    }
}

public partial struct TabularIslamicDate // Find a close by day of the week
{
    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate Previous(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int daysSinceEpoch = _daysSinceEpoch + (δ >= 0 ? δ - DaysInWeek : δ);
        if (daysSinceEpoch < 0) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate PreviousOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int daysSinceEpoch = _daysSinceEpoch + (δ > 0 ? δ - DaysInWeek : δ);
        if (daysSinceEpoch < 0) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate Nearest(DayOfWeek dayOfWeek)
    {
        var nearest = DayNumber.Nearest(dayOfWeek);
        int daysSinceEpoch = nearest.DaysSinceZero - EpochDaysSinceZero;
        if (unchecked((uint)daysSinceEpoch) > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate NextOrSame(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        if (δ == 0) return this;
        int daysSinceEpoch = _daysSinceEpoch + (δ < 0 ? δ + DaysInWeek : δ);
        if (daysSinceEpoch > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicDate Next(DayOfWeek dayOfWeek)
    {
        Requires.Defined(dayOfWeek);

        int δ = dayOfWeek - DayOfWeek;
        int daysSinceEpoch = _daysSinceEpoch + (δ <= 0 ? δ + DaysInWeek : δ);
        if (daysSinceEpoch > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(daysSinceEpoch);
    }
}

public partial struct TabularIslamicDate // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(TabularIslamicDate left, TabularIslamicDate right) =>
        left._daysSinceEpoch == right._daysSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(TabularIslamicDate left, TabularIslamicDate right) =>
        left._daysSinceEpoch != right._daysSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(TabularIslamicDate other) => _daysSinceEpoch == other._daysSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is TabularIslamicDate date && Equals(date);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _daysSinceEpoch;
}

public partial struct TabularIslamicDate // IComparable
{
    /// <summary>
    /// Compares the two specified dates to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(TabularIslamicDate left, TabularIslamicDate right) =>
        left._daysSinceEpoch < right._daysSinceEpoch;

    /// <summary>
    /// Compares the two specified dates to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(TabularIslamicDate left, TabularIslamicDate right) =>
        left._daysSinceEpoch <= right._daysSinceEpoch;

    /// <summary>
    /// Compares the two specified dates to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(TabularIslamicDate left, TabularIslamicDate right) =>
        left._daysSinceEpoch > right._daysSinceEpoch;

    /// <summary>
    /// Compares the two specified dates to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(TabularIslamicDate left, TabularIslamicDate right) =>
        left._daysSinceEpoch >= right._daysSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicDate Min(TabularIslamicDate x, TabularIslamicDate y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicDate Max(TabularIslamicDate x, TabularIslamicDate y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(TabularIslamicDate other) => _daysSinceEpoch.CompareTo(other._daysSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is TabularIslamicDate date ? CompareTo(date)
        : ThrowHelpers.ThrowNonComparable(typeof(TabularIslamicDate), obj);
}

public partial struct TabularIslamicDate // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified dates and returns the number of days between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountDaysSince()")]
    public static int operator -(TabularIslamicDate left, TabularIslamicDate right) => left.CountDaysSince(right);

    /// <summary>
    /// Adds a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static TabularIslamicDate operator +(TabularIslamicDate value, int days) => value.PlusDays(days);

    /// <summary>
    /// Subtracts a number of days to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusDays()")]
    public static TabularIslamicDate operator -(TabularIslamicDate value, int days) => value.PlusDays(-days);

    /// <summary>
    /// Adds one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextDay()")]
    public static TabularIslamicDate operator ++(TabularIslamicDate value) => value.NextDay();

    /// <summary>
    /// Subtracts one day to the specified date, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousDay()")]
    public static TabularIslamicDate operator --(TabularIslamicDate value) => value.PreviousDay();

    /// <summary>
    /// Counts the number of whole days from <paramref name="other"/> to this
    /// date instance.
    /// </summary>
    [Pure]
    public int CountDaysSince(TabularIslamicDate other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to MaxDaysSinceEpoch.
        _daysSinceEpoch - other._daysSinceEpoch;

    /// <summary>
    /// Adds a number of days to the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [Pure]
    public TabularIslamicDate PlusDays(int days)
    {
        int daysSinceEpoch = checked(_daysSinceEpoch + days);
        if (unchecked((uint)daysSinceEpoch) > MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(daysSinceEpoch);
    }

    /// <summary>
    /// Obtains the date after the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported date.</exception>
    [Pure]
    public TabularIslamicDate NextDay()
    {
        if (_daysSinceEpoch == MaxDaysSinceEpoch) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(_daysSinceEpoch + 1);
    }

    /// <summary>
    /// Obtains the date before the current instance, yielding a new date.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported date.</exception>
    [Pure]
    public TabularIslamicDate PreviousDay()
    {
        if (_daysSinceEpoch == 0) ThrowHelpers.ThrowDateOverflow();
        return new TabularIslamicDate(_daysSinceEpoch - 1);
    }

    //
    // Math operations based on the week unit
    //

    /// <summary>
    /// Counts the number of whole weeks from <paramref name="other"/> to this
    /// date instance.
    /// </summary>
    [Pure]
    public int CountWeeksSince(TabularIslamicDate other) => MathZ.Divide(CountDaysSince(other), DaysInWeek);

    /// <summary>
    /// Adds a number of weeks to the current instance, yielding a new value.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported dates.
    /// </exception>
    [Pure]
    public TabularIslamicDate PlusWeeks(int weeks) => PlusDays(DaysInWeek * weeks);

    /// <summary>
    /// Obtains the date after the current instance falling on the same day of
    /// the week, yielding a new date.
    /// </summary>
    [Pure]
    public TabularIslamicDate NextWeek() => PlusDays(DaysInWeek);

    /// <summary>
    /// Obtains the date before the current instance falling on the same day of
    /// the week, yielding a new date.
    /// </summary>
    [Pure]
    public TabularIslamicDate PreviousWeek() => PlusDays(-DaysInWeek);
}

public partial struct TabularIslamicDate // Non-standard math ops
{
    /// <summary>
    /// Adds the specified number of years to the year part of this date instance,
    /// yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public TabularIslamicDate PlusYears(int years)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years);
    }

    /// <summary>
    /// Adds the specified number of years to the year part of this date instance
    /// and also returns the roundoff in an output parameter, yielding a new date.
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public TabularIslamicDate PlusYears(int years, out int roundoff)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return chr.AddYears(y, m, d, years, out roundoff);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance, yielding a new date.
    /// <para>This method may truncate the result to ensure that it returns a
    /// valid date; see <see cref="AdditionRule.Truncate"/>.</para>
    /// </summary>
    /// <returns>The end of the target month when truncation happens.</returns>
    /// <exception cref="OverflowException">The calculation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public TabularIslamicDate PlusMonths(int months)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return chr.AddMonths(y, m, d, months);
    }

    /// <summary>
    /// Adds the specified number of months to the month part of this date
    /// instance and also returns the roundoff in an output parameter, yielding
    /// a new date.
    /// </summary>
    /// <returns>The end of the target month when roundoff &gt; 0.</returns>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported dates.</exception>
    [Pure]
    public TabularIslamicDate PlusMonths(int months, out int roundoff)
    {
        var sch = Calendar.Schema;
        sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out int d);
        return Calendar.AddMonths(y, m, d, months, out roundoff);
    }

    /// <summary>
    /// Counts the number of whole years from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusYears(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountYearsSince(TabularIslamicDate other)
    {
        var chr = Calendar;
        chr.Schema.GetDateParts(other._daysSinceEpoch, out int y0, out int m0, out int d0);

        // Exact difference between two calendar years.
        int years = Year - y0;

        // To avoid extracting y0 twice, we inline:
        // > var newStart = other.PlusYears(years);
        var newStart = chr.AddYears(y0, m0, d0, years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }

    /// <summary>
    /// Counts the number of whole months from <paramref name="other"/> to this
    /// date instance.
    /// <para>Beware, the result may not be exact. Behind the scene, it uses
    /// <see cref="PlusMonths(int)"/> which may apply a kind of truncation.</para>
    /// </summary>
    [Pure]
    public int CountMonthsSince(TabularIslamicDate other)
    {
        var chr = Calendar;
        var sch = chr.Schema;
        sch.GetDateParts(_daysSinceEpoch, out int y, out int m, out _);
        sch.GetDateParts(other._daysSinceEpoch, out int y0, out int m0, out int d0);

        // Exact difference between two calendar months.
        int months = checked(TabularIslamicSchema.MonthsPerYear * (y - y0) + m - m0);

        // To avoid extracting (y0, m0, d0) twice, we inline:
        // > var newStart = other.PlusMonths(months);
        var newStart = chr.AddMonths(y0, m0, d0, months);

        if (other < this)
        {
            if (newStart > this) months--;
        }
        else
        {
            if (newStart < this) months++;
        }

        return months;
    }
}

#endregion

#region TabularIslamicDateMath

/// <summary>
/// Provides non-standard mathematical operations for the
/// <see cref="TabularIslamicDate"/> type.
/// <para>This class allows to customize the <see cref="AdditionRule"/> strategy.
/// </para>
/// </summary>
public sealed class TabularIslamicDateMath : DateMath<TabularIslamicDate>
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicDateMath"/> class.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="rule"/>
    /// is not a known member of the <see cref="AdditionRule"/> enum.</exception>
    public TabularIslamicDateMath(AdditionRule rule) : base(rule) { }

    /// <summary>
    /// Gets an instance of the <see cref="TabularIslamicDateMath"/> class
    /// using the default strategy.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static TabularIslamicDateMath Default { get; } = new(AdditionRule.Truncate);
}

#endregion

#region TabularIslamicMonth

/// <summary>
/// Represents the Tabular Islamic month.
/// <para><i>All</i> months within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="TabularIslamicMonth"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct TabularIslamicMonth :
    IMonth<TabularIslamicMonth>,
    IUnsafeFactory<TabularIslamicMonth>,
    // A month viewed as a finite sequence of days
    IDaySegment<TabularIslamicDate>,
    ISetMembership<TabularIslamicDate>,
    // Arithmetic
    ISubtractionOperators<TabularIslamicMonth, TabularIslamicMonth, int>
{ }

public partial struct TabularIslamicMonth // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_monthsSinceEpoch"/>.
    /// <para>This field is a constant equal to 119_987.</para></summary>
    private const int MaxMonthsSinceEpoch = 119_987;

    /// <summary>
    /// Represents the count of consecutive months since the epoch
    /// <see cref="DayZero.TabularIslamic"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxMonthsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly int _monthsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicMonth"/> struct
    /// to the specified month components.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException">The specified components
    /// do not form a valid month or <paramref name="year"/> is outside the
    /// range of supported years.</exception>
    public TabularIslamicMonth(int year, int month)
    {
        // The calendar being regular, no need to use the Scope:
        // > TabularIslamicCalendar.Instance.Scope.ValidateYearMonth(year, month);
        if (year < StandardScope.MinYear || year > StandardScope.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(year);
        if (month < 1 || month > TabularIslamicSchema.MonthsPerYear)
            ThrowHelpers.ThrowMonthOutOfRange(month);

        _monthsSinceEpoch = CountMonthsSinceEpoch(year, month);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicMonth"/> struct.
    /// <para>This constructor does NOT validate its parameters.</para>
    /// </summary>
    private TabularIslamicMonth(int monthsSinceEpoch)
    {
        _monthsSinceEpoch = monthsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="TabularIslamicMonth"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported month.</returns>
    //
    // MinValue = new(0) = new() = default(TabularIslamicMonth)
    public static TabularIslamicMonth MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="TabularIslamicMonth"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported month.</returns>
    public static TabularIslamicMonth MaxValue { get; } = new(MaxMonthsSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static TabularIslamicCalendar Calendar => TabularIslamicCalendar.Instance;

    static Calendar IMonth.Calendar => Calendar;

    /// <inheritdoc />
    public int MonthsSinceEpoch => _monthsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// <para>Actually, this property returns the algebraic year, but since its
    /// value is greater than 0, one can ignore this subtlety.</para>
    /// </summary>
    public int Year =>
        // NB: both dividend and divisor are >= 0.
        1 + _monthsSinceEpoch / TabularIslamicSchema.MonthsPerYear;

    /// <inheritdoc />
    public int Month
    {
        get
        {
            var (_, m) = this;
            return m;
        }
    }

    /// <inheritdoc />
    bool IMonth.IsIntercalary => false;

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString()
    {
        var (y, m) = this;
        return FormattableString.Invariant($"{m:D2}/{y:D4} ({TabularIslamicCalendar.DisplayName})");
    }

    /// <inheritdoc />
    public void Deconstruct(out int year, out int month)
    {
        // See RegularSchema.GetMonthParts().
        // NB: both dividend and divisor are >= 0.
        year = 1 + MathN.Divide(_monthsSinceEpoch, TabularIslamicSchema.MonthsPerYear, out int m0);
        month = 1 + m0;
    }
}

public partial struct TabularIslamicMonth // Factories
{
    /// <inheritdoc />
    [Pure]
    public static TabularIslamicMonth Create(int year, int month) => new(year, month);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="TabularIslamicMonth"/>
    /// struct from the specified month components.
    /// </summary>
    [Pure]
    public static TabularIslamicMonth? TryCreate(int year, int month)
    {
        // The calendar being regular, no need to use the PreValidator.
        if (year < StandardScope.MinYear || year > StandardScope.MaxYear
            || month < 1 || month > TabularIslamicSchema.MonthsPerYear)
        {
            return null;
        }

        return UnsafeCreate(year, month);
    }

    // Explicit implementation: TabularIslamicMonth being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IMonth<TabularIslamicMonth>.TryCreate(int year, int month, out TabularIslamicMonth result)
    {
        var monthValue = TryCreate(year, month);
        result = monthValue ?? default;
        return monthValue.HasValue;
    }

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicMonth"/> struct
    /// from the specified month components.
    /// <para>This method does NOT validate its parameters.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static TabularIslamicMonth UnsafeCreate(int year, int month)
    {
        int monthsSinceEpoch = CountMonthsSinceEpoch(year, month);
        return new TabularIslamicMonth(monthsSinceEpoch);
    }

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicMonth"/> struct
    /// from the specified count of consecutive months since the epoch.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal static TabularIslamicMonth UnsafeCreate(int monthsSinceEpoch) => new(monthsSinceEpoch);

    [Pure]
    static TabularIslamicMonth IUnsafeFactory<TabularIslamicMonth>.UnsafeCreate(int monthsSinceEpoch) =>
        UnsafeCreate(monthsSinceEpoch);

    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static int CountMonthsSinceEpoch(int y, int m) =>
        // See RegularSchema.CountMonthsSinceEpoch().
        TabularIslamicSchema.MonthsPerYear * (y - 1) + m - 1;
}

public partial struct TabularIslamicMonth // Conversions
{
    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicMonth"/> struct
    /// from the specified number of consecutive months since the epoch.
    /// </summary>
    [Pure]
    public static TabularIslamicMonth FromMonthsSinceEpoch(int monthsSinceEpoch)
    {
        if (unchecked((uint)monthsSinceEpoch) > MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowMonthsSinceEpochOutOfRange(monthsSinceEpoch);
        return new TabularIslamicMonth(monthsSinceEpoch);
    }

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicMonth"/> struct
    /// from the specified <see cref="TabularIslamicDate"/> value.
    /// </summary>
    [Pure]
    public static TabularIslamicMonth FromDate(TabularIslamicDate date)
    {
        var (y, m, _) = date;
        return UnsafeCreate(y, m);
    }
}

public partial struct TabularIslamicMonth // Counting
{
    /// <inheritdoc />
    [Pure]
    public int CountElapsedMonthsInYear() => Month - 1;

    /// <inheritdoc />
    [Pure]
    public int CountRemainingMonthsInYear() => TabularIslamicSchema.MonthsPerYear - Month;

    /// <inheritdoc />
    [Pure]
    public int CountElapsedDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearBeforeMonth(y, m);
    }

    /// <inheritdoc />
    [Pure]
    public int CountRemainingDaysInYear()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInYearAfterMonth(y, m);
    }
}

public partial struct TabularIslamicMonth // Adjustments
{
    /// <inheritdoc />
    [Pure]
    public TabularIslamicMonth WithYear(int newYear)
    {
        int m = Month;

        // Even when "newYear" is valid, we should re-check "m", but the calendar
        // being regular this is not needed here.
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.ValidateYearMonth(newYear, m, nameof(newYear));
        if (newYear < StandardScope.MinYear || newYear > StandardScope.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(newYear, nameof(newYear));

        return UnsafeCreate(newYear, m);
    }

    /// <inheritdoc />
    [Pure]
    public TabularIslamicMonth WithMonth(int newMonth)
    {
        int y = Year;

        // We already know that "y" is valid, we only need to check "newMonth".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.PreValidator.ValidateMonth(y, newMonth, nameof(newMonth));
        if (newMonth < 1 || newMonth > TabularIslamicSchema.MonthsPerYear)
            ThrowHelpers.ThrowMonthOutOfRange(newMonth, nameof(newMonth));

        return UnsafeCreate(y, newMonth);
    }
}

public partial struct TabularIslamicMonth // IDaySegment
{
    /// <summary>
    /// Gets the the start of the current month instance.
    /// </summary>
    public TabularIslamicDate MinDay
    {
        get
        {
            var (y, m) = this;
            int daysSinceEpoch = Calendar.Schema.CountDaysSinceEpoch(y, m, 1);
            return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <summary>
    /// Gets the the end of the current month instance.
    /// </summary>
    public TabularIslamicDate MaxDay
    {
        get
        {
            var (y, m) = this;
            var sch = Calendar.Schema;
            int d = sch.CountDaysInMonth(y, m);
            int daysSinceEpoch = sch.CountDaysSinceEpoch(y, m, d);
            return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <inheritdoc />
    [Pure]
    public int CountDays()
    {
        var (y, m) = this;
        return Calendar.Schema.CountDaysInMonth(y, m);
    }

    /// <summary>
    /// Converts the current instance to a range of days.
    /// </summary>
    [Pure]
    public Range<TabularIslamicDate> ToRange()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);
        return Range.StartingAt(TabularIslamicDate.UnsafeCreate(startOfMonth), daysInMonth);
    }

    [Pure]
    Range<TabularIslamicDate> IDaySegment<TabularIslamicDate>.ToDayRange() => ToRange();

    /// <summary>
    /// Returns an enumerable collection of all days in this month instance.
    /// </summary>
    [Pure]
    public IEnumerable<TabularIslamicDate> ToEnumerable()
    {
        var (y, m) = this;
        var sch = Calendar.Schema;
        int startOfMonth = sch.CountDaysSinceEpoch(y, m, 1);
        int daysInMonth = sch.CountDaysInMonth(y, m);

        return from daysSinceEpoch
               in Enumerable.Range(startOfMonth, daysInMonth)
               select TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
    }

    [Pure]
    IEnumerable<TabularIslamicDate> IDaySegment<TabularIslamicDate>.EnumerateDays() => ToEnumerable();

    /// <summary>
    /// Returns <see langword="true"/> if the current month instance contains
    /// the specified date; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(TabularIslamicDate date)
    {
        var (y, m) = this;
        Calendar.Schema.GetDateParts(date.DaysSinceEpoch, out int y1, out int m1, out _);
        return y1 == y && m1 == m;
    }

    /// <summary>
    /// Obtains the date corresponding to the specified day of this month
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfMonth"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public TabularIslamicDate GetDayOfMonth(int dayOfMonth)
    {
        var (y, m) = this;
        var chr = Calendar;
        chr.Scope.PreValidator.ValidateDayOfMonth(y, m, dayOfMonth);
        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(y, m, dayOfMonth);
        return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
    }
}

public partial struct TabularIslamicMonth // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(TabularIslamicMonth left, TabularIslamicMonth right) =>
        left._monthsSinceEpoch == right._monthsSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(TabularIslamicMonth left, TabularIslamicMonth right) =>
        left._monthsSinceEpoch != right._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(TabularIslamicMonth other) => _monthsSinceEpoch == other._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is TabularIslamicMonth month && Equals(month);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _monthsSinceEpoch;
}

public partial struct TabularIslamicMonth // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(TabularIslamicMonth left, TabularIslamicMonth right) =>
        left._monthsSinceEpoch < right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(TabularIslamicMonth left, TabularIslamicMonth right) =>
        left._monthsSinceEpoch <= right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(TabularIslamicMonth left, TabularIslamicMonth right) =>
        left._monthsSinceEpoch > right._monthsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(TabularIslamicMonth left, TabularIslamicMonth right) =>
        left._monthsSinceEpoch >= right._monthsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicMonth Min(TabularIslamicMonth x, TabularIslamicMonth y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicMonth Max(TabularIslamicMonth x, TabularIslamicMonth y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(TabularIslamicMonth other) => _monthsSinceEpoch.CompareTo(other._monthsSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is TabularIslamicMonth month ? CompareTo(month)
        : ThrowHelpers.ThrowNonComparable(typeof(TabularIslamicMonth), obj);
}

public partial struct TabularIslamicMonth // Standard math ops
{
    /// <summary>
    /// Subtracts the two specified months and returns the number of months
    /// between them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountMonthsSince()")]
    public static int operator -(TabularIslamicMonth left, TabularIslamicMonth right) => left.CountMonthsSince(right);

    /// <summary>
    /// Adds a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static TabularIslamicMonth operator +(TabularIslamicMonth value, int months) => value.PlusMonths(months);

    /// <summary>
    /// Subtracts a number of months to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusMonths()")]
    public static TabularIslamicMonth operator -(TabularIslamicMonth value, int months) => value.PlusMonths(-months);

    /// <summary>
    /// Adds one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextMonth()")]
    public static TabularIslamicMonth operator ++(TabularIslamicMonth value) => value.NextMonth();

    /// <summary>
    /// Subtracts one month to the specified month, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousMonth()")]
    public static TabularIslamicMonth operator --(TabularIslamicMonth value) => value.PreviousMonth();

    /// <summary>
    /// Counts the number of whole months elapsed since the specified month.
    /// </summary>
    [Pure]
    public int CountMonthsSince(TabularIslamicMonth other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to MaxMonthsSinceEpoch.
        _monthsSinceEpoch - other._monthsSinceEpoch;

    /// <summary>
    /// Adds a number of months to the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported months.
    /// </exception>
    [Pure]
    public TabularIslamicMonth PlusMonths(int months)
    {
        int monthsSinceEpoch = checked(_monthsSinceEpoch + months);
        if (unchecked((uint)monthsSinceEpoch) > MaxMonthsSinceEpoch)
            ThrowHelpers.ThrowMonthOverflow();
        return new TabularIslamicMonth(monthsSinceEpoch);
    }

    /// <summary>
    /// Obtains the month after the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported month.</exception>
    [Pure]
    public TabularIslamicMonth NextMonth()
    {
        if (_monthsSinceEpoch == MaxMonthsSinceEpoch) ThrowHelpers.ThrowMonthOverflow();
        return new TabularIslamicMonth(_monthsSinceEpoch + 1);
    }

    /// <summary>
    /// Obtains the month before the current instance, yielding a new month.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported month.</exception>
    [Pure]
    public TabularIslamicMonth PreviousMonth()
    {
        if (_monthsSinceEpoch == 0) ThrowHelpers.ThrowMonthOverflow();
        return new TabularIslamicMonth(_monthsSinceEpoch - 1);
    }
}

public partial struct TabularIslamicMonth // Non-standard math ops
{
    /// <summary>
    /// Adds the specified number of years to the year part of this month
    /// instance, yielding a new date.
    /// <para>The underlying calendar being regular, this operation is <i>always</i>
    /// exact.</para>
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported months.</exception>
    [Pure]
    public TabularIslamicMonth PlusYears(int years)
    {
        var (y, m) = this;
        // Exact addition of years to a calendar year.
        int newY = checked(y + years);
        if (newY < StandardScope.MinYear || newY > StandardScope.MaxYear)
            ThrowHelpers.ThrowMonthOverflow();

        return UnsafeCreate(newY, m);
    }

    [Pure]
    TabularIslamicMonth IMonthBase<TabularIslamicMonth>.PlusYears(int years, out int roundoff)
    {
        roundoff = 0;
        return PlusYears(years);
    }

    /// <summary>
    /// Counts the number of whole years from <paramref name="other"/> to this
    /// month instance.
    /// </summary>
    [Pure]
    public int CountYearsSince(TabularIslamicMonth other)
    {
        // Exact difference between two calendar years.
        int years = Year - other.Year;

        var newStart = other.PlusYears(years);
        if (other < this)
        {
            if (newStart > this) years--;
        }
        else
        {
            if (newStart < this) years++;
        }

        return years;
    }
}

#endregion

#region TabularIslamicYear

/// <summary>
/// Represents the TabularIslamic year.
/// <para><i>All</i> years within the range [1..9999] of years are supported.
/// </para>
/// <para><see cref="TabularIslamicYear"/> is an immutable struct.</para>
/// </summary>
public readonly partial struct TabularIslamicYear :
    IYear<TabularIslamicYear>,
    // A year viewed as a finite sequence of months
    IMonthSegment<TabularIslamicMonth>,
    ISetMembership<TabularIslamicMonth>,
    // A year viewed as a finite sequence of days
    IDaySegment<TabularIslamicDate>,
    ISetMembership<TabularIslamicDate>,
    // Arithmetic
    ISubtractionOperators<TabularIslamicYear, TabularIslamicYear, int>
{ }

public partial struct TabularIslamicYear // Preamble
{
    /// <summary>Represents the maximum value of <see cref="_yearsSinceEpoch"/>.
    /// <para>This field is a constant equal to 9998.</para></summary>
    private const int MaxYearsSinceEpoch = StandardScope.MaxYear - 1;

    /// <summary>
    /// Represents the count of consecutive years since the epoch
    /// <see cref="DayZero.TabularIslamic"/>.
    /// <para>This field is in the range from 0 to <see cref="MaxYearsSinceEpoch"/>.
    /// </para>
    /// </summary>
    private readonly ushort _yearsSinceEpoch;

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicYear"/> struct
    /// to the specified year.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="year"/> is
    /// outside the range of years supported values.</exception>
    public TabularIslamicYear(int year)
    {
        if (year < StandardScope.MinYear || year > StandardScope.MaxYear)
            ThrowHelpers.ThrowYearOutOfRange(year);

        _yearsSinceEpoch = (ushort)(year - 1);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="TabularIslamicYear"/> struct.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    private TabularIslamicYear(ushort yearsSinceEpoch)
    {
        _yearsSinceEpoch = yearsSinceEpoch;
    }

    /// <summary>
    /// Gets the smallest possible value of <see cref="TabularIslamicYear"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The earliest supported year.</returns>
    //
    // MinValue = new(1) = new() = default(TabularIslamicYear)
    public static TabularIslamicYear MinValue { get; }

    /// <summary>
    /// Gets the largest possible value of <see cref="TabularIslamicYear"/>.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    /// <returns>The latest supported year.</returns>
    public static TabularIslamicYear MaxValue { get; } = new((ushort)MaxYearsSinceEpoch);

    /// <summary>
    /// Gets the companion calendar.
    /// <para>This static property is thread-safe.</para>
    /// </summary>
    public static TabularIslamicCalendar Calendar => TabularIslamicCalendar.Instance;

    static Calendar IYear.Calendar => Calendar;

    /// <inheritdoc />
    public int YearsSinceEpoch => _yearsSinceEpoch;

    /// <summary>
    /// Gets the century of the era.
    /// </summary>
    public Ord CenturyOfEra => Ord.FromInt32(Century);

    /// <summary>
    /// Gets the century number.
    /// </summary>
    public int Century => YearNumbering.GetCentury(Year);

    /// <summary>
    /// Gets the year of the era.
    /// </summary>
    public Ord YearOfEra => Ord.FromInt32(Year);

    /// <summary>
    /// Gets the year of the century.
    /// <para>The result is in the range from 1 to 100.</para>
    /// </summary>
    public int YearOfCentury => YearNumbering.GetYearOfCentury(Year);

    /// <summary>
    /// Gets the year number.
    /// </summary>
    //
    // Actually, this property returns the algebraic year, but since its value
    // is greater than 0, one can ignore this subtlety.
    public int Year => _yearsSinceEpoch + 1;

    /// <inheritdoc />
    public bool IsLeap => Calendar.Schema.IsLeapYear(Year);

    /// <summary>
    /// Returns a culture-independent string representation of the current
    /// instance.
    /// </summary>
    [Pure]
    public override string ToString() =>
        FormattableString.Invariant($"{Year:D4} ({TabularIslamicCalendar.DisplayName})");
}

public partial struct TabularIslamicYear // Factories
{
    /// <inheritdoc />
    [Pure]
    public static TabularIslamicYear Create(int year) => new(year);

    /// <summary>
    /// Attempts to create a new instance of the <see cref="TabularIslamicYear"/>
    /// struct from the specified year.
    /// </summary>
    [Pure]
    public static TabularIslamicYear? TryCreate(int year)
    {
        bool ok = year >= StandardScope.MinYear && year <= StandardScope.MaxYear;
        return ok ? UnsafeCreate(year) : null;
    }

    // Explicit implementation: TabularIslamicYear being a value type, better
    // to use the other TryCreate().
    [Pure]
    static bool IYear<TabularIslamicYear>.TryCreate(int year, out TabularIslamicYear result)
    {
        var yearValue = TryCreate(year);
        result = yearValue ?? default;
        return yearValue.HasValue;
    }

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicYear"/> struct
    /// from the specified year.
    /// <para>This method does NOT validate its parameter.</para>
    /// </summary>
    [Pure, MethodImpl(MethodImplOptions.AggressiveInlining)]
    private static TabularIslamicYear UnsafeCreate(int year) => new((ushort)(year - 1));
}

public partial struct TabularIslamicYear // Conversions
{
    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicYear"/> struct
    /// from the specified <see cref="TabularIslamicMonth"/> value.
    /// </summary>
    [Pure]
    public static TabularIslamicYear FromMonth(TabularIslamicMonth month) => UnsafeCreate(month.Year);

    /// <summary>
    /// Creates a new instance of the <see cref="TabularIslamicYear"/> struct
    /// from the specified <see cref="TabularIslamicDate"/> value.
    /// </summary>
    [Pure]
    public static TabularIslamicYear FromDate(TabularIslamicDate date) => UnsafeCreate(date.Year);
}

public partial struct TabularIslamicYear // IMonthSegment
{
    /// <summary>
    /// Represents the total number of months in a year.
    /// <para>This field is constant equal to 12.</para>
    /// </summary>
    public const int MonthCount = TabularIslamicSchema.MonthsPerYear;

    /// <inheritdoc />
    public TabularIslamicMonth MinMonth => TabularIslamicMonth.UnsafeCreate(Year, 1);

    /// <inheritdoc />
    public TabularIslamicMonth MaxMonth => TabularIslamicMonth.UnsafeCreate(Year, MonthCount);

    /// <inheritdoc />
    [Pure]
    int IMonthSegment<TabularIslamicMonth>.CountMonths() => MonthCount;

    /// <inheritdoc />
    [Pure]
    public Range<TabularIslamicMonth> ToMonthRange() => Range.StartingAt(MinMonth, MonthCount);

    /// <inheritdoc />
    [Pure]
    public IEnumerable<TabularIslamicMonth> EnumerateMonths()
    {
        int startOfYear = TabularIslamicMonth.UnsafeCreate(Year, 1).MonthsSinceEpoch;

        return from monthsSinceEpoch
               in Enumerable.Range(startOfYear, MonthCount)
               select TabularIslamicMonth.UnsafeCreate(monthsSinceEpoch);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the current year instance contains
    /// the specified month; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(TabularIslamicMonth month) => month.Year == Year;

    /// <summary>
    /// Obtains the month corresponding to the specified month of this year
    /// instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="month"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public TabularIslamicMonth GetMonthOfYear(int month)
    {
        // We already know that "y" is valid, we only need to check "month".
        // The calendar being regular, no need to use the Scope:
        // > Calendar.Scope.PreValidator.ValidateMonth(Year, month);
        if (month < 1 || month > TabularIslamicSchema.MonthsPerYear)
            ThrowHelpers.ThrowMonthOutOfRange(month);

        return TabularIslamicMonth.UnsafeCreate(Year, month);
    }
}

public partial struct TabularIslamicYear // IDaySegment
{
    /// <summary>
    /// Gets the the start of the current year instance.
    /// </summary>
    public TabularIslamicDate MinDay
    {
        get
        {
            int daysSinceEpoch = Calendar.Schema.CountDaysSinceEpoch(Year, 1);
            return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <summary>
    /// Gets the the end of the current year instance.
    /// </summary>
    public TabularIslamicDate MaxDay
    {
        get
        {
            var sch = Calendar.Schema;
            int doy = sch.CountDaysInYear(Year);
            int daysSinceEpoch = sch.CountDaysSinceEpoch(Year, doy);
            return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
        }
    }

    /// <inheritdoc />
    [Pure]
    public int CountDays() => Calendar.Schema.CountDaysInYear(Year);

    /// <inheritdoc />
    [Pure]
    public Range<TabularIslamicDate> ToDayRange()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountDaysSinceEpoch(Year, 1);
        int daysInYear = sch.CountDaysInYear(Year);
        return Range.StartingAt(TabularIslamicDate.UnsafeCreate(startOfYear), daysInYear);
    }

    /// <inheritdoc />
    [Pure]
    public IEnumerable<TabularIslamicDate> EnumerateDays()
    {
        var sch = Calendar.Schema;
        int startOfYear = sch.CountDaysSinceEpoch(Year, 1);
        int daysInYear = sch.CountDaysInYear(Year);

        return from daysSinceEpoch
               in Enumerable.Range(startOfYear, daysInYear)
               select TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
    }

    /// <summary>
    /// Returns <see langword="true"/> if the year month instance contains
    /// the specified date; otherwise returns <see langword="false"/>.
    /// </summary>
    [Pure]
    public bool Contains(TabularIslamicDate date) => date.Year == Year;

    /// <summary>
    /// Obtains the date corresponding to the specified day of this year instance.
    /// </summary>
    /// <exception cref="ArgumentOutOfRangeException"><paramref name="dayOfYear"/>
    /// is outside the range of valid values.</exception>
    [Pure]
    public TabularIslamicDate GetDayOfYear(int dayOfYear)
    {
        var chr = Calendar;
        // We already know that "y" is valid, we only need to check "dayOfYear".
        chr.Scope.PreValidator.ValidateDayOfYear(Year, dayOfYear);
        int daysSinceEpoch = chr.Schema.CountDaysSinceEpoch(Year, dayOfYear);
        return TabularIslamicDate.UnsafeCreate(daysSinceEpoch);
    }
}

public partial struct TabularIslamicYear // IEquatable
{
    /// <inheritdoc />
    public static bool operator ==(TabularIslamicYear left, TabularIslamicYear right) =>
        left._yearsSinceEpoch == right._yearsSinceEpoch;

    /// <inheritdoc />
    public static bool operator !=(TabularIslamicYear left, TabularIslamicYear right) =>
        left._yearsSinceEpoch != right._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public bool Equals(TabularIslamicYear other) => _yearsSinceEpoch == other._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj) =>
        obj is TabularIslamicYear year && Equals(year);

    /// <inheritdoc />
    [Pure]
    public override int GetHashCode() => _yearsSinceEpoch;
}

public partial struct TabularIslamicYear // IComparable
{
    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// earlier than the right one.
    /// </summary>
    public static bool operator <(TabularIslamicYear left, TabularIslamicYear right) =>
        left._yearsSinceEpoch < right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is earlier
    /// than or equal to the right one.
    /// </summary>
    public static bool operator <=(TabularIslamicYear left, TabularIslamicYear right) =>
        left._yearsSinceEpoch <= right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is strictly
    /// later than the right one.
    /// </summary>
    public static bool operator >(TabularIslamicYear left, TabularIslamicYear right) =>
        left._yearsSinceEpoch > right._yearsSinceEpoch;

    /// <summary>
    /// Compares the two specified instances to see if the left one is later than
    /// or equal to the right one.
    /// </summary>
    public static bool operator >=(TabularIslamicYear left, TabularIslamicYear right) =>
        left._yearsSinceEpoch >= right._yearsSinceEpoch;

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicYear Min(TabularIslamicYear x, TabularIslamicYear y) => x < y ? x : y;

    /// <inheritdoc />
    [Pure]
    public static TabularIslamicYear Max(TabularIslamicYear x, TabularIslamicYear y) => x > y ? x : y;

    /// <inheritdoc />
    [Pure]
    public int CompareTo(TabularIslamicYear other) =>
        _yearsSinceEpoch.CompareTo(other._yearsSinceEpoch);

    [Pure]
    int IComparable.CompareTo(object? obj) =>
        obj is null ? 1
        : obj is TabularIslamicYear year ? CompareTo(year)
        : ThrowHelpers.ThrowNonComparable(typeof(TabularIslamicYear), obj);
}

public partial struct TabularIslamicYear // Math ops
{
    /// <summary>
    /// Subtracts the two specified years and returns the number of years between
    /// them.
    /// </summary>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See CountYearsSince()")]
    public static int operator -(TabularIslamicYear left, TabularIslamicYear right) => left.CountYearsSince(right);

    /// <summary>
    /// Adds a number of years to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// range of supported years.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusYears()")]
    public static TabularIslamicYear operator +(TabularIslamicYear value, int years) => value.PlusYears(years);

    /// <summary>
    /// Subtracts a number of years to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the range
    /// of supported years.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PlusYears()")]
    public static TabularIslamicYear operator -(TabularIslamicYear value, int years) => value.PlusYears(-years);

    /// <summary>
    /// Adds one year to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported year.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See NextYear()")]
    public static TabularIslamicYear operator ++(TabularIslamicYear value) => value.NextYear();

    /// <summary>
    /// Subtracts one year to the specified year, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported year.</exception>
    [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "See PreviousYear()")]
    public static TabularIslamicYear operator --(TabularIslamicYear value) => value.PreviousYear();

    /// <summary>
    /// Counts the number of whole years elapsed since the specified year.
    /// </summary>
    [Pure]
    public int CountYearsSince(TabularIslamicYear other) =>
        // No need to use a checked context here. Indeed, the absolute value of
        // the result is at most equal to (MaxYear - 1).
        _yearsSinceEpoch - other._yearsSinceEpoch;

    /// <summary>
    /// Adds a number of years to the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow either
    /// the capacity of <see cref="int"/> or the range of supported years.
    /// </exception>
    [Pure]
    public TabularIslamicYear PlusYears(int years)
    {
        int yearsSinceEpoch = checked(_yearsSinceEpoch + years);
        if (unchecked((uint)yearsSinceEpoch) > MaxYearsSinceEpoch) ThrowHelpers.ThrowYearOverflow();
        return new TabularIslamicYear((ushort)yearsSinceEpoch);
    }

    /// <summary>
    /// Obtains the year after the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// latest supported year.</exception>
    [Pure]
    public TabularIslamicYear NextYear()
    {
        if (_yearsSinceEpoch == MaxYearsSinceEpoch) ThrowHelpers.ThrowYearOverflow();
        return new TabularIslamicYear((ushort)(_yearsSinceEpoch + 1));
    }

    /// <summary>
    /// Obtains the year before the current instance, yielding a new year.
    /// </summary>
    /// <exception cref="OverflowException">The operation would overflow the
    /// earliest supported year.</exception>
    [Pure]
    public TabularIslamicYear PreviousYear()
    {
        if (_yearsSinceEpoch == 0) ThrowHelpers.ThrowYearOverflow();
        return new TabularIslamicYear((ushort)(_yearsSinceEpoch - 1));
    }
}

#endregion

