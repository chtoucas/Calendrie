#nullable enable
abstract Calendrie.Core.CalendricalSchema.CountDaysInMonth(int y, int m) -> int
abstract Calendrie.Core.CalendricalSchema.CountDaysInYear(int y) -> int
abstract Calendrie.Core.CalendricalSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
abstract Calendrie.Core.CalendricalSchema.CountMonthsInYear(int y) -> int
abstract Calendrie.Core.CalendricalSchema.Family.get -> Calendrie.CalendricalFamily
abstract Calendrie.Core.CalendricalSchema.GetMonth(int y, int doy, out int d) -> int
abstract Calendrie.Core.CalendricalSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
abstract Calendrie.Core.CalendricalSchema.GetStartOfYear(int y) -> int
abstract Calendrie.Core.CalendricalSchema.GetStartOfYearInMonths(int y) -> int
abstract Calendrie.Core.CalendricalSchema.GetYear(int daysSinceEpoch) -> int
abstract Calendrie.Core.CalendricalSchema.IsIntercalaryDay(int y, int m, int d) -> bool
abstract Calendrie.Core.CalendricalSchema.IsIntercalaryMonth(int y, int m) -> bool
abstract Calendrie.Core.CalendricalSchema.IsLeapYear(int y) -> bool
abstract Calendrie.Core.CalendricalSchema.IsRegular(out int monthsInYear) -> bool
abstract Calendrie.Core.CalendricalSchema.IsSupplementaryDay(int y, int m, int d) -> bool
abstract Calendrie.Core.CalendricalSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
abstract Calendrie.Core.RegularSchema.MonthsInYear.get -> int
abstract Calendrie.Hemerology.CalendarScope.CheckOrdinal(int year, int dayOfYear) -> bool
abstract Calendrie.Hemerology.CalendarScope.CheckYear(int year) -> bool
abstract Calendrie.Hemerology.CalendarScope.CheckYearMonth(int year, int month) -> bool
abstract Calendrie.Hemerology.CalendarScope.CheckYearMonthDay(int year, int month, int day) -> bool
abstract Calendrie.Hemerology.CalendarScope.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
abstract Calendrie.Hemerology.CalendarScope.ValidateYear(int year, string? paramName = null) -> void
abstract Calendrie.Hemerology.CalendarScope.ValidateYearMonth(int year, int month, string? paramName = null) -> void
abstract Calendrie.Hemerology.CalendarScope.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
Calendrie.AdditionRule
Calendrie.AdditionRule.Exact = 2 -> Calendrie.AdditionRule
Calendrie.AdditionRule.Overspill = 1 -> Calendrie.AdditionRule
Calendrie.AdditionRule.Truncate = 0 -> Calendrie.AdditionRule
Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.Days = 1 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.DaysAndMonths = Calendrie.CalendricalAdjustments.Days | Calendrie.CalendricalAdjustments.Months -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.Months = 4 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.None = 0 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.Weeks = 2 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Arithmetical = 1 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Astronomical = 2 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Observational = 3 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Unknown = 0 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.AnnusVagus = 1 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Lunar = 3 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Lunisolar = 4 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Other = 0 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Solar = 2 -> Calendrie.CalendricalFamily
Calendrie.Core.CalendricalConstants
Calendrie.Core.CalendricalSchema
Calendrie.Core.CalendricalSchema.Algorithm.get -> Calendrie.CalendricalAlgorithm
Calendrie.Core.CalendricalSchema.CalendricalSchema(Calendrie.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.CalendricalSchema.CalendricalSchema(int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.CalendricalSchema.CountDaysInMonthAfter(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthAfter(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthAfter(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthBefore(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthBefore(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfter(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfter(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfter(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfterMonth(int y, int m) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearBefore(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearBefore(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.CountDaysSinceEpoch(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.GetDayOfYear(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.GetEndOfMonth(int y, int m) -> int
Calendrie.Core.CalendricalSchema.GetEndOfYear(int y) -> int
Calendrie.Core.CalendricalSchema.GetStartOfMonth(int y, int m) -> int
Calendrie.Core.CalendricalSchema.MinDaysInMonth.get -> int
Calendrie.Core.CalendricalSchema.MinDaysInYear.get -> int
Calendrie.Core.CalendricalSchema.PreValidator.get -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Core.CalendricalSchema.PreValidator.init -> void
Calendrie.Core.CalendricalSchema.SupportedDays.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSchema.SupportedMonths.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSchema.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSchema.SupportedYearsCore.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSchema.SupportedYearsCore.init -> void
Calendrie.Core.CalendricalSegment
Calendrie.Core.CalendricalSegment.IsComplete.get -> bool
Calendrie.Core.CalendricalSegment.MaxIsEndOfYear.get -> bool
Calendrie.Core.CalendricalSegment.MinIsStartOfYear.get -> bool
Calendrie.Core.CalendricalSegment.MinMaxDateParts.get -> Calendrie.Core.Intervals.OrderedPair<Calendrie.DateParts>
Calendrie.Core.CalendricalSegment.MinMaxMonthParts.get -> Calendrie.Core.Intervals.OrderedPair<Calendrie.MonthParts>
Calendrie.Core.CalendricalSegment.MinMaxOrdinalParts.get -> Calendrie.Core.Intervals.OrderedPair<Calendrie.OrdinalParts>
Calendrie.Core.CalendricalSegment.SupportedDays.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegment.SupportedMonths.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegment.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegmentBuilder
Calendrie.Core.CalendricalSegmentBuilder.BuildSegment() -> Calendrie.Core.CalendricalSegment!
Calendrie.Core.CalendricalSegmentBuilder.CalendricalSegmentBuilder(Calendrie.Core.ICalendricalSchema! schema) -> void
Calendrie.Core.CalendricalSegmentBuilder.HasMax.get -> bool
Calendrie.Core.CalendricalSegmentBuilder.HasMin.get -> bool
Calendrie.Core.CalendricalSegmentBuilder.IsBuildable.get -> bool
Calendrie.Core.CalendricalSegmentBuilder.MaxDateParts.get -> Calendrie.DateParts
Calendrie.Core.CalendricalSegmentBuilder.MaxDateParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MaxDaysSinceEpoch.get -> int
Calendrie.Core.CalendricalSegmentBuilder.MaxDaysSinceEpoch.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MaxOrdinalParts.get -> Calendrie.OrdinalParts
Calendrie.Core.CalendricalSegmentBuilder.MaxOrdinalParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MinDateParts.get -> Calendrie.DateParts
Calendrie.Core.CalendricalSegmentBuilder.MinDateParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MinDaysSinceEpoch.get -> int
Calendrie.Core.CalendricalSegmentBuilder.MinDaysSinceEpoch.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MinOrdinalParts.get -> Calendrie.OrdinalParts
Calendrie.Core.CalendricalSegmentBuilder.MinOrdinalParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMaxToEndOfMaxSupportedYear() -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMaxToEndOfYear(int year) -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMinToStartOfMinSupportedYear() -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMinToStartOfYear(int year) -> void
Calendrie.Core.CalendricalSegmentBuilder.TrySetMinToStartOfMinSupportedYearOnOrAfterYear1() -> bool
Calendrie.Core.ICalendricalCore
Calendrie.Core.ICalendricalCore.Algorithm.get -> Calendrie.CalendricalAlgorithm
Calendrie.Core.ICalendricalCore.CountDaysInMonth(int y, int m) -> int
Calendrie.Core.ICalendricalCore.CountDaysInYear(int y) -> int
Calendrie.Core.ICalendricalCore.CountMonthsInYear(int y) -> int
Calendrie.Core.ICalendricalCore.Family.get -> Calendrie.CalendricalFamily
Calendrie.Core.ICalendricalCore.IsIntercalaryDay(int y, int m, int d) -> bool
Calendrie.Core.ICalendricalCore.IsIntercalaryMonth(int y, int m) -> bool
Calendrie.Core.ICalendricalCore.IsLeapYear(int y) -> bool
Calendrie.Core.ICalendricalCore.IsRegular(out int monthsInYear) -> bool
Calendrie.Core.ICalendricalCore.IsSupplementaryDay(int y, int m, int d) -> bool
Calendrie.Core.ICalendricalCore.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
Calendrie.Core.ICalendricalPreValidator
Calendrie.Core.ICalendricalPreValidator.CheckDayOfYear(int y, int dayOfYear) -> bool
Calendrie.Core.ICalendricalPreValidator.CheckMonth(int y, int month) -> bool
Calendrie.Core.ICalendricalPreValidator.CheckMonthDay(int y, int month, int day) -> bool
Calendrie.Core.ICalendricalPreValidator.CreateDefault(Calendrie.Core.CalendricalSchema! schema) -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Core.ICalendricalPreValidator.ValidateDayOfMonth(int y, int m, int day, string? paramName = null) -> void
Calendrie.Core.ICalendricalPreValidator.ValidateDayOfYear(int y, int dayOfYear, string? paramName = null) -> void
Calendrie.Core.ICalendricalPreValidator.ValidateMonth(int y, int month, string? paramName = null) -> void
Calendrie.Core.ICalendricalPreValidator.ValidateMonthDay(int y, int month, int day, string? paramName = null) -> void
Calendrie.Core.ICalendricalSchema
Calendrie.Core.ICalendricalSchema.CountDaysInMonthAfter(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthAfter(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthAfter(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthBefore(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthBefore(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthBefore(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfter(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfter(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfter(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfterMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBefore(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBefore(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBefore(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.CountDaysSinceEpoch(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountMonthsSinceEpoch(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
Calendrie.Core.ICalendricalSchema.GetDayOfYear(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.GetEndOfMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.GetEndOfYear(int y) -> int
Calendrie.Core.ICalendricalSchema.GetEndOfYearInMonths(int y) -> int
Calendrie.Core.ICalendricalSchema.GetMonth(int y, int doy, out int d) -> int
Calendrie.Core.ICalendricalSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
Calendrie.Core.ICalendricalSchema.GetStartOfMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.GetStartOfYear(int y) -> int
Calendrie.Core.ICalendricalSchema.GetStartOfYearInMonths(int y) -> int
Calendrie.Core.ICalendricalSchema.GetYear(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.GetYear(int daysSinceEpoch, out int doy) -> int
Calendrie.Core.ICalendricalSchema.MinDaysInMonth.get -> int
Calendrie.Core.ICalendricalSchema.MinDaysInYear.get -> int
Calendrie.Core.ICalendricalSchema.PreValidator.get -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Core.ICalendricalSchema.SupportedDays.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.ICalendricalSchema.SupportedMonths.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.ICalendricalSchema.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.Intervals.IInterval<T>
Calendrie.Core.Intervals.IInterval<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.IInterval<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.IInterval<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.IInterval<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.Interval
Calendrie.Core.Intervals.IRay<T>
Calendrie.Core.Intervals.IRay<T>.Endpoint.get -> T
Calendrie.Core.Intervals.ISegment<T>
Calendrie.Core.Intervals.ISegment<T>.Endpoints.get -> Calendrie.Core.Intervals.OrderedPair<T>
Calendrie.Core.Intervals.ISegment<T>.LowerEnd.get -> T
Calendrie.Core.Intervals.ISegment<T>.UpperEnd.get -> T
Calendrie.Core.Intervals.ISetComparable<TOther>
Calendrie.Core.Intervals.ISetComparable<TOther>.IsProperSubsetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetComparable<TOther>.IsProperSupersetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetEquatable<TOther>
Calendrie.Core.Intervals.ISetEquatable<TOther>.SetEquals(TOther other) -> bool
Calendrie.Core.Intervals.ISetIncludible<TOther>
Calendrie.Core.Intervals.ISetIncludible<TOther>.IsSubsetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetIncludible<TOther>.IsSupersetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetMembership<T>
Calendrie.Core.Intervals.ISetMembership<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.LowerRay
Calendrie.Core.Intervals.LowerRay<T>
Calendrie.Core.Intervals.LowerRay<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.LowerRay<T>.Equals(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsProperSubsetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsProperSupersetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsSubsetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsSupersetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.LowerRay() -> void
Calendrie.Core.Intervals.LowerRay<T>.LowerRay(T max) -> void
Calendrie.Core.Intervals.LowerRay<T>.Max.get -> T
Calendrie.Core.Intervals.LowerRay<T>.SetEquals(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.OrderedPair
Calendrie.Core.Intervals.OrderedPair<T>
Calendrie.Core.Intervals.OrderedPair<T>.Deconstruct(out T lowerValue, out T upperValue) -> void
Calendrie.Core.Intervals.OrderedPair<T>.Equals(Calendrie.Core.Intervals.OrderedPair<T> other) -> bool
Calendrie.Core.Intervals.OrderedPair<T>.LowerValue.get -> T
Calendrie.Core.Intervals.OrderedPair<T>.OrderedPair() -> void
Calendrie.Core.Intervals.OrderedPair<T>.OrderedPair(T x, T y) -> void
Calendrie.Core.Intervals.OrderedPair<T>.Select<TResult>(System.Func<T, TResult>! lowerValueSelector, System.Func<T, TResult>! upperValueSelector) -> Calendrie.Core.Intervals.OrderedPair<TResult>
Calendrie.Core.Intervals.OrderedPair<T>.Select<TResult>(System.Func<T, TResult>! selector) -> Calendrie.Core.Intervals.OrderedPair<TResult>
Calendrie.Core.Intervals.OrderedPair<T>.UpperValue.get -> T
Calendrie.Core.Intervals.Range
Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.Range<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.Range<T>.Endpoints.get -> Calendrie.Core.Intervals.OrderedPair<T>
Calendrie.Core.Intervals.Range<T>.Equals(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.Range<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.Range<T>.IsProperSubsetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsProperSupersetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.Range<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.Range<T>.IsSingleton.get -> bool
Calendrie.Core.Intervals.Range<T>.IsSubsetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsSupersetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.Max.get -> T
Calendrie.Core.Intervals.Range<T>.Min.get -> T
Calendrie.Core.Intervals.Range<T>.Range() -> void
Calendrie.Core.Intervals.Range<T>.Range(T min, T max) -> void
Calendrie.Core.Intervals.Range<T>.SetEquals(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.WithMax(T max) -> Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.Range<T>.WithMin(T min) -> Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.RangeSet
Calendrie.Core.Intervals.RangeSet<T>
Calendrie.Core.Intervals.RangeSet<T>.Equals(Calendrie.Core.Intervals.RangeSet<T> other) -> bool
Calendrie.Core.Intervals.RangeSet<T>.IsEmpty.get -> bool
Calendrie.Core.Intervals.RangeSet<T>.Range.get -> Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.RangeSet<T>.RangeSet() -> void
Calendrie.Core.Intervals.RangeSet<T>.RangeSet(T min, T max) -> void
Calendrie.Core.Intervals.UpperRay
Calendrie.Core.Intervals.UpperRay<T>
Calendrie.Core.Intervals.UpperRay<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.UpperRay<T>.Equals(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsProperSubsetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsProperSupersetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsSubsetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsSupersetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.Min.get -> T
Calendrie.Core.Intervals.UpperRay<T>.SetEquals(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.UpperRay() -> void
Calendrie.Core.Intervals.UpperRay<T>.UpperRay(T min) -> void
Calendrie.Core.ISchemaActivator<TSchema>
Calendrie.Core.PartsAdapter
Calendrie.Core.PartsAdapter.GetDateParts(int daysSinceEpoch) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetDateParts(int y, int doy) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetDatePartsAtEndOfMonth(int y, int m) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetDatePartsAtEndOfYear(int y) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetMonthParts(int monthsSinceEpoch) -> Calendrie.MonthParts
Calendrie.Core.PartsAdapter.GetMonthPartsAtEndOfYear(int y) -> Calendrie.MonthParts
Calendrie.Core.PartsAdapter.GetOrdinalParts(int daysSinceEpoch) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalParts(int y, int m, int d) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalPartsAtEndOfMonth(int y, int m) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalPartsAtEndOfYear(int y) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalPartsAtStartOfMonth(int y, int m) -> Calendrie.OrdinalParts
Calendrie.Core.Prototyping.NonRegularSchemaPrototype
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.IsProleptic.get -> bool
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.MinMonthsInYear.get -> int
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.NonRegularSchemaPrototype(bool proleptic, int minMonthsInYear, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.NonRegularSchemaPrototype(Calendrie.Core.Intervals.Range<int> supportedYears, int minMonthsInYear, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Prototyping.RegularSchemaPrototype
Calendrie.Core.Prototyping.RegularSchemaPrototype.IsProleptic.get -> bool
Calendrie.Core.Prototyping.RegularSchemaPrototype.RegularSchemaPrototype(bool proleptic, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Prototyping.RegularSchemaPrototype.RegularSchemaPrototype(Calendrie.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.RegularSchema
Calendrie.Core.RegularSchema.RegularSchema(Calendrie.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.RegularSchema.RegularSchema(int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Schemas.CivilSchema
Calendrie.Core.Schemas.Coptic12Schema
Calendrie.Core.Schemas.Coptic12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.Coptic13Schema
Calendrie.Core.Schemas.Coptic13Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.CopticSchema
Calendrie.Core.Schemas.Egyptian12Schema
Calendrie.Core.Schemas.Egyptian12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.Egyptian13Schema
Calendrie.Core.Schemas.Egyptian13Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.EgyptianSchema
Calendrie.Core.Schemas.FrenchRepublican12Schema
Calendrie.Core.Schemas.FrenchRepublican12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.FrenchRepublican13Schema
Calendrie.Core.Schemas.FrenchRepublican13Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.FrenchRepublicanSchema
Calendrie.Core.Schemas.GJSchema
Calendrie.Core.Schemas.GregorianSchema
Calendrie.Core.Schemas.InternationalFixedSchema
Calendrie.Core.Schemas.InternationalFixedSchema.IsBlankDay(int y, int m, int d) -> bool
Calendrie.Core.Schemas.JulianSchema
Calendrie.Core.Schemas.Persian2820Schema
Calendrie.Core.Schemas.PositivistSchema
Calendrie.Core.Schemas.PositivistSchema.IsBlankDay(int y, int m, int d) -> bool
Calendrie.Core.Schemas.PtolemaicSchema
Calendrie.Core.Schemas.TabularIslamicSchema
Calendrie.Core.Schemas.WorldSchema
Calendrie.Core.Schemas.WorldSchema.CountDaysInWorldMonth(int y, int m) -> int
Calendrie.Core.Schemas.WorldSchema.IsBlankDay(int y, int m, int d) -> bool
Calendrie.Core.TemporalConstants
Calendrie.DateParts
Calendrie.DateParts.CompareTo(Calendrie.DateParts other) -> int
Calendrie.DateParts.DateParts() -> void
Calendrie.DateParts.DateParts(int Year, int Month, int Day) -> void
Calendrie.DateParts.Day.get -> int
Calendrie.DateParts.Day.init -> void
Calendrie.DateParts.Month.get -> int
Calendrie.DateParts.Month.init -> void
Calendrie.DateParts.MonthParts.get -> Calendrie.MonthParts
Calendrie.DateParts.Year.get -> int
Calendrie.DateParts.Year.init -> void
Calendrie.DayNumber
Calendrie.DayNumber.CompareTo(Calendrie.DayNumber other) -> int
Calendrie.DayNumber.CountDaysSince(Calendrie.DayNumber other) -> int
Calendrie.DayNumber.DayNumber() -> void
Calendrie.DayNumber.DayOfWeek.get -> System.DayOfWeek
Calendrie.DayNumber.DaysSinceZero.get -> int
Calendrie.DayNumber.Equals(Calendrie.DayNumber other) -> bool
Calendrie.DayNumber.GetGregorianOrdinalParts() -> Calendrie.OrdinalParts
Calendrie.DayNumber.GetGregorianParts() -> Calendrie.DateParts
Calendrie.DayNumber.GetGregorianYear() -> int
Calendrie.DayNumber.GetJulianOrdinalParts() -> Calendrie.OrdinalParts
Calendrie.DayNumber.GetJulianParts() -> Calendrie.DateParts
Calendrie.DayNumber.GetJulianYear() -> int
Calendrie.DayNumber.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.Next(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.NextDay() -> Calendrie.DayNumber
Calendrie.DayNumber.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.Ordinal.get -> Calendrie.Ord
Calendrie.DayNumber.PlusDays(int days) -> Calendrie.DayNumber
Calendrie.DayNumber.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.PreviousDay() -> Calendrie.DayNumber
Calendrie.DayNumber.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayZero
Calendrie.Hemerology.Calendar
Calendrie.Hemerology.Calendar.Algorithm.get -> Calendrie.CalendricalAlgorithm
Calendrie.Hemerology.Calendar.Calendar(string! name, Calendrie.Hemerology.CalendarScope! scope) -> void
Calendrie.Hemerology.Calendar.Epoch.get -> Calendrie.DayNumber
Calendrie.Hemerology.Calendar.Family.get -> Calendrie.CalendricalFamily
Calendrie.Hemerology.Calendar.Name.get -> string!
Calendrie.Hemerology.Calendar.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
Calendrie.Hemerology.Calendar.Scope.get -> Calendrie.Hemerology.CalendarScope!
Calendrie.Hemerology.CalendarScope
Calendrie.Hemerology.CalendarScope.CalendarScope(Calendrie.Core.CalendricalSegment! segment, Calendrie.DayNumber epoch) -> void
Calendrie.Hemerology.CalendarScope.CheckLowerBound(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.CheckOverflow(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.CheckUpperBound(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.Domain.get -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>
Calendrie.Hemerology.CalendarScope.Epoch.get -> Calendrie.DayNumber
Calendrie.Hemerology.CalendarScope.PreValidator.get -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Hemerology.CalendarScope.PreValidator.init -> void
Calendrie.Hemerology.CalendarScope.Schema.get -> Calendrie.Core.ICalendricalSchema!
Calendrie.Hemerology.CalendarScope.Segment.get -> Calendrie.Core.CalendricalSegment!
Calendrie.Hemerology.CalendarScope.Validate(Calendrie.DayNumber dayNumber, string? paramName = null) -> void
Calendrie.Hemerology.IAbsoluteDate
Calendrie.Hemerology.IAbsoluteDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Hemerology.IAbsoluteDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Hemerology.IAbsoluteDate.DaysSinceEpoch.get -> int
Calendrie.Hemerology.IAbsoluteDate.Nearest<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.Next<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.NextOrSame<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.Previous<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.PreviousOrSame<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate<TSelf>
Calendrie.Hemerology.IAbsoluteDate<TSelf>.FromDayNumber(Calendrie.DayNumber dayNumber) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Nearest(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Next(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.NextOrSame(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.operator -(TSelf left, TSelf right) -> int
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Previous(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.PreviousOrSame(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAdjustableDate<TSelf>
Calendrie.Hemerology.IAdjustableDate<TSelf>.WithDay(int newDay) -> TSelf
Calendrie.Hemerology.IAdjustableDate<TSelf>.WithDayOfYear(int newDayOfYear) -> TSelf
Calendrie.Hemerology.IAdjustableDate<TSelf>.WithMonth(int newMonth) -> TSelf
Calendrie.Hemerology.IAdjustableDate<TSelf>.WithYear(int newYear) -> TSelf
Calendrie.Hemerology.IDate
Calendrie.Hemerology.IDate.Calendar.get -> Calendrie.Hemerology.Calendar!
Calendrie.Hemerology.IDate<TSelf>
Calendrie.Hemerology.IDate<TSelf>.Create(int year, int dayOfYear) -> TSelf
Calendrie.Hemerology.IDate<TSelf>.Create(int year, int month, int day) -> TSelf
Calendrie.Hemerology.IDate<TSelf>.TryCreate(int year, int dayOfYear, out TSelf? result) -> bool
Calendrie.Hemerology.IDate<TSelf>.TryCreate(int year, int month, int day, out TSelf? result) -> bool
Calendrie.Hemerology.IDateable
Calendrie.Hemerology.IDateable.Century.get -> int
Calendrie.Hemerology.IDateable.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IDateable.CountElapsedDaysInMonth() -> int
Calendrie.Hemerology.IDateable.CountElapsedDaysInYear() -> int
Calendrie.Hemerology.IDateable.CountRemainingDaysInMonth() -> int
Calendrie.Hemerology.IDateable.CountRemainingDaysInYear() -> int
Calendrie.Hemerology.IDateable.Day.get -> int
Calendrie.Hemerology.IDateable.DayOfYear.get -> int
Calendrie.Hemerology.IDateable.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Hemerology.IDateable.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Hemerology.IDateable.IsIntercalary.get -> bool
Calendrie.Hemerology.IDateable.IsSupplementary.get -> bool
Calendrie.Hemerology.IDateable.Month.get -> int
Calendrie.Hemerology.IDateable.Year.get -> int
Calendrie.Hemerology.IDateable.YearOfCentury.get -> int
Calendrie.Hemerology.IDateable.YearOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IDateBase<TSelf>
Calendrie.Hemerology.IDateBase<TSelf>.PlusMonths(int months, out int roundoff) -> TSelf
Calendrie.Hemerology.IDateBase<TSelf>.PlusYears(int years, out int roundoff) -> TSelf
Calendrie.Hemerology.IDayFieldMath<TSelf>
Calendrie.Hemerology.IDayFieldMath<TSelf>.CountDaysSince(TSelf other) -> int
Calendrie.Hemerology.IDayFieldMath<TSelf>.CountWeeksSince(TSelf other) -> int
Calendrie.Hemerology.IDayFieldMath<TSelf>.NextDay() -> TSelf
Calendrie.Hemerology.IDayFieldMath<TSelf>.NextWeek() -> TSelf
Calendrie.Hemerology.IDayFieldMath<TSelf>.PlusDays(int days) -> TSelf
Calendrie.Hemerology.IDayFieldMath<TSelf>.PlusWeeks(int weeks) -> TSelf
Calendrie.Hemerology.IDayFieldMath<TSelf>.PreviousDay() -> TSelf
Calendrie.Hemerology.IDayFieldMath<TSelf>.PreviousWeek() -> TSelf
Calendrie.Hemerology.IDaySegment<TDate>
Calendrie.Hemerology.IDaySegment<TDate>.CountDays() -> int
Calendrie.Hemerology.IDaySegment<TDate>.EnumerateDays() -> System.Collections.Generic.IEnumerable<TDate>!
Calendrie.Hemerology.IDaySegment<TDate>.MaxDay.get -> TDate
Calendrie.Hemerology.IDaySegment<TDate>.MinDay.get -> TDate
Calendrie.Hemerology.IDaySegment<TDate>.ToDayRange() -> Calendrie.Core.Intervals.Range<TDate>
Calendrie.Hemerology.IMonth
Calendrie.Hemerology.IMonth.Calendar.get -> Calendrie.Hemerology.Calendar!
Calendrie.Hemerology.IMonth.Century.get -> int
Calendrie.Hemerology.IMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IMonth.CountElapsedDaysInYear() -> int
Calendrie.Hemerology.IMonth.CountElapsedMonthsInYear() -> int
Calendrie.Hemerology.IMonth.CountRemainingDaysInYear() -> int
Calendrie.Hemerology.IMonth.CountRemainingMonthsInYear() -> int
Calendrie.Hemerology.IMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Hemerology.IMonth.IsIntercalary.get -> bool
Calendrie.Hemerology.IMonth.Month.get -> int
Calendrie.Hemerology.IMonth.MonthsSinceEpoch.get -> int
Calendrie.Hemerology.IMonth.Year.get -> int
Calendrie.Hemerology.IMonth.YearOfCentury.get -> int
Calendrie.Hemerology.IMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IMonth<TSelf>
Calendrie.Hemerology.IMonth<TSelf>.Create(int year, int month) -> TSelf
Calendrie.Hemerology.IMonth<TSelf>.FromMonthsSinceEpoch(int monthsSinceEpoch) -> TSelf
Calendrie.Hemerology.IMonth<TSelf>.TryCreate(int year, int month, out TSelf? result) -> bool
Calendrie.Hemerology.IMonthBase<TSelf>
Calendrie.Hemerology.IMonthBase<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IMonthBase<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IMonthBase<TSelf>.operator -(TSelf left, TSelf right) -> int
Calendrie.Hemerology.IMonthBase<TSelf>.PlusYears(int years, out int roundoff) -> TSelf
Calendrie.Hemerology.IMonthBase<TSelf>.WithMonth(int newMonth) -> TSelf
Calendrie.Hemerology.IMonthBase<TSelf>.WithYear(int newYear) -> TSelf
Calendrie.Hemerology.IMonthFieldMath<TSelf>
Calendrie.Hemerology.IMonthFieldMath<TSelf>.CountMonthsSince(TSelf other) -> int
Calendrie.Hemerology.IMonthFieldMath<TSelf>.NextMonth() -> TSelf
Calendrie.Hemerology.IMonthFieldMath<TSelf>.PlusMonths(int months) -> TSelf
Calendrie.Hemerology.IMonthFieldMath<TSelf>.PreviousMonth() -> TSelf
Calendrie.Hemerology.IMonthSegment<TMonth>
Calendrie.Hemerology.IMonthSegment<TMonth>.CountMonths() -> int
Calendrie.Hemerology.IMonthSegment<TMonth>.EnumerateMonths() -> System.Collections.Generic.IEnumerable<TMonth>!
Calendrie.Hemerology.IMonthSegment<TMonth>.MaxMonth.get -> TMonth
Calendrie.Hemerology.IMonthSegment<TMonth>.MinMonth.get -> TMonth
Calendrie.Hemerology.IMonthSegment<TMonth>.ToMonthRange() -> Calendrie.Core.Intervals.Range<TMonth>
Calendrie.Hemerology.IYear
Calendrie.Hemerology.IYear.Calendar.get -> Calendrie.Hemerology.Calendar!
Calendrie.Hemerology.IYear.Century.get -> int
Calendrie.Hemerology.IYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IYear.IsLeap.get -> bool
Calendrie.Hemerology.IYear.Year.get -> int
Calendrie.Hemerology.IYear.YearOfCentury.get -> int
Calendrie.Hemerology.IYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IYear.YearsSinceEpoch.get -> int
Calendrie.Hemerology.IYear<TSelf>
Calendrie.Hemerology.IYear<TSelf>.Create(int year) -> TSelf
Calendrie.Hemerology.IYear<TSelf>.TryCreate(int year, out TSelf? result) -> bool
Calendrie.Hemerology.IYearBase<TSelf>
Calendrie.Hemerology.IYearBase<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IYearBase<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IYearBase<TSelf>.operator -(TSelf left, TSelf right) -> int
Calendrie.Hemerology.IYearFieldMath<TSelf>
Calendrie.Hemerology.IYearFieldMath<TSelf>.CountYearsSince(TSelf other) -> int
Calendrie.Hemerology.IYearFieldMath<TSelf>.NextYear() -> TSelf
Calendrie.Hemerology.IYearFieldMath<TSelf>.PlusYears(int years) -> TSelf
Calendrie.Hemerology.IYearFieldMath<TSelf>.PreviousYear() -> TSelf
Calendrie.Horology.IClock
Calendrie.Horology.IClock.Today() -> Calendrie.DayNumber
Calendrie.Horology.LocalSystemClock
Calendrie.Horology.LocalSystemClock.Today() -> Calendrie.DayNumber
Calendrie.Horology.UtcSystemClock
Calendrie.Horology.UtcSystemClock.Today() -> Calendrie.DayNumber
Calendrie.MonthParts
Calendrie.MonthParts.CompareTo(Calendrie.MonthParts other) -> int
Calendrie.MonthParts.Month.get -> int
Calendrie.MonthParts.Month.init -> void
Calendrie.MonthParts.MonthParts() -> void
Calendrie.MonthParts.MonthParts(int Year, int Month) -> void
Calendrie.MonthParts.Year.get -> int
Calendrie.MonthParts.Year.init -> void
Calendrie.Ord
Calendrie.Ord.Add(int num) -> Calendrie.Ord
Calendrie.Ord.CompareTo(Calendrie.Ord other) -> int
Calendrie.Ord.Deconstruct(out int pos, out bool afterZeroth) -> void
Calendrie.Ord.Decrement() -> Calendrie.Ord
Calendrie.Ord.Equals(Calendrie.Ord other) -> bool
Calendrie.Ord.Increment() -> Calendrie.Ord
Calendrie.Ord.Negate() -> Calendrie.Ord
Calendrie.Ord.Ord() -> void
Calendrie.Ord.Rank.get -> int
Calendrie.Ord.Subtract(Calendrie.Ord other) -> int
Calendrie.Ord.ToInt32() -> int
Calendrie.OrdinalParts
Calendrie.OrdinalParts.CompareTo(Calendrie.OrdinalParts other) -> int
Calendrie.OrdinalParts.DayOfYear.get -> int
Calendrie.OrdinalParts.DayOfYear.init -> void
Calendrie.OrdinalParts.OrdinalParts() -> void
Calendrie.OrdinalParts.OrdinalParts(int Year, int DayOfYear) -> void
Calendrie.OrdinalParts.Year.get -> int
Calendrie.OrdinalParts.Year.init -> void
Calendrie.Systems.Armenian13Calendar
Calendrie.Systems.Armenian13Calendar.Armenian13Calendar() -> void
Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Armenian13Date() -> void
Calendrie.Systems.Armenian13Date.Armenian13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Armenian13Date.Armenian13Date(int year, int month, int day) -> void
Calendrie.Systems.Armenian13Date.Century.get -> int
Calendrie.Systems.Armenian13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Date.CompareTo(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountDaysSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Armenian13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Armenian13Date.CountMonthsSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Armenian13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Armenian13Date.CountWeeksSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountYearsSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.Day.get -> int
Calendrie.Systems.Armenian13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Armenian13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Armenian13Date.DayOfYear.get -> int
Calendrie.Systems.Armenian13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Armenian13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Armenian13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Armenian13Date.Equals(Calendrie.Systems.Armenian13Date other) -> bool
Calendrie.Systems.Armenian13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Armenian13Date.IsSupplementary.get -> bool
Calendrie.Systems.Armenian13Date.Month.get -> int
Calendrie.Systems.Armenian13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.NextDay() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.NextWeek() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusDays(int days) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusMonths(int months) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusWeeks(int weeks) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusYears(int years) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PreviousDay() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PreviousWeek() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.Armenian13Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.Armenian13Date.WithDay(int newDay) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithMonth(int newMonth) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithYear(int newYear) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Year.get -> int
Calendrie.Systems.Armenian13Date.YearOfCentury.get -> int
Calendrie.Systems.Armenian13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.Armenian13Month() -> void
Calendrie.Systems.Armenian13Month.Armenian13Month(int year, int month) -> void
Calendrie.Systems.Armenian13Month.Century.get -> int
Calendrie.Systems.Armenian13Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Month.CompareTo(Calendrie.Systems.Armenian13Month other) -> int
Calendrie.Systems.Armenian13Month.Contains(Calendrie.Systems.Armenian13Date date) -> bool
Calendrie.Systems.Armenian13Month.CountDays() -> int
Calendrie.Systems.Armenian13Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.Armenian13Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.Armenian13Month.CountMonthsSince(Calendrie.Systems.Armenian13Month other) -> int
Calendrie.Systems.Armenian13Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.Armenian13Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.Armenian13Month.CountYearsSince(Calendrie.Systems.Armenian13Month other) -> int
Calendrie.Systems.Armenian13Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.Armenian13Month.Equals(Calendrie.Systems.Armenian13Month other) -> bool
Calendrie.Systems.Armenian13Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Month.IsVirtual.get -> bool
Calendrie.Systems.Armenian13Month.MaxDay.get -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Month.MinDay.get -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Month.Month.get -> int
Calendrie.Systems.Armenian13Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.Armenian13Month.NextMonth() -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.PlusMonths(int months) -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.PlusYears(int years) -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.PreviousMonth() -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Armenian13Date>!
Calendrie.Systems.Armenian13Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Armenian13Date>
Calendrie.Systems.Armenian13Month.WithMonth(int newMonth) -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.WithYear(int newYear) -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Month.Year.get -> int
Calendrie.Systems.Armenian13Month.YearOfCentury.get -> int
Calendrie.Systems.Armenian13Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Year
Calendrie.Systems.Armenian13Year.Armenian13Year() -> void
Calendrie.Systems.Armenian13Year.Armenian13Year(int year) -> void
Calendrie.Systems.Armenian13Year.Century.get -> int
Calendrie.Systems.Armenian13Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Year.CompareTo(Calendrie.Systems.Armenian13Year other) -> int
Calendrie.Systems.Armenian13Year.Contains(Calendrie.Systems.Armenian13Date date) -> bool
Calendrie.Systems.Armenian13Year.Contains(Calendrie.Systems.Armenian13Month month) -> bool
Calendrie.Systems.Armenian13Year.CountDays() -> int
Calendrie.Systems.Armenian13Year.CountYearsSince(Calendrie.Systems.Armenian13Year other) -> int
Calendrie.Systems.Armenian13Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Armenian13Date>!
Calendrie.Systems.Armenian13Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Armenian13Month>!
Calendrie.Systems.Armenian13Year.Equals(Calendrie.Systems.Armenian13Year other) -> bool
Calendrie.Systems.Armenian13Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Year.GetMonthOfYear(int month) -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Year.MaxDay.get -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Year.MaxMonth.get -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Year.MinDay.get -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Year.MinMonth.get -> Calendrie.Systems.Armenian13Month
Calendrie.Systems.Armenian13Year.NextYear() -> Calendrie.Systems.Armenian13Year
Calendrie.Systems.Armenian13Year.PlusYears(int years) -> Calendrie.Systems.Armenian13Year
Calendrie.Systems.Armenian13Year.PreviousYear() -> Calendrie.Systems.Armenian13Year
Calendrie.Systems.Armenian13Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Armenian13Date>
Calendrie.Systems.Armenian13Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Armenian13Month>
Calendrie.Systems.Armenian13Year.Year.get -> int
Calendrie.Systems.Armenian13Year.YearOfCentury.get -> int
Calendrie.Systems.Armenian13Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Year.YearsSinceEpoch.get -> int
Calendrie.Systems.ArmenianCalendar
Calendrie.Systems.ArmenianCalendar.ArmenianCalendar() -> void
Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.ArmenianDate() -> void
Calendrie.Systems.ArmenianDate.ArmenianDate(int year, int dayOfYear) -> void
Calendrie.Systems.ArmenianDate.ArmenianDate(int year, int month, int day) -> void
Calendrie.Systems.ArmenianDate.Century.get -> int
Calendrie.Systems.ArmenianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianDate.CompareTo(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountDaysSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.ArmenianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.ArmenianDate.CountMonthsSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.ArmenianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.ArmenianDate.CountWeeksSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountYearsSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.Day.get -> int
Calendrie.Systems.ArmenianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.ArmenianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.ArmenianDate.DayOfYear.get -> int
Calendrie.Systems.ArmenianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.ArmenianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.ArmenianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.ArmenianDate.Equals(Calendrie.Systems.ArmenianDate other) -> bool
Calendrie.Systems.ArmenianDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.ArmenianDate.IsSupplementary.get -> bool
Calendrie.Systems.ArmenianDate.Month.get -> int
Calendrie.Systems.ArmenianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.NextDay() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.NextWeek() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusDays(int days) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusMonths(int months) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusWeeks(int weeks) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusYears(int years) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PreviousDay() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PreviousWeek() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.ArmenianDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.ArmenianDate.WithDay(int newDay) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithMonth(int newMonth) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithYear(int newYear) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.Year.get -> int
Calendrie.Systems.ArmenianDate.YearOfCentury.get -> int
Calendrie.Systems.ArmenianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.ArmenianMonth() -> void
Calendrie.Systems.ArmenianMonth.ArmenianMonth(int year, int month) -> void
Calendrie.Systems.ArmenianMonth.Century.get -> int
Calendrie.Systems.ArmenianMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianMonth.CompareTo(Calendrie.Systems.ArmenianMonth other) -> int
Calendrie.Systems.ArmenianMonth.Contains(Calendrie.Systems.ArmenianDate date) -> bool
Calendrie.Systems.ArmenianMonth.CountDays() -> int
Calendrie.Systems.ArmenianMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.ArmenianMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.ArmenianMonth.CountMonthsSince(Calendrie.Systems.ArmenianMonth other) -> int
Calendrie.Systems.ArmenianMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.ArmenianMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.ArmenianMonth.CountYearsSince(Calendrie.Systems.ArmenianMonth other) -> int
Calendrie.Systems.ArmenianMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.ArmenianMonth.Equals(Calendrie.Systems.ArmenianMonth other) -> bool
Calendrie.Systems.ArmenianMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianMonth.MaxDay.get -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianMonth.MinDay.get -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianMonth.Month.get -> int
Calendrie.Systems.ArmenianMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.ArmenianMonth.NextMonth() -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.PlusMonths(int months) -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.PlusYears(int years) -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.PreviousMonth() -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.ArmenianDate>!
Calendrie.Systems.ArmenianMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.ArmenianDate>
Calendrie.Systems.ArmenianMonth.WithMonth(int newMonth) -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.WithYear(int newYear) -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianMonth.Year.get -> int
Calendrie.Systems.ArmenianMonth.YearOfCentury.get -> int
Calendrie.Systems.ArmenianMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianYear
Calendrie.Systems.ArmenianYear.ArmenianYear() -> void
Calendrie.Systems.ArmenianYear.ArmenianYear(int year) -> void
Calendrie.Systems.ArmenianYear.Century.get -> int
Calendrie.Systems.ArmenianYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianYear.CompareTo(Calendrie.Systems.ArmenianYear other) -> int
Calendrie.Systems.ArmenianYear.Contains(Calendrie.Systems.ArmenianDate date) -> bool
Calendrie.Systems.ArmenianYear.Contains(Calendrie.Systems.ArmenianMonth month) -> bool
Calendrie.Systems.ArmenianYear.CountDays() -> int
Calendrie.Systems.ArmenianYear.CountYearsSince(Calendrie.Systems.ArmenianYear other) -> int
Calendrie.Systems.ArmenianYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.ArmenianDate>!
Calendrie.Systems.ArmenianYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.ArmenianMonth>!
Calendrie.Systems.ArmenianYear.Equals(Calendrie.Systems.ArmenianYear other) -> bool
Calendrie.Systems.ArmenianYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianYear.GetMonthOfYear(int month) -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianYear.MaxDay.get -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianYear.MaxMonth.get -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianYear.MinDay.get -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianYear.MinMonth.get -> Calendrie.Systems.ArmenianMonth
Calendrie.Systems.ArmenianYear.NextYear() -> Calendrie.Systems.ArmenianYear
Calendrie.Systems.ArmenianYear.PlusYears(int years) -> Calendrie.Systems.ArmenianYear
Calendrie.Systems.ArmenianYear.PreviousYear() -> Calendrie.Systems.ArmenianYear
Calendrie.Systems.ArmenianYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.ArmenianDate>
Calendrie.Systems.ArmenianYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.ArmenianMonth>
Calendrie.Systems.ArmenianYear.Year.get -> int
Calendrie.Systems.ArmenianYear.YearOfCentury.get -> int
Calendrie.Systems.ArmenianYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianYear.YearsSinceEpoch.get -> int
Calendrie.Systems.CivilCalendar
Calendrie.Systems.CivilCalendar.CivilCalendar() -> void
Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Century.get -> int
Calendrie.Systems.CivilDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilDate.CivilDate() -> void
Calendrie.Systems.CivilDate.CivilDate(int year, int dayOfYear) -> void
Calendrie.Systems.CivilDate.CivilDate(int year, int month, int day) -> void
Calendrie.Systems.CivilDate.CompareTo(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountDaysSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.CivilDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.CivilDate.CountMonthsSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.CivilDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.CivilDate.CountWeeksSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountYearsSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.Day.get -> int
Calendrie.Systems.CivilDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.CivilDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.CivilDate.DayOfYear.get -> int
Calendrie.Systems.CivilDate.DaysSinceZero.get -> int
Calendrie.Systems.CivilDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.CivilDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.CivilDate.Equals(Calendrie.Systems.CivilDate other) -> bool
Calendrie.Systems.CivilDate.IsIntercalary.get -> bool
Calendrie.Systems.CivilDate.Month.get -> int
Calendrie.Systems.CivilDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.NextDay() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.NextWeek() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusDays(int days) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusMonths(int months) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusWeeks(int weeks) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusYears(int years) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PreviousDay() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PreviousWeek() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.CivilDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.CivilDate.WithDay(int newDay) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.WithMonth(int newMonth) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.WithYear(int newYear) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Year.get -> int
Calendrie.Systems.CivilDate.YearOfCentury.get -> int
Calendrie.Systems.CivilDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.Century.get -> int
Calendrie.Systems.CivilMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilMonth.CivilMonth() -> void
Calendrie.Systems.CivilMonth.CivilMonth(int year, int month) -> void
Calendrie.Systems.CivilMonth.CompareTo(Calendrie.Systems.CivilMonth other) -> int
Calendrie.Systems.CivilMonth.Contains(Calendrie.Systems.CivilDate date) -> bool
Calendrie.Systems.CivilMonth.CountDays() -> int
Calendrie.Systems.CivilMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.CivilMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.CivilMonth.CountMonthsSince(Calendrie.Systems.CivilMonth other) -> int
Calendrie.Systems.CivilMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.CivilMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.CivilMonth.CountYearsSince(Calendrie.Systems.CivilMonth other) -> int
Calendrie.Systems.CivilMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.CivilMonth.Equals(Calendrie.Systems.CivilMonth other) -> bool
Calendrie.Systems.CivilMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilMonth.MaxDay.get -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilMonth.MinDay.get -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilMonth.Month.get -> int
Calendrie.Systems.CivilMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.CivilMonth.NextMonth() -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.PlusMonths(int months) -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.PlusYears(int years) -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.PreviousMonth() -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.CivilDate>!
Calendrie.Systems.CivilMonth.ToGregorianMonth() -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.CivilMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.CivilDate>
Calendrie.Systems.CivilMonth.WithMonth(int newMonth) -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.WithYear(int newYear) -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilMonth.Year.get -> int
Calendrie.Systems.CivilMonth.YearOfCentury.get -> int
Calendrie.Systems.CivilMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilYear
Calendrie.Systems.CivilYear.Century.get -> int
Calendrie.Systems.CivilYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilYear.CivilYear() -> void
Calendrie.Systems.CivilYear.CivilYear(int year) -> void
Calendrie.Systems.CivilYear.CompareTo(Calendrie.Systems.CivilYear other) -> int
Calendrie.Systems.CivilYear.Contains(Calendrie.Systems.CivilDate date) -> bool
Calendrie.Systems.CivilYear.Contains(Calendrie.Systems.CivilMonth month) -> bool
Calendrie.Systems.CivilYear.CountDays() -> int
Calendrie.Systems.CivilYear.CountYearsSince(Calendrie.Systems.CivilYear other) -> int
Calendrie.Systems.CivilYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.CivilDate>!
Calendrie.Systems.CivilYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.CivilMonth>!
Calendrie.Systems.CivilYear.Equals(Calendrie.Systems.CivilYear other) -> bool
Calendrie.Systems.CivilYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilYear.GetMonthOfYear(int month) -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilYear.IsLeap.get -> bool
Calendrie.Systems.CivilYear.MaxDay.get -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilYear.MaxMonth.get -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilYear.MinDay.get -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilYear.MinMonth.get -> Calendrie.Systems.CivilMonth
Calendrie.Systems.CivilYear.NextYear() -> Calendrie.Systems.CivilYear
Calendrie.Systems.CivilYear.PlusYears(int years) -> Calendrie.Systems.CivilYear
Calendrie.Systems.CivilYear.PreviousYear() -> Calendrie.Systems.CivilYear
Calendrie.Systems.CivilYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.CivilDate>
Calendrie.Systems.CivilYear.ToGregorianYear() -> Calendrie.Systems.GregorianYear
Calendrie.Systems.CivilYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.CivilMonth>
Calendrie.Systems.CivilYear.Year.get -> int
Calendrie.Systems.CivilYear.YearOfCentury.get -> int
Calendrie.Systems.CivilYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilYear.YearsSinceEpoch.get -> int
Calendrie.Systems.Coptic13Calendar
Calendrie.Systems.Coptic13Calendar.Coptic13Calendar() -> void
Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Century.get -> int
Calendrie.Systems.Coptic13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Date.CompareTo(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.Coptic13Date() -> void
Calendrie.Systems.Coptic13Date.Coptic13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Coptic13Date.Coptic13Date(int year, int month, int day) -> void
Calendrie.Systems.Coptic13Date.CountDaysSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Coptic13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Coptic13Date.CountMonthsSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Coptic13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Coptic13Date.CountWeeksSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.CountYearsSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.Day.get -> int
Calendrie.Systems.Coptic13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Coptic13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Coptic13Date.DayOfYear.get -> int
Calendrie.Systems.Coptic13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Coptic13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Coptic13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Coptic13Date.Equals(Calendrie.Systems.Coptic13Date other) -> bool
Calendrie.Systems.Coptic13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Coptic13Date.IsIntercalary.get -> bool
Calendrie.Systems.Coptic13Date.IsSupplementary.get -> bool
Calendrie.Systems.Coptic13Date.Month.get -> int
Calendrie.Systems.Coptic13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.NextDay() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.NextWeek() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusDays(int days) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusMonths(int months) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusWeeks(int weeks) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusYears(int years) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PreviousDay() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PreviousWeek() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.Coptic13Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.Coptic13Date.WithDay(int newDay) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithMonth(int newMonth) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithYear(int newYear) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Year.get -> int
Calendrie.Systems.Coptic13Date.YearOfCentury.get -> int
Calendrie.Systems.Coptic13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.Century.get -> int
Calendrie.Systems.Coptic13Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Month.CompareTo(Calendrie.Systems.Coptic13Month other) -> int
Calendrie.Systems.Coptic13Month.Contains(Calendrie.Systems.Coptic13Date date) -> bool
Calendrie.Systems.Coptic13Month.Coptic13Month() -> void
Calendrie.Systems.Coptic13Month.Coptic13Month(int year, int month) -> void
Calendrie.Systems.Coptic13Month.CountDays() -> int
Calendrie.Systems.Coptic13Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.Coptic13Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.Coptic13Month.CountMonthsSince(Calendrie.Systems.Coptic13Month other) -> int
Calendrie.Systems.Coptic13Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.Coptic13Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.Coptic13Month.CountYearsSince(Calendrie.Systems.Coptic13Month other) -> int
Calendrie.Systems.Coptic13Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.Coptic13Month.Equals(Calendrie.Systems.Coptic13Month other) -> bool
Calendrie.Systems.Coptic13Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Month.IsVirtual.get -> bool
Calendrie.Systems.Coptic13Month.MaxDay.get -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Month.MinDay.get -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Month.Month.get -> int
Calendrie.Systems.Coptic13Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.Coptic13Month.NextMonth() -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.PlusMonths(int months) -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.PlusYears(int years) -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.PreviousMonth() -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Coptic13Date>!
Calendrie.Systems.Coptic13Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Coptic13Date>
Calendrie.Systems.Coptic13Month.WithMonth(int newMonth) -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.WithYear(int newYear) -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Month.Year.get -> int
Calendrie.Systems.Coptic13Month.YearOfCentury.get -> int
Calendrie.Systems.Coptic13Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Year
Calendrie.Systems.Coptic13Year.Century.get -> int
Calendrie.Systems.Coptic13Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Year.CompareTo(Calendrie.Systems.Coptic13Year other) -> int
Calendrie.Systems.Coptic13Year.Contains(Calendrie.Systems.Coptic13Date date) -> bool
Calendrie.Systems.Coptic13Year.Contains(Calendrie.Systems.Coptic13Month month) -> bool
Calendrie.Systems.Coptic13Year.Coptic13Year() -> void
Calendrie.Systems.Coptic13Year.Coptic13Year(int year) -> void
Calendrie.Systems.Coptic13Year.CountDays() -> int
Calendrie.Systems.Coptic13Year.CountYearsSince(Calendrie.Systems.Coptic13Year other) -> int
Calendrie.Systems.Coptic13Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Coptic13Date>!
Calendrie.Systems.Coptic13Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Coptic13Month>!
Calendrie.Systems.Coptic13Year.Equals(Calendrie.Systems.Coptic13Year other) -> bool
Calendrie.Systems.Coptic13Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Year.GetMonthOfYear(int month) -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Year.IsLeap.get -> bool
Calendrie.Systems.Coptic13Year.MaxDay.get -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Year.MaxMonth.get -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Year.MinDay.get -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Year.MinMonth.get -> Calendrie.Systems.Coptic13Month
Calendrie.Systems.Coptic13Year.NextYear() -> Calendrie.Systems.Coptic13Year
Calendrie.Systems.Coptic13Year.PlusYears(int years) -> Calendrie.Systems.Coptic13Year
Calendrie.Systems.Coptic13Year.PreviousYear() -> Calendrie.Systems.Coptic13Year
Calendrie.Systems.Coptic13Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Coptic13Date>
Calendrie.Systems.Coptic13Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Coptic13Month>
Calendrie.Systems.Coptic13Year.Year.get -> int
Calendrie.Systems.Coptic13Year.YearOfCentury.get -> int
Calendrie.Systems.Coptic13Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Year.YearsSinceEpoch.get -> int
Calendrie.Systems.CopticCalendar
Calendrie.Systems.CopticCalendar.CopticCalendar() -> void
Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Century.get -> int
Calendrie.Systems.CopticDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticDate.CompareTo(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CopticDate() -> void
Calendrie.Systems.CopticDate.CopticDate(int year, int dayOfYear) -> void
Calendrie.Systems.CopticDate.CopticDate(int year, int month, int day) -> void
Calendrie.Systems.CopticDate.CountDaysSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.CopticDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.CopticDate.CountMonthsSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.CopticDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.CopticDate.CountWeeksSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CountYearsSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.Day.get -> int
Calendrie.Systems.CopticDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.CopticDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.CopticDate.DayOfYear.get -> int
Calendrie.Systems.CopticDate.DaysSinceEpoch.get -> int
Calendrie.Systems.CopticDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.CopticDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.CopticDate.Equals(Calendrie.Systems.CopticDate other) -> bool
Calendrie.Systems.CopticDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.CopticDate.IsIntercalary.get -> bool
Calendrie.Systems.CopticDate.IsSupplementary.get -> bool
Calendrie.Systems.CopticDate.Month.get -> int
Calendrie.Systems.CopticDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.NextDay() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.NextWeek() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusDays(int days) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusMonths(int months) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusWeeks(int weeks) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusYears(int years) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PreviousDay() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PreviousWeek() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.CopticDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.CopticDate.WithDay(int newDay) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithMonth(int newMonth) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithYear(int newYear) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Year.get -> int
Calendrie.Systems.CopticDate.YearOfCentury.get -> int
Calendrie.Systems.CopticDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.Century.get -> int
Calendrie.Systems.CopticMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticMonth.CompareTo(Calendrie.Systems.CopticMonth other) -> int
Calendrie.Systems.CopticMonth.Contains(Calendrie.Systems.CopticDate date) -> bool
Calendrie.Systems.CopticMonth.CopticMonth() -> void
Calendrie.Systems.CopticMonth.CopticMonth(int year, int month) -> void
Calendrie.Systems.CopticMonth.CountDays() -> int
Calendrie.Systems.CopticMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.CopticMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.CopticMonth.CountMonthsSince(Calendrie.Systems.CopticMonth other) -> int
Calendrie.Systems.CopticMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.CopticMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.CopticMonth.CountYearsSince(Calendrie.Systems.CopticMonth other) -> int
Calendrie.Systems.CopticMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.CopticMonth.Equals(Calendrie.Systems.CopticMonth other) -> bool
Calendrie.Systems.CopticMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticMonth.MaxDay.get -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticMonth.MinDay.get -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticMonth.Month.get -> int
Calendrie.Systems.CopticMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.CopticMonth.NextMonth() -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.PlusMonths(int months) -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.PlusYears(int years) -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.PreviousMonth() -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.CopticDate>!
Calendrie.Systems.CopticMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.CopticDate>
Calendrie.Systems.CopticMonth.WithMonth(int newMonth) -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.WithYear(int newYear) -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticMonth.Year.get -> int
Calendrie.Systems.CopticMonth.YearOfCentury.get -> int
Calendrie.Systems.CopticMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticYear
Calendrie.Systems.CopticYear.Century.get -> int
Calendrie.Systems.CopticYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticYear.CompareTo(Calendrie.Systems.CopticYear other) -> int
Calendrie.Systems.CopticYear.Contains(Calendrie.Systems.CopticDate date) -> bool
Calendrie.Systems.CopticYear.Contains(Calendrie.Systems.CopticMonth month) -> bool
Calendrie.Systems.CopticYear.CopticYear() -> void
Calendrie.Systems.CopticYear.CopticYear(int year) -> void
Calendrie.Systems.CopticYear.CountDays() -> int
Calendrie.Systems.CopticYear.CountYearsSince(Calendrie.Systems.CopticYear other) -> int
Calendrie.Systems.CopticYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.CopticDate>!
Calendrie.Systems.CopticYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.CopticMonth>!
Calendrie.Systems.CopticYear.Equals(Calendrie.Systems.CopticYear other) -> bool
Calendrie.Systems.CopticYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticYear.GetMonthOfYear(int month) -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticYear.IsLeap.get -> bool
Calendrie.Systems.CopticYear.MaxDay.get -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticYear.MaxMonth.get -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticYear.MinDay.get -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticYear.MinMonth.get -> Calendrie.Systems.CopticMonth
Calendrie.Systems.CopticYear.NextYear() -> Calendrie.Systems.CopticYear
Calendrie.Systems.CopticYear.PlusYears(int years) -> Calendrie.Systems.CopticYear
Calendrie.Systems.CopticYear.PreviousYear() -> Calendrie.Systems.CopticYear
Calendrie.Systems.CopticYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.CopticDate>
Calendrie.Systems.CopticYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.CopticMonth>
Calendrie.Systems.CopticYear.Year.get -> int
Calendrie.Systems.CopticYear.YearOfCentury.get -> int
Calendrie.Systems.CopticYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticYear.YearsSinceEpoch.get -> int
Calendrie.Systems.Egyptian13Calendar
Calendrie.Systems.Egyptian13Calendar.Egyptian13Calendar() -> void
Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.Century.get -> int
Calendrie.Systems.Egyptian13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Egyptian13Date.CompareTo(Calendrie.Systems.Egyptian13Date other) -> int
Calendrie.Systems.Egyptian13Date.CountDaysSince(Calendrie.Systems.Egyptian13Date other) -> int
Calendrie.Systems.Egyptian13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Egyptian13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Egyptian13Date.CountMonthsSince(Calendrie.Systems.Egyptian13Date other) -> int
Calendrie.Systems.Egyptian13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Egyptian13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Egyptian13Date.CountWeeksSince(Calendrie.Systems.Egyptian13Date other) -> int
Calendrie.Systems.Egyptian13Date.CountYearsSince(Calendrie.Systems.Egyptian13Date other) -> int
Calendrie.Systems.Egyptian13Date.Day.get -> int
Calendrie.Systems.Egyptian13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Egyptian13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Egyptian13Date.DayOfYear.get -> int
Calendrie.Systems.Egyptian13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Egyptian13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Egyptian13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Egyptian13Date.Egyptian13Date() -> void
Calendrie.Systems.Egyptian13Date.Egyptian13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Egyptian13Date.Egyptian13Date(int year, int month, int day) -> void
Calendrie.Systems.Egyptian13Date.Equals(Calendrie.Systems.Egyptian13Date other) -> bool
Calendrie.Systems.Egyptian13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Egyptian13Date.IsSupplementary.get -> bool
Calendrie.Systems.Egyptian13Date.Month.get -> int
Calendrie.Systems.Egyptian13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.NextDay() -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.NextWeek() -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PlusDays(int days) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PlusMonths(int months) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PlusWeeks(int weeks) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PlusYears(int years) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PreviousDay() -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.PreviousWeek() -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.Egyptian13Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.Egyptian13Date.WithDay(int newDay) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.WithMonth(int newMonth) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.WithYear(int newYear) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Date.Year.get -> int
Calendrie.Systems.Egyptian13Date.YearOfCentury.get -> int
Calendrie.Systems.Egyptian13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.Century.get -> int
Calendrie.Systems.Egyptian13Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Egyptian13Month.CompareTo(Calendrie.Systems.Egyptian13Month other) -> int
Calendrie.Systems.Egyptian13Month.Contains(Calendrie.Systems.Egyptian13Date date) -> bool
Calendrie.Systems.Egyptian13Month.CountDays() -> int
Calendrie.Systems.Egyptian13Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.Egyptian13Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.Egyptian13Month.CountMonthsSince(Calendrie.Systems.Egyptian13Month other) -> int
Calendrie.Systems.Egyptian13Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.Egyptian13Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.Egyptian13Month.CountYearsSince(Calendrie.Systems.Egyptian13Month other) -> int
Calendrie.Systems.Egyptian13Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.Egyptian13Month.Egyptian13Month() -> void
Calendrie.Systems.Egyptian13Month.Egyptian13Month(int year, int month) -> void
Calendrie.Systems.Egyptian13Month.Equals(Calendrie.Systems.Egyptian13Month other) -> bool
Calendrie.Systems.Egyptian13Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Month.IsVirtual.get -> bool
Calendrie.Systems.Egyptian13Month.MaxDay.get -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Month.MinDay.get -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Month.Month.get -> int
Calendrie.Systems.Egyptian13Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.Egyptian13Month.NextMonth() -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.PlusMonths(int months) -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.PlusYears(int years) -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.PreviousMonth() -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Egyptian13Date>!
Calendrie.Systems.Egyptian13Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Egyptian13Date>
Calendrie.Systems.Egyptian13Month.WithMonth(int newMonth) -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.WithYear(int newYear) -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Month.Year.get -> int
Calendrie.Systems.Egyptian13Month.YearOfCentury.get -> int
Calendrie.Systems.Egyptian13Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Egyptian13Year
Calendrie.Systems.Egyptian13Year.Century.get -> int
Calendrie.Systems.Egyptian13Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Egyptian13Year.CompareTo(Calendrie.Systems.Egyptian13Year other) -> int
Calendrie.Systems.Egyptian13Year.Contains(Calendrie.Systems.Egyptian13Date date) -> bool
Calendrie.Systems.Egyptian13Year.Contains(Calendrie.Systems.Egyptian13Month month) -> bool
Calendrie.Systems.Egyptian13Year.CountDays() -> int
Calendrie.Systems.Egyptian13Year.CountYearsSince(Calendrie.Systems.Egyptian13Year other) -> int
Calendrie.Systems.Egyptian13Year.Egyptian13Year() -> void
Calendrie.Systems.Egyptian13Year.Egyptian13Year(int year) -> void
Calendrie.Systems.Egyptian13Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Egyptian13Date>!
Calendrie.Systems.Egyptian13Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Egyptian13Month>!
Calendrie.Systems.Egyptian13Year.Equals(Calendrie.Systems.Egyptian13Year other) -> bool
Calendrie.Systems.Egyptian13Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Year.GetMonthOfYear(int month) -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Year.MaxDay.get -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Year.MaxMonth.get -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Year.MinDay.get -> Calendrie.Systems.Egyptian13Date
Calendrie.Systems.Egyptian13Year.MinMonth.get -> Calendrie.Systems.Egyptian13Month
Calendrie.Systems.Egyptian13Year.NextYear() -> Calendrie.Systems.Egyptian13Year
Calendrie.Systems.Egyptian13Year.PlusYears(int years) -> Calendrie.Systems.Egyptian13Year
Calendrie.Systems.Egyptian13Year.PreviousYear() -> Calendrie.Systems.Egyptian13Year
Calendrie.Systems.Egyptian13Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Egyptian13Date>
Calendrie.Systems.Egyptian13Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Egyptian13Month>
Calendrie.Systems.Egyptian13Year.Year.get -> int
Calendrie.Systems.Egyptian13Year.YearOfCentury.get -> int
Calendrie.Systems.Egyptian13Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Egyptian13Year.YearsSinceEpoch.get -> int
Calendrie.Systems.EgyptianCalendar
Calendrie.Systems.EgyptianCalendar.EgyptianCalendar() -> void
Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.Century.get -> int
Calendrie.Systems.EgyptianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EgyptianDate.CompareTo(Calendrie.Systems.EgyptianDate other) -> int
Calendrie.Systems.EgyptianDate.CountDaysSince(Calendrie.Systems.EgyptianDate other) -> int
Calendrie.Systems.EgyptianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.EgyptianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.EgyptianDate.CountMonthsSince(Calendrie.Systems.EgyptianDate other) -> int
Calendrie.Systems.EgyptianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.EgyptianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.EgyptianDate.CountWeeksSince(Calendrie.Systems.EgyptianDate other) -> int
Calendrie.Systems.EgyptianDate.CountYearsSince(Calendrie.Systems.EgyptianDate other) -> int
Calendrie.Systems.EgyptianDate.Day.get -> int
Calendrie.Systems.EgyptianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.EgyptianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.EgyptianDate.DayOfYear.get -> int
Calendrie.Systems.EgyptianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.EgyptianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.EgyptianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.EgyptianDate.EgyptianDate() -> void
Calendrie.Systems.EgyptianDate.EgyptianDate(int year, int dayOfYear) -> void
Calendrie.Systems.EgyptianDate.EgyptianDate(int year, int month, int day) -> void
Calendrie.Systems.EgyptianDate.Equals(Calendrie.Systems.EgyptianDate other) -> bool
Calendrie.Systems.EgyptianDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.EgyptianDate.IsSupplementary.get -> bool
Calendrie.Systems.EgyptianDate.Month.get -> int
Calendrie.Systems.EgyptianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.NextDay() -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.NextWeek() -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PlusDays(int days) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PlusMonths(int months) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PlusWeeks(int weeks) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PlusYears(int years) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PreviousDay() -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.PreviousWeek() -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.EgyptianDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.EgyptianDate.WithDay(int newDay) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.WithMonth(int newMonth) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.WithYear(int newYear) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianDate.Year.get -> int
Calendrie.Systems.EgyptianDate.YearOfCentury.get -> int
Calendrie.Systems.EgyptianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.Century.get -> int
Calendrie.Systems.EgyptianMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EgyptianMonth.CompareTo(Calendrie.Systems.EgyptianMonth other) -> int
Calendrie.Systems.EgyptianMonth.Contains(Calendrie.Systems.EgyptianDate date) -> bool
Calendrie.Systems.EgyptianMonth.CountDays() -> int
Calendrie.Systems.EgyptianMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.EgyptianMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.EgyptianMonth.CountMonthsSince(Calendrie.Systems.EgyptianMonth other) -> int
Calendrie.Systems.EgyptianMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.EgyptianMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.EgyptianMonth.CountYearsSince(Calendrie.Systems.EgyptianMonth other) -> int
Calendrie.Systems.EgyptianMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.EgyptianMonth.EgyptianMonth() -> void
Calendrie.Systems.EgyptianMonth.EgyptianMonth(int year, int month) -> void
Calendrie.Systems.EgyptianMonth.Equals(Calendrie.Systems.EgyptianMonth other) -> bool
Calendrie.Systems.EgyptianMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianMonth.MaxDay.get -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianMonth.MinDay.get -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianMonth.Month.get -> int
Calendrie.Systems.EgyptianMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.EgyptianMonth.NextMonth() -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.PlusMonths(int months) -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.PlusYears(int years) -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.PreviousMonth() -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.EgyptianDate>!
Calendrie.Systems.EgyptianMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.EgyptianDate>
Calendrie.Systems.EgyptianMonth.WithMonth(int newMonth) -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.WithYear(int newYear) -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianMonth.Year.get -> int
Calendrie.Systems.EgyptianMonth.YearOfCentury.get -> int
Calendrie.Systems.EgyptianMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EgyptianYear
Calendrie.Systems.EgyptianYear.Century.get -> int
Calendrie.Systems.EgyptianYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EgyptianYear.CompareTo(Calendrie.Systems.EgyptianYear other) -> int
Calendrie.Systems.EgyptianYear.Contains(Calendrie.Systems.EgyptianDate date) -> bool
Calendrie.Systems.EgyptianYear.Contains(Calendrie.Systems.EgyptianMonth month) -> bool
Calendrie.Systems.EgyptianYear.CountDays() -> int
Calendrie.Systems.EgyptianYear.CountYearsSince(Calendrie.Systems.EgyptianYear other) -> int
Calendrie.Systems.EgyptianYear.EgyptianYear() -> void
Calendrie.Systems.EgyptianYear.EgyptianYear(int year) -> void
Calendrie.Systems.EgyptianYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.EgyptianDate>!
Calendrie.Systems.EgyptianYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.EgyptianMonth>!
Calendrie.Systems.EgyptianYear.Equals(Calendrie.Systems.EgyptianYear other) -> bool
Calendrie.Systems.EgyptianYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianYear.GetMonthOfYear(int month) -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianYear.MaxDay.get -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianYear.MaxMonth.get -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianYear.MinDay.get -> Calendrie.Systems.EgyptianDate
Calendrie.Systems.EgyptianYear.MinMonth.get -> Calendrie.Systems.EgyptianMonth
Calendrie.Systems.EgyptianYear.NextYear() -> Calendrie.Systems.EgyptianYear
Calendrie.Systems.EgyptianYear.PlusYears(int years) -> Calendrie.Systems.EgyptianYear
Calendrie.Systems.EgyptianYear.PreviousYear() -> Calendrie.Systems.EgyptianYear
Calendrie.Systems.EgyptianYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.EgyptianDate>
Calendrie.Systems.EgyptianYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.EgyptianMonth>
Calendrie.Systems.EgyptianYear.Year.get -> int
Calendrie.Systems.EgyptianYear.YearOfCentury.get -> int
Calendrie.Systems.EgyptianYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EgyptianYear.YearsSinceEpoch.get -> int
Calendrie.Systems.Ethiopic13Calendar
Calendrie.Systems.Ethiopic13Calendar.Ethiopic13Calendar() -> void
Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Century.get -> int
Calendrie.Systems.Ethiopic13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Date.CompareTo(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountDaysSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Ethiopic13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Ethiopic13Date.CountMonthsSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Ethiopic13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Ethiopic13Date.CountWeeksSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountYearsSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.Day.get -> int
Calendrie.Systems.Ethiopic13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Ethiopic13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Ethiopic13Date.DayOfYear.get -> int
Calendrie.Systems.Ethiopic13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Ethiopic13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Ethiopic13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Ethiopic13Date.Equals(Calendrie.Systems.Ethiopic13Date other) -> bool
Calendrie.Systems.Ethiopic13Date.Ethiopic13Date() -> void
Calendrie.Systems.Ethiopic13Date.Ethiopic13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Ethiopic13Date.Ethiopic13Date(int year, int month, int day) -> void
Calendrie.Systems.Ethiopic13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Ethiopic13Date.IsIntercalary.get -> bool
Calendrie.Systems.Ethiopic13Date.IsSupplementary.get -> bool
Calendrie.Systems.Ethiopic13Date.Month.get -> int
Calendrie.Systems.Ethiopic13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.NextDay() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.NextWeek() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusDays(int days) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusMonths(int months) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusWeeks(int weeks) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusYears(int years) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PreviousDay() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PreviousWeek() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.Ethiopic13Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.Ethiopic13Date.WithDay(int newDay) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithMonth(int newMonth) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithYear(int newYear) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Year.get -> int
Calendrie.Systems.Ethiopic13Date.YearOfCentury.get -> int
Calendrie.Systems.Ethiopic13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.Century.get -> int
Calendrie.Systems.Ethiopic13Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Month.CompareTo(Calendrie.Systems.Ethiopic13Month other) -> int
Calendrie.Systems.Ethiopic13Month.Contains(Calendrie.Systems.Ethiopic13Date date) -> bool
Calendrie.Systems.Ethiopic13Month.CountDays() -> int
Calendrie.Systems.Ethiopic13Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.Ethiopic13Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.Ethiopic13Month.CountMonthsSince(Calendrie.Systems.Ethiopic13Month other) -> int
Calendrie.Systems.Ethiopic13Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.Ethiopic13Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.Ethiopic13Month.CountYearsSince(Calendrie.Systems.Ethiopic13Month other) -> int
Calendrie.Systems.Ethiopic13Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.Ethiopic13Month.Equals(Calendrie.Systems.Ethiopic13Month other) -> bool
Calendrie.Systems.Ethiopic13Month.Ethiopic13Month() -> void
Calendrie.Systems.Ethiopic13Month.Ethiopic13Month(int year, int month) -> void
Calendrie.Systems.Ethiopic13Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Month.IsVirtual.get -> bool
Calendrie.Systems.Ethiopic13Month.MaxDay.get -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Month.MinDay.get -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Month.Month.get -> int
Calendrie.Systems.Ethiopic13Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.Ethiopic13Month.NextMonth() -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.PlusMonths(int months) -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.PlusYears(int years) -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.PreviousMonth() -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Ethiopic13Date>!
Calendrie.Systems.Ethiopic13Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Ethiopic13Date>
Calendrie.Systems.Ethiopic13Month.WithMonth(int newMonth) -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.WithYear(int newYear) -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Month.Year.get -> int
Calendrie.Systems.Ethiopic13Month.YearOfCentury.get -> int
Calendrie.Systems.Ethiopic13Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Year
Calendrie.Systems.Ethiopic13Year.Century.get -> int
Calendrie.Systems.Ethiopic13Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Year.CompareTo(Calendrie.Systems.Ethiopic13Year other) -> int
Calendrie.Systems.Ethiopic13Year.Contains(Calendrie.Systems.Ethiopic13Date date) -> bool
Calendrie.Systems.Ethiopic13Year.Contains(Calendrie.Systems.Ethiopic13Month month) -> bool
Calendrie.Systems.Ethiopic13Year.CountDays() -> int
Calendrie.Systems.Ethiopic13Year.CountYearsSince(Calendrie.Systems.Ethiopic13Year other) -> int
Calendrie.Systems.Ethiopic13Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Ethiopic13Date>!
Calendrie.Systems.Ethiopic13Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Ethiopic13Month>!
Calendrie.Systems.Ethiopic13Year.Equals(Calendrie.Systems.Ethiopic13Year other) -> bool
Calendrie.Systems.Ethiopic13Year.Ethiopic13Year() -> void
Calendrie.Systems.Ethiopic13Year.Ethiopic13Year(int year) -> void
Calendrie.Systems.Ethiopic13Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Year.GetMonthOfYear(int month) -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Year.IsLeap.get -> bool
Calendrie.Systems.Ethiopic13Year.MaxDay.get -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Year.MaxMonth.get -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Year.MinDay.get -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Year.MinMonth.get -> Calendrie.Systems.Ethiopic13Month
Calendrie.Systems.Ethiopic13Year.NextYear() -> Calendrie.Systems.Ethiopic13Year
Calendrie.Systems.Ethiopic13Year.PlusYears(int years) -> Calendrie.Systems.Ethiopic13Year
Calendrie.Systems.Ethiopic13Year.PreviousYear() -> Calendrie.Systems.Ethiopic13Year
Calendrie.Systems.Ethiopic13Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Ethiopic13Date>
Calendrie.Systems.Ethiopic13Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Ethiopic13Month>
Calendrie.Systems.Ethiopic13Year.Year.get -> int
Calendrie.Systems.Ethiopic13Year.YearOfCentury.get -> int
Calendrie.Systems.Ethiopic13Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Year.YearsSinceEpoch.get -> int
Calendrie.Systems.EthiopicCalendar
Calendrie.Systems.EthiopicCalendar.EthiopicCalendar() -> void
Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Century.get -> int
Calendrie.Systems.EthiopicDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicDate.CompareTo(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountDaysSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.EthiopicDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.EthiopicDate.CountMonthsSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.EthiopicDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.EthiopicDate.CountWeeksSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountYearsSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.Day.get -> int
Calendrie.Systems.EthiopicDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.EthiopicDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.EthiopicDate.DayOfYear.get -> int
Calendrie.Systems.EthiopicDate.DaysSinceEpoch.get -> int
Calendrie.Systems.EthiopicDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.EthiopicDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.EthiopicDate.Equals(Calendrie.Systems.EthiopicDate other) -> bool
Calendrie.Systems.EthiopicDate.EthiopicDate() -> void
Calendrie.Systems.EthiopicDate.EthiopicDate(int year, int dayOfYear) -> void
Calendrie.Systems.EthiopicDate.EthiopicDate(int year, int month, int day) -> void
Calendrie.Systems.EthiopicDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.EthiopicDate.IsIntercalary.get -> bool
Calendrie.Systems.EthiopicDate.IsSupplementary.get -> bool
Calendrie.Systems.EthiopicDate.Month.get -> int
Calendrie.Systems.EthiopicDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.NextDay() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.NextWeek() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusDays(int days) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusMonths(int months) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusWeeks(int weeks) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusYears(int years) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PreviousDay() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PreviousWeek() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.EthiopicDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.EthiopicDate.WithDay(int newDay) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithMonth(int newMonth) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithYear(int newYear) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Year.get -> int
Calendrie.Systems.EthiopicDate.YearOfCentury.get -> int
Calendrie.Systems.EthiopicDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.Century.get -> int
Calendrie.Systems.EthiopicMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicMonth.CompareTo(Calendrie.Systems.EthiopicMonth other) -> int
Calendrie.Systems.EthiopicMonth.Contains(Calendrie.Systems.EthiopicDate date) -> bool
Calendrie.Systems.EthiopicMonth.CountDays() -> int
Calendrie.Systems.EthiopicMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.EthiopicMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.EthiopicMonth.CountMonthsSince(Calendrie.Systems.EthiopicMonth other) -> int
Calendrie.Systems.EthiopicMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.EthiopicMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.EthiopicMonth.CountYearsSince(Calendrie.Systems.EthiopicMonth other) -> int
Calendrie.Systems.EthiopicMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.EthiopicMonth.Equals(Calendrie.Systems.EthiopicMonth other) -> bool
Calendrie.Systems.EthiopicMonth.EthiopicMonth() -> void
Calendrie.Systems.EthiopicMonth.EthiopicMonth(int year, int month) -> void
Calendrie.Systems.EthiopicMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicMonth.MaxDay.get -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicMonth.MinDay.get -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicMonth.Month.get -> int
Calendrie.Systems.EthiopicMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.EthiopicMonth.NextMonth() -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.PlusMonths(int months) -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.PlusYears(int years) -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.PreviousMonth() -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.EthiopicDate>!
Calendrie.Systems.EthiopicMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.EthiopicDate>
Calendrie.Systems.EthiopicMonth.WithMonth(int newMonth) -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.WithYear(int newYear) -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicMonth.Year.get -> int
Calendrie.Systems.EthiopicMonth.YearOfCentury.get -> int
Calendrie.Systems.EthiopicMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicYear
Calendrie.Systems.EthiopicYear.Century.get -> int
Calendrie.Systems.EthiopicYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicYear.CompareTo(Calendrie.Systems.EthiopicYear other) -> int
Calendrie.Systems.EthiopicYear.Contains(Calendrie.Systems.EthiopicDate date) -> bool
Calendrie.Systems.EthiopicYear.Contains(Calendrie.Systems.EthiopicMonth month) -> bool
Calendrie.Systems.EthiopicYear.CountDays() -> int
Calendrie.Systems.EthiopicYear.CountYearsSince(Calendrie.Systems.EthiopicYear other) -> int
Calendrie.Systems.EthiopicYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.EthiopicDate>!
Calendrie.Systems.EthiopicYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.EthiopicMonth>!
Calendrie.Systems.EthiopicYear.Equals(Calendrie.Systems.EthiopicYear other) -> bool
Calendrie.Systems.EthiopicYear.EthiopicYear() -> void
Calendrie.Systems.EthiopicYear.EthiopicYear(int year) -> void
Calendrie.Systems.EthiopicYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicYear.GetMonthOfYear(int month) -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicYear.IsLeap.get -> bool
Calendrie.Systems.EthiopicYear.MaxDay.get -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicYear.MaxMonth.get -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicYear.MinDay.get -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicYear.MinMonth.get -> Calendrie.Systems.EthiopicMonth
Calendrie.Systems.EthiopicYear.NextYear() -> Calendrie.Systems.EthiopicYear
Calendrie.Systems.EthiopicYear.PlusYears(int years) -> Calendrie.Systems.EthiopicYear
Calendrie.Systems.EthiopicYear.PreviousYear() -> Calendrie.Systems.EthiopicYear
Calendrie.Systems.EthiopicYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.EthiopicDate>
Calendrie.Systems.EthiopicYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.EthiopicMonth>
Calendrie.Systems.EthiopicYear.Year.get -> int
Calendrie.Systems.EthiopicYear.YearOfCentury.get -> int
Calendrie.Systems.EthiopicYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicYear.YearsSinceEpoch.get -> int
Calendrie.Systems.FrenchRepublican13Calendar
Calendrie.Systems.FrenchRepublican13Calendar.FrenchRepublican13Calendar() -> void
Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.Century.get -> int
Calendrie.Systems.FrenchRepublican13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublican13Date.CompareTo(Calendrie.Systems.FrenchRepublican13Date other) -> int
Calendrie.Systems.FrenchRepublican13Date.CountDaysSince(Calendrie.Systems.FrenchRepublican13Date other) -> int
Calendrie.Systems.FrenchRepublican13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.FrenchRepublican13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.FrenchRepublican13Date.CountMonthsSince(Calendrie.Systems.FrenchRepublican13Date other) -> int
Calendrie.Systems.FrenchRepublican13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.FrenchRepublican13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.FrenchRepublican13Date.CountWeeksSince(Calendrie.Systems.FrenchRepublican13Date other) -> int
Calendrie.Systems.FrenchRepublican13Date.CountYearsSince(Calendrie.Systems.FrenchRepublican13Date other) -> int
Calendrie.Systems.FrenchRepublican13Date.Day.get -> int
Calendrie.Systems.FrenchRepublican13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.FrenchRepublican13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.FrenchRepublican13Date.DayOfYear.get -> int
Calendrie.Systems.FrenchRepublican13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.FrenchRepublican13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.FrenchRepublican13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.FrenchRepublican13Date.Equals(Calendrie.Systems.FrenchRepublican13Date other) -> bool
Calendrie.Systems.FrenchRepublican13Date.FrenchRepublican13Date() -> void
Calendrie.Systems.FrenchRepublican13Date.FrenchRepublican13Date(int year, int dayOfYear) -> void
Calendrie.Systems.FrenchRepublican13Date.FrenchRepublican13Date(int year, int month, int day) -> void
Calendrie.Systems.FrenchRepublican13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.FrenchRepublican13Date.IsIntercalary.get -> bool
Calendrie.Systems.FrenchRepublican13Date.IsSupplementary.get -> bool
Calendrie.Systems.FrenchRepublican13Date.Month.get -> int
Calendrie.Systems.FrenchRepublican13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.NextDay() -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.NextWeek() -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PlusDays(int days) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PlusMonths(int months) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PlusWeeks(int weeks) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PlusYears(int years) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PreviousDay() -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.PreviousWeek() -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.FrenchRepublican13Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.FrenchRepublican13Date.WithDay(int newDay) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.WithMonth(int newMonth) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.WithYear(int newYear) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Date.Year.get -> int
Calendrie.Systems.FrenchRepublican13Date.YearOfCentury.get -> int
Calendrie.Systems.FrenchRepublican13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.Century.get -> int
Calendrie.Systems.FrenchRepublican13Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublican13Month.CompareTo(Calendrie.Systems.FrenchRepublican13Month other) -> int
Calendrie.Systems.FrenchRepublican13Month.Contains(Calendrie.Systems.FrenchRepublican13Date date) -> bool
Calendrie.Systems.FrenchRepublican13Month.CountDays() -> int
Calendrie.Systems.FrenchRepublican13Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.FrenchRepublican13Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.FrenchRepublican13Month.CountMonthsSince(Calendrie.Systems.FrenchRepublican13Month other) -> int
Calendrie.Systems.FrenchRepublican13Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.FrenchRepublican13Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.FrenchRepublican13Month.CountYearsSince(Calendrie.Systems.FrenchRepublican13Month other) -> int
Calendrie.Systems.FrenchRepublican13Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.FrenchRepublican13Month.Equals(Calendrie.Systems.FrenchRepublican13Month other) -> bool
Calendrie.Systems.FrenchRepublican13Month.FrenchRepublican13Month() -> void
Calendrie.Systems.FrenchRepublican13Month.FrenchRepublican13Month(int year, int month) -> void
Calendrie.Systems.FrenchRepublican13Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Month.IsVirtual.get -> bool
Calendrie.Systems.FrenchRepublican13Month.MaxDay.get -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Month.MinDay.get -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Month.Month.get -> int
Calendrie.Systems.FrenchRepublican13Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.FrenchRepublican13Month.NextMonth() -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.PlusMonths(int months) -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.PlusYears(int years) -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.PreviousMonth() -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.FrenchRepublican13Date>!
Calendrie.Systems.FrenchRepublican13Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.FrenchRepublican13Date>
Calendrie.Systems.FrenchRepublican13Month.WithMonth(int newMonth) -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.WithYear(int newYear) -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Month.Year.get -> int
Calendrie.Systems.FrenchRepublican13Month.YearOfCentury.get -> int
Calendrie.Systems.FrenchRepublican13Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublican13Year
Calendrie.Systems.FrenchRepublican13Year.Century.get -> int
Calendrie.Systems.FrenchRepublican13Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublican13Year.CompareTo(Calendrie.Systems.FrenchRepublican13Year other) -> int
Calendrie.Systems.FrenchRepublican13Year.Contains(Calendrie.Systems.FrenchRepublican13Date date) -> bool
Calendrie.Systems.FrenchRepublican13Year.Contains(Calendrie.Systems.FrenchRepublican13Month month) -> bool
Calendrie.Systems.FrenchRepublican13Year.CountDays() -> int
Calendrie.Systems.FrenchRepublican13Year.CountYearsSince(Calendrie.Systems.FrenchRepublican13Year other) -> int
Calendrie.Systems.FrenchRepublican13Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.FrenchRepublican13Date>!
Calendrie.Systems.FrenchRepublican13Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.FrenchRepublican13Month>!
Calendrie.Systems.FrenchRepublican13Year.Equals(Calendrie.Systems.FrenchRepublican13Year other) -> bool
Calendrie.Systems.FrenchRepublican13Year.FrenchRepublican13Year() -> void
Calendrie.Systems.FrenchRepublican13Year.FrenchRepublican13Year(int year) -> void
Calendrie.Systems.FrenchRepublican13Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Year.GetMonthOfYear(int month) -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Year.IsLeap.get -> bool
Calendrie.Systems.FrenchRepublican13Year.MaxDay.get -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Year.MaxMonth.get -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Year.MinDay.get -> Calendrie.Systems.FrenchRepublican13Date
Calendrie.Systems.FrenchRepublican13Year.MinMonth.get -> Calendrie.Systems.FrenchRepublican13Month
Calendrie.Systems.FrenchRepublican13Year.NextYear() -> Calendrie.Systems.FrenchRepublican13Year
Calendrie.Systems.FrenchRepublican13Year.PlusYears(int years) -> Calendrie.Systems.FrenchRepublican13Year
Calendrie.Systems.FrenchRepublican13Year.PreviousYear() -> Calendrie.Systems.FrenchRepublican13Year
Calendrie.Systems.FrenchRepublican13Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.FrenchRepublican13Date>
Calendrie.Systems.FrenchRepublican13Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.FrenchRepublican13Month>
Calendrie.Systems.FrenchRepublican13Year.Year.get -> int
Calendrie.Systems.FrenchRepublican13Year.YearOfCentury.get -> int
Calendrie.Systems.FrenchRepublican13Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublican13Year.YearsSinceEpoch.get -> int
Calendrie.Systems.FrenchRepublicanCalendar
Calendrie.Systems.FrenchRepublicanCalendar.FrenchRepublicanCalendar() -> void
Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.Century.get -> int
Calendrie.Systems.FrenchRepublicanDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublicanDate.CompareTo(Calendrie.Systems.FrenchRepublicanDate other) -> int
Calendrie.Systems.FrenchRepublicanDate.CountDaysSince(Calendrie.Systems.FrenchRepublicanDate other) -> int
Calendrie.Systems.FrenchRepublicanDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.FrenchRepublicanDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.FrenchRepublicanDate.CountMonthsSince(Calendrie.Systems.FrenchRepublicanDate other) -> int
Calendrie.Systems.FrenchRepublicanDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.FrenchRepublicanDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.FrenchRepublicanDate.CountWeeksSince(Calendrie.Systems.FrenchRepublicanDate other) -> int
Calendrie.Systems.FrenchRepublicanDate.CountYearsSince(Calendrie.Systems.FrenchRepublicanDate other) -> int
Calendrie.Systems.FrenchRepublicanDate.Day.get -> int
Calendrie.Systems.FrenchRepublicanDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.FrenchRepublicanDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.FrenchRepublicanDate.DayOfYear.get -> int
Calendrie.Systems.FrenchRepublicanDate.DaysSinceEpoch.get -> int
Calendrie.Systems.FrenchRepublicanDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.FrenchRepublicanDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.FrenchRepublicanDate.Equals(Calendrie.Systems.FrenchRepublicanDate other) -> bool
Calendrie.Systems.FrenchRepublicanDate.FrenchRepublicanDate() -> void
Calendrie.Systems.FrenchRepublicanDate.FrenchRepublicanDate(int year, int dayOfYear) -> void
Calendrie.Systems.FrenchRepublicanDate.FrenchRepublicanDate(int year, int month, int day) -> void
Calendrie.Systems.FrenchRepublicanDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.FrenchRepublicanDate.IsIntercalary.get -> bool
Calendrie.Systems.FrenchRepublicanDate.IsSupplementary.get -> bool
Calendrie.Systems.FrenchRepublicanDate.Month.get -> int
Calendrie.Systems.FrenchRepublicanDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.NextDay() -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.NextWeek() -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PlusDays(int days) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PlusMonths(int months) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PlusWeeks(int weeks) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PlusYears(int years) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PreviousDay() -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.PreviousWeek() -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.FrenchRepublicanDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.FrenchRepublicanDate.WithDay(int newDay) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.WithMonth(int newMonth) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.WithYear(int newYear) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanDate.Year.get -> int
Calendrie.Systems.FrenchRepublicanDate.YearOfCentury.get -> int
Calendrie.Systems.FrenchRepublicanDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.Century.get -> int
Calendrie.Systems.FrenchRepublicanMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublicanMonth.CompareTo(Calendrie.Systems.FrenchRepublicanMonth other) -> int
Calendrie.Systems.FrenchRepublicanMonth.Contains(Calendrie.Systems.FrenchRepublicanDate date) -> bool
Calendrie.Systems.FrenchRepublicanMonth.CountDays() -> int
Calendrie.Systems.FrenchRepublicanMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.FrenchRepublicanMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.FrenchRepublicanMonth.CountMonthsSince(Calendrie.Systems.FrenchRepublicanMonth other) -> int
Calendrie.Systems.FrenchRepublicanMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.FrenchRepublicanMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.FrenchRepublicanMonth.CountYearsSince(Calendrie.Systems.FrenchRepublicanMonth other) -> int
Calendrie.Systems.FrenchRepublicanMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.FrenchRepublicanMonth.Equals(Calendrie.Systems.FrenchRepublicanMonth other) -> bool
Calendrie.Systems.FrenchRepublicanMonth.FrenchRepublicanMonth() -> void
Calendrie.Systems.FrenchRepublicanMonth.FrenchRepublicanMonth(int year, int month) -> void
Calendrie.Systems.FrenchRepublicanMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanMonth.MaxDay.get -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanMonth.MinDay.get -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanMonth.Month.get -> int
Calendrie.Systems.FrenchRepublicanMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.FrenchRepublicanMonth.NextMonth() -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.PlusMonths(int months) -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.PlusYears(int years) -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.PreviousMonth() -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.FrenchRepublicanDate>!
Calendrie.Systems.FrenchRepublicanMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.FrenchRepublicanDate>
Calendrie.Systems.FrenchRepublicanMonth.WithMonth(int newMonth) -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.WithYear(int newYear) -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanMonth.Year.get -> int
Calendrie.Systems.FrenchRepublicanMonth.YearOfCentury.get -> int
Calendrie.Systems.FrenchRepublicanMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublicanYear
Calendrie.Systems.FrenchRepublicanYear.Century.get -> int
Calendrie.Systems.FrenchRepublicanYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublicanYear.CompareTo(Calendrie.Systems.FrenchRepublicanYear other) -> int
Calendrie.Systems.FrenchRepublicanYear.Contains(Calendrie.Systems.FrenchRepublicanDate date) -> bool
Calendrie.Systems.FrenchRepublicanYear.Contains(Calendrie.Systems.FrenchRepublicanMonth month) -> bool
Calendrie.Systems.FrenchRepublicanYear.CountDays() -> int
Calendrie.Systems.FrenchRepublicanYear.CountYearsSince(Calendrie.Systems.FrenchRepublicanYear other) -> int
Calendrie.Systems.FrenchRepublicanYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.FrenchRepublicanDate>!
Calendrie.Systems.FrenchRepublicanYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.FrenchRepublicanMonth>!
Calendrie.Systems.FrenchRepublicanYear.Equals(Calendrie.Systems.FrenchRepublicanYear other) -> bool
Calendrie.Systems.FrenchRepublicanYear.FrenchRepublicanYear() -> void
Calendrie.Systems.FrenchRepublicanYear.FrenchRepublicanYear(int year) -> void
Calendrie.Systems.FrenchRepublicanYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanYear.GetMonthOfYear(int month) -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanYear.IsLeap.get -> bool
Calendrie.Systems.FrenchRepublicanYear.MaxDay.get -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanYear.MaxMonth.get -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanYear.MinDay.get -> Calendrie.Systems.FrenchRepublicanDate
Calendrie.Systems.FrenchRepublicanYear.MinMonth.get -> Calendrie.Systems.FrenchRepublicanMonth
Calendrie.Systems.FrenchRepublicanYear.NextYear() -> Calendrie.Systems.FrenchRepublicanYear
Calendrie.Systems.FrenchRepublicanYear.PlusYears(int years) -> Calendrie.Systems.FrenchRepublicanYear
Calendrie.Systems.FrenchRepublicanYear.PreviousYear() -> Calendrie.Systems.FrenchRepublicanYear
Calendrie.Systems.FrenchRepublicanYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.FrenchRepublicanDate>
Calendrie.Systems.FrenchRepublicanYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.FrenchRepublicanMonth>
Calendrie.Systems.FrenchRepublicanYear.Year.get -> int
Calendrie.Systems.FrenchRepublicanYear.YearOfCentury.get -> int
Calendrie.Systems.FrenchRepublicanYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.FrenchRepublicanYear.YearsSinceEpoch.get -> int
Calendrie.Systems.GregorianCalendar
Calendrie.Systems.GregorianCalendar.GregorianCalendar() -> void
Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Century.get -> int
Calendrie.Systems.GregorianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianDate.CompareTo(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountDaysSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.GregorianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.GregorianDate.CountMonthsSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.GregorianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.GregorianDate.CountWeeksSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountYearsSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.Day.get -> int
Calendrie.Systems.GregorianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.GregorianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.GregorianDate.DayOfYear.get -> int
Calendrie.Systems.GregorianDate.DaysSinceZero.get -> int
Calendrie.Systems.GregorianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.GregorianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.GregorianDate.Equals(Calendrie.Systems.GregorianDate other) -> bool
Calendrie.Systems.GregorianDate.GregorianDate() -> void
Calendrie.Systems.GregorianDate.GregorianDate(int year, int dayOfYear) -> void
Calendrie.Systems.GregorianDate.GregorianDate(int year, int month, int day) -> void
Calendrie.Systems.GregorianDate.IsIntercalary.get -> bool
Calendrie.Systems.GregorianDate.Month.get -> int
Calendrie.Systems.GregorianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.NextDay() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.NextWeek() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusDays(int days) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusMonths(int months) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusWeeks(int weeks) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusYears(int years) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PreviousDay() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PreviousWeek() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.GregorianDate.WithDay(int newDay) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithMonth(int newMonth) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithYear(int newYear) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Year.get -> int
Calendrie.Systems.GregorianDate.YearOfCentury.get -> int
Calendrie.Systems.GregorianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.Century.get -> int
Calendrie.Systems.GregorianMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianMonth.CompareTo(Calendrie.Systems.GregorianMonth other) -> int
Calendrie.Systems.GregorianMonth.Contains(Calendrie.Systems.GregorianDate date) -> bool
Calendrie.Systems.GregorianMonth.CountDays() -> int
Calendrie.Systems.GregorianMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.GregorianMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.GregorianMonth.CountMonthsSince(Calendrie.Systems.GregorianMonth other) -> int
Calendrie.Systems.GregorianMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.GregorianMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.GregorianMonth.CountYearsSince(Calendrie.Systems.GregorianMonth other) -> int
Calendrie.Systems.GregorianMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.GregorianMonth.Equals(Calendrie.Systems.GregorianMonth other) -> bool
Calendrie.Systems.GregorianMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianMonth.GregorianMonth() -> void
Calendrie.Systems.GregorianMonth.GregorianMonth(int year, int month) -> void
Calendrie.Systems.GregorianMonth.MaxDay.get -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianMonth.MinDay.get -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianMonth.Month.get -> int
Calendrie.Systems.GregorianMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.GregorianMonth.NextMonth() -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.PlusMonths(int months) -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.PlusYears(int years) -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.PreviousMonth() -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.GregorianDate>!
Calendrie.Systems.GregorianMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.GregorianDate>
Calendrie.Systems.GregorianMonth.WithMonth(int newMonth) -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.WithYear(int newYear) -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianMonth.Year.get -> int
Calendrie.Systems.GregorianMonth.YearOfCentury.get -> int
Calendrie.Systems.GregorianMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianYear
Calendrie.Systems.GregorianYear.Century.get -> int
Calendrie.Systems.GregorianYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianYear.CompareTo(Calendrie.Systems.GregorianYear other) -> int
Calendrie.Systems.GregorianYear.Contains(Calendrie.Systems.GregorianDate date) -> bool
Calendrie.Systems.GregorianYear.Contains(Calendrie.Systems.GregorianMonth month) -> bool
Calendrie.Systems.GregorianYear.CountDays() -> int
Calendrie.Systems.GregorianYear.CountYearsSince(Calendrie.Systems.GregorianYear other) -> int
Calendrie.Systems.GregorianYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.GregorianDate>!
Calendrie.Systems.GregorianYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.GregorianMonth>!
Calendrie.Systems.GregorianYear.Equals(Calendrie.Systems.GregorianYear other) -> bool
Calendrie.Systems.GregorianYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianYear.GetMonthOfYear(int month) -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianYear.GregorianYear() -> void
Calendrie.Systems.GregorianYear.GregorianYear(int year) -> void
Calendrie.Systems.GregorianYear.IsLeap.get -> bool
Calendrie.Systems.GregorianYear.MaxDay.get -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianYear.MaxMonth.get -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianYear.MinDay.get -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianYear.MinMonth.get -> Calendrie.Systems.GregorianMonth
Calendrie.Systems.GregorianYear.NextYear() -> Calendrie.Systems.GregorianYear
Calendrie.Systems.GregorianYear.PlusYears(int years) -> Calendrie.Systems.GregorianYear
Calendrie.Systems.GregorianYear.PreviousYear() -> Calendrie.Systems.GregorianYear
Calendrie.Systems.GregorianYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.GregorianDate>
Calendrie.Systems.GregorianYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.GregorianMonth>
Calendrie.Systems.GregorianYear.Year.get -> int
Calendrie.Systems.GregorianYear.YearOfCentury.get -> int
Calendrie.Systems.GregorianYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianYear.YearsSinceEpoch.get -> int
Calendrie.Systems.InternationalFixedCalendar
Calendrie.Systems.InternationalFixedCalendar.InternationalFixedCalendar() -> void
Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.Century.get -> int
Calendrie.Systems.InternationalFixedDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.InternationalFixedDate.CompareTo(Calendrie.Systems.InternationalFixedDate other) -> int
Calendrie.Systems.InternationalFixedDate.CountDaysSince(Calendrie.Systems.InternationalFixedDate other) -> int
Calendrie.Systems.InternationalFixedDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.InternationalFixedDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.InternationalFixedDate.CountMonthsSince(Calendrie.Systems.InternationalFixedDate other) -> int
Calendrie.Systems.InternationalFixedDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.InternationalFixedDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.InternationalFixedDate.CountWeeksSince(Calendrie.Systems.InternationalFixedDate other) -> int
Calendrie.Systems.InternationalFixedDate.CountYearsSince(Calendrie.Systems.InternationalFixedDate other) -> int
Calendrie.Systems.InternationalFixedDate.Day.get -> int
Calendrie.Systems.InternationalFixedDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.InternationalFixedDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.InternationalFixedDate.DayOfYear.get -> int
Calendrie.Systems.InternationalFixedDate.DaysSinceEpoch.get -> int
Calendrie.Systems.InternationalFixedDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.InternationalFixedDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.InternationalFixedDate.Equals(Calendrie.Systems.InternationalFixedDate other) -> bool
Calendrie.Systems.InternationalFixedDate.InternationalFixedDate() -> void
Calendrie.Systems.InternationalFixedDate.InternationalFixedDate(int year, int dayOfYear) -> void
Calendrie.Systems.InternationalFixedDate.InternationalFixedDate(int year, int month, int day) -> void
Calendrie.Systems.InternationalFixedDate.IsBlank.get -> bool
Calendrie.Systems.InternationalFixedDate.IsIntercalary.get -> bool
Calendrie.Systems.InternationalFixedDate.IsSupplementary.get -> bool
Calendrie.Systems.InternationalFixedDate.Month.get -> int
Calendrie.Systems.InternationalFixedDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.NextDay() -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.NextWeek() -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PlusDays(int days) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PlusMonths(int months) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PlusWeeks(int weeks) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PlusYears(int years) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PreviousDay() -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.PreviousWeek() -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.InternationalFixedDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.InternationalFixedDate.WithDay(int newDay) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.WithMonth(int newMonth) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.WithYear(int newYear) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedDate.Year.get -> int
Calendrie.Systems.InternationalFixedDate.YearOfCentury.get -> int
Calendrie.Systems.InternationalFixedDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.Century.get -> int
Calendrie.Systems.InternationalFixedMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.InternationalFixedMonth.CompareTo(Calendrie.Systems.InternationalFixedMonth other) -> int
Calendrie.Systems.InternationalFixedMonth.Contains(Calendrie.Systems.InternationalFixedDate date) -> bool
Calendrie.Systems.InternationalFixedMonth.CountDays() -> int
Calendrie.Systems.InternationalFixedMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.InternationalFixedMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.InternationalFixedMonth.CountMonthsSince(Calendrie.Systems.InternationalFixedMonth other) -> int
Calendrie.Systems.InternationalFixedMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.InternationalFixedMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.InternationalFixedMonth.CountYearsSince(Calendrie.Systems.InternationalFixedMonth other) -> int
Calendrie.Systems.InternationalFixedMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.InternationalFixedMonth.Equals(Calendrie.Systems.InternationalFixedMonth other) -> bool
Calendrie.Systems.InternationalFixedMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedMonth.InternationalFixedMonth() -> void
Calendrie.Systems.InternationalFixedMonth.InternationalFixedMonth(int year, int month) -> void
Calendrie.Systems.InternationalFixedMonth.MaxDay.get -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedMonth.MinDay.get -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedMonth.Month.get -> int
Calendrie.Systems.InternationalFixedMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.InternationalFixedMonth.NextMonth() -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.PlusMonths(int months) -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.PlusYears(int years) -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.PreviousMonth() -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.InternationalFixedDate>!
Calendrie.Systems.InternationalFixedMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.InternationalFixedDate>
Calendrie.Systems.InternationalFixedMonth.WithMonth(int newMonth) -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.WithYear(int newYear) -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedMonth.Year.get -> int
Calendrie.Systems.InternationalFixedMonth.YearOfCentury.get -> int
Calendrie.Systems.InternationalFixedMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.InternationalFixedYear
Calendrie.Systems.InternationalFixedYear.Century.get -> int
Calendrie.Systems.InternationalFixedYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.InternationalFixedYear.CompareTo(Calendrie.Systems.InternationalFixedYear other) -> int
Calendrie.Systems.InternationalFixedYear.Contains(Calendrie.Systems.InternationalFixedDate date) -> bool
Calendrie.Systems.InternationalFixedYear.Contains(Calendrie.Systems.InternationalFixedMonth month) -> bool
Calendrie.Systems.InternationalFixedYear.CountDays() -> int
Calendrie.Systems.InternationalFixedYear.CountYearsSince(Calendrie.Systems.InternationalFixedYear other) -> int
Calendrie.Systems.InternationalFixedYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.InternationalFixedDate>!
Calendrie.Systems.InternationalFixedYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.InternationalFixedMonth>!
Calendrie.Systems.InternationalFixedYear.Equals(Calendrie.Systems.InternationalFixedYear other) -> bool
Calendrie.Systems.InternationalFixedYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedYear.GetMonthOfYear(int month) -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedYear.InternationalFixedYear() -> void
Calendrie.Systems.InternationalFixedYear.InternationalFixedYear(int year) -> void
Calendrie.Systems.InternationalFixedYear.IsLeap.get -> bool
Calendrie.Systems.InternationalFixedYear.MaxDay.get -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedYear.MaxMonth.get -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedYear.MinDay.get -> Calendrie.Systems.InternationalFixedDate
Calendrie.Systems.InternationalFixedYear.MinMonth.get -> Calendrie.Systems.InternationalFixedMonth
Calendrie.Systems.InternationalFixedYear.NextYear() -> Calendrie.Systems.InternationalFixedYear
Calendrie.Systems.InternationalFixedYear.PlusYears(int years) -> Calendrie.Systems.InternationalFixedYear
Calendrie.Systems.InternationalFixedYear.PreviousYear() -> Calendrie.Systems.InternationalFixedYear
Calendrie.Systems.InternationalFixedYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.InternationalFixedDate>
Calendrie.Systems.InternationalFixedYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.InternationalFixedMonth>
Calendrie.Systems.InternationalFixedYear.Year.get -> int
Calendrie.Systems.InternationalFixedYear.YearOfCentury.get -> int
Calendrie.Systems.InternationalFixedYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.InternationalFixedYear.YearsSinceEpoch.get -> int
Calendrie.Systems.IUnsafeFactory<T>
Calendrie.Systems.JulianCalendar
Calendrie.Systems.JulianCalendar.JulianCalendar() -> void
Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Century.get -> int
Calendrie.Systems.JulianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianDate.CompareTo(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountDaysSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.JulianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.JulianDate.CountMonthsSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.JulianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.JulianDate.CountWeeksSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountYearsSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.Day.get -> int
Calendrie.Systems.JulianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.JulianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.JulianDate.DayOfYear.get -> int
Calendrie.Systems.JulianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.JulianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.JulianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.JulianDate.Equals(Calendrie.Systems.JulianDate other) -> bool
Calendrie.Systems.JulianDate.IsIntercalary.get -> bool
Calendrie.Systems.JulianDate.JulianDate() -> void
Calendrie.Systems.JulianDate.JulianDate(int year, int dayOfYear) -> void
Calendrie.Systems.JulianDate.JulianDate(int year, int month, int day) -> void
Calendrie.Systems.JulianDate.Month.get -> int
Calendrie.Systems.JulianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.NextDay() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.NextWeek() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusDays(int days) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusMonths(int months) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusWeeks(int weeks) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusYears(int years) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PreviousDay() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PreviousWeek() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.JulianDate.WithDay(int newDay) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithMonth(int newMonth) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithYear(int newYear) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Year.get -> int
Calendrie.Systems.JulianDate.YearOfCentury.get -> int
Calendrie.Systems.JulianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.Century.get -> int
Calendrie.Systems.JulianMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianMonth.CompareTo(Calendrie.Systems.JulianMonth other) -> int
Calendrie.Systems.JulianMonth.Contains(Calendrie.Systems.JulianDate date) -> bool
Calendrie.Systems.JulianMonth.CountDays() -> int
Calendrie.Systems.JulianMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.JulianMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.JulianMonth.CountMonthsSince(Calendrie.Systems.JulianMonth other) -> int
Calendrie.Systems.JulianMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.JulianMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.JulianMonth.CountYearsSince(Calendrie.Systems.JulianMonth other) -> int
Calendrie.Systems.JulianMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.JulianMonth.Equals(Calendrie.Systems.JulianMonth other) -> bool
Calendrie.Systems.JulianMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianMonth.JulianMonth() -> void
Calendrie.Systems.JulianMonth.JulianMonth(int year, int month) -> void
Calendrie.Systems.JulianMonth.MaxDay.get -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianMonth.MinDay.get -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianMonth.Month.get -> int
Calendrie.Systems.JulianMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.JulianMonth.NextMonth() -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.PlusMonths(int months) -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.PlusYears(int years) -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.PreviousMonth() -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.JulianDate>!
Calendrie.Systems.JulianMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.JulianDate>
Calendrie.Systems.JulianMonth.WithMonth(int newMonth) -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.WithYear(int newYear) -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianMonth.Year.get -> int
Calendrie.Systems.JulianMonth.YearOfCentury.get -> int
Calendrie.Systems.JulianMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianYear
Calendrie.Systems.JulianYear.Century.get -> int
Calendrie.Systems.JulianYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianYear.CompareTo(Calendrie.Systems.JulianYear other) -> int
Calendrie.Systems.JulianYear.Contains(Calendrie.Systems.JulianDate date) -> bool
Calendrie.Systems.JulianYear.Contains(Calendrie.Systems.JulianMonth month) -> bool
Calendrie.Systems.JulianYear.CountDays() -> int
Calendrie.Systems.JulianYear.CountYearsSince(Calendrie.Systems.JulianYear other) -> int
Calendrie.Systems.JulianYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.JulianDate>!
Calendrie.Systems.JulianYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.JulianMonth>!
Calendrie.Systems.JulianYear.Equals(Calendrie.Systems.JulianYear other) -> bool
Calendrie.Systems.JulianYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianYear.GetMonthOfYear(int month) -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianYear.IsLeap.get -> bool
Calendrie.Systems.JulianYear.JulianYear() -> void
Calendrie.Systems.JulianYear.JulianYear(int year) -> void
Calendrie.Systems.JulianYear.MaxDay.get -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianYear.MaxMonth.get -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianYear.MinDay.get -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianYear.MinMonth.get -> Calendrie.Systems.JulianMonth
Calendrie.Systems.JulianYear.NextYear() -> Calendrie.Systems.JulianYear
Calendrie.Systems.JulianYear.PlusYears(int years) -> Calendrie.Systems.JulianYear
Calendrie.Systems.JulianYear.PreviousYear() -> Calendrie.Systems.JulianYear
Calendrie.Systems.JulianYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.JulianDate>
Calendrie.Systems.JulianYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.JulianMonth>
Calendrie.Systems.JulianYear.Year.get -> int
Calendrie.Systems.JulianYear.YearOfCentury.get -> int
Calendrie.Systems.JulianYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianYear.YearsSinceEpoch.get -> int
Calendrie.Systems.Persian2820Calendar
Calendrie.Systems.Persian2820Calendar.Persian2820Calendar() -> void
Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.Century.get -> int
Calendrie.Systems.Persian2820Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Persian2820Date.CompareTo(Calendrie.Systems.Persian2820Date other) -> int
Calendrie.Systems.Persian2820Date.CountDaysSince(Calendrie.Systems.Persian2820Date other) -> int
Calendrie.Systems.Persian2820Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Persian2820Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Persian2820Date.CountMonthsSince(Calendrie.Systems.Persian2820Date other) -> int
Calendrie.Systems.Persian2820Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Persian2820Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Persian2820Date.CountWeeksSince(Calendrie.Systems.Persian2820Date other) -> int
Calendrie.Systems.Persian2820Date.CountYearsSince(Calendrie.Systems.Persian2820Date other) -> int
Calendrie.Systems.Persian2820Date.Day.get -> int
Calendrie.Systems.Persian2820Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Persian2820Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Persian2820Date.DayOfYear.get -> int
Calendrie.Systems.Persian2820Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Persian2820Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Persian2820Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Persian2820Date.Equals(Calendrie.Systems.Persian2820Date other) -> bool
Calendrie.Systems.Persian2820Date.IsIntercalary.get -> bool
Calendrie.Systems.Persian2820Date.Month.get -> int
Calendrie.Systems.Persian2820Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.NextDay() -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.NextWeek() -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.Persian2820Date() -> void
Calendrie.Systems.Persian2820Date.Persian2820Date(int year, int dayOfYear) -> void
Calendrie.Systems.Persian2820Date.Persian2820Date(int year, int month, int day) -> void
Calendrie.Systems.Persian2820Date.PlusDays(int days) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PlusMonths(int months) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PlusWeeks(int weeks) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PlusYears(int years) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PreviousDay() -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.PreviousWeek() -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.Persian2820Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.Persian2820Date.WithDay(int newDay) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.WithMonth(int newMonth) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.WithYear(int newYear) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Date.Year.get -> int
Calendrie.Systems.Persian2820Date.YearOfCentury.get -> int
Calendrie.Systems.Persian2820Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.Century.get -> int
Calendrie.Systems.Persian2820Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Persian2820Month.CompareTo(Calendrie.Systems.Persian2820Month other) -> int
Calendrie.Systems.Persian2820Month.Contains(Calendrie.Systems.Persian2820Date date) -> bool
Calendrie.Systems.Persian2820Month.CountDays() -> int
Calendrie.Systems.Persian2820Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.Persian2820Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.Persian2820Month.CountMonthsSince(Calendrie.Systems.Persian2820Month other) -> int
Calendrie.Systems.Persian2820Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.Persian2820Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.Persian2820Month.CountYearsSince(Calendrie.Systems.Persian2820Month other) -> int
Calendrie.Systems.Persian2820Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.Persian2820Month.Equals(Calendrie.Systems.Persian2820Month other) -> bool
Calendrie.Systems.Persian2820Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Month.MaxDay.get -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Month.MinDay.get -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Month.Month.get -> int
Calendrie.Systems.Persian2820Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.Persian2820Month.NextMonth() -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.Persian2820Month() -> void
Calendrie.Systems.Persian2820Month.Persian2820Month(int year, int month) -> void
Calendrie.Systems.Persian2820Month.PlusMonths(int months) -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.PlusYears(int years) -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.PreviousMonth() -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Persian2820Date>!
Calendrie.Systems.Persian2820Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Persian2820Date>
Calendrie.Systems.Persian2820Month.WithMonth(int newMonth) -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.WithYear(int newYear) -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Month.Year.get -> int
Calendrie.Systems.Persian2820Month.YearOfCentury.get -> int
Calendrie.Systems.Persian2820Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Persian2820Year
Calendrie.Systems.Persian2820Year.Century.get -> int
Calendrie.Systems.Persian2820Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Persian2820Year.CompareTo(Calendrie.Systems.Persian2820Year other) -> int
Calendrie.Systems.Persian2820Year.Contains(Calendrie.Systems.Persian2820Date date) -> bool
Calendrie.Systems.Persian2820Year.Contains(Calendrie.Systems.Persian2820Month month) -> bool
Calendrie.Systems.Persian2820Year.CountDays() -> int
Calendrie.Systems.Persian2820Year.CountYearsSince(Calendrie.Systems.Persian2820Year other) -> int
Calendrie.Systems.Persian2820Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Persian2820Date>!
Calendrie.Systems.Persian2820Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Persian2820Month>!
Calendrie.Systems.Persian2820Year.Equals(Calendrie.Systems.Persian2820Year other) -> bool
Calendrie.Systems.Persian2820Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Year.GetMonthOfYear(int month) -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Year.IsLeap.get -> bool
Calendrie.Systems.Persian2820Year.MaxDay.get -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Year.MaxMonth.get -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Year.MinDay.get -> Calendrie.Systems.Persian2820Date
Calendrie.Systems.Persian2820Year.MinMonth.get -> Calendrie.Systems.Persian2820Month
Calendrie.Systems.Persian2820Year.NextYear() -> Calendrie.Systems.Persian2820Year
Calendrie.Systems.Persian2820Year.Persian2820Year() -> void
Calendrie.Systems.Persian2820Year.Persian2820Year(int year) -> void
Calendrie.Systems.Persian2820Year.PlusYears(int years) -> Calendrie.Systems.Persian2820Year
Calendrie.Systems.Persian2820Year.PreviousYear() -> Calendrie.Systems.Persian2820Year
Calendrie.Systems.Persian2820Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Persian2820Date>
Calendrie.Systems.Persian2820Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Persian2820Month>
Calendrie.Systems.Persian2820Year.Year.get -> int
Calendrie.Systems.Persian2820Year.YearOfCentury.get -> int
Calendrie.Systems.Persian2820Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Persian2820Year.YearsSinceEpoch.get -> int
Calendrie.Systems.PositivistCalendar
Calendrie.Systems.PositivistCalendar.PositivistCalendar() -> void
Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.Century.get -> int
Calendrie.Systems.PositivistDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.PositivistDate.CompareTo(Calendrie.Systems.PositivistDate other) -> int
Calendrie.Systems.PositivistDate.CountDaysSince(Calendrie.Systems.PositivistDate other) -> int
Calendrie.Systems.PositivistDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.PositivistDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.PositivistDate.CountMonthsSince(Calendrie.Systems.PositivistDate other) -> int
Calendrie.Systems.PositivistDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.PositivistDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.PositivistDate.CountWeeksSince(Calendrie.Systems.PositivistDate other) -> int
Calendrie.Systems.PositivistDate.CountYearsSince(Calendrie.Systems.PositivistDate other) -> int
Calendrie.Systems.PositivistDate.Day.get -> int
Calendrie.Systems.PositivistDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.PositivistDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.PositivistDate.DayOfYear.get -> int
Calendrie.Systems.PositivistDate.DaysSinceEpoch.get -> int
Calendrie.Systems.PositivistDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.PositivistDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.PositivistDate.Equals(Calendrie.Systems.PositivistDate other) -> bool
Calendrie.Systems.PositivistDate.IsBlank.get -> bool
Calendrie.Systems.PositivistDate.IsIntercalary.get -> bool
Calendrie.Systems.PositivistDate.IsSupplementary.get -> bool
Calendrie.Systems.PositivistDate.Month.get -> int
Calendrie.Systems.PositivistDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.NextDay() -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.NextWeek() -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PlusDays(int days) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PlusMonths(int months) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PlusWeeks(int weeks) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PlusYears(int years) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PositivistDate() -> void
Calendrie.Systems.PositivistDate.PositivistDate(int year, int dayOfYear) -> void
Calendrie.Systems.PositivistDate.PositivistDate(int year, int month, int day) -> void
Calendrie.Systems.PositivistDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PreviousDay() -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.PreviousWeek() -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.PositivistDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.PositivistDate.WithDay(int newDay) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.WithMonth(int newMonth) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.WithYear(int newYear) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistDate.Year.get -> int
Calendrie.Systems.PositivistDate.YearOfCentury.get -> int
Calendrie.Systems.PositivistDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.Century.get -> int
Calendrie.Systems.PositivistMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.PositivistMonth.CompareTo(Calendrie.Systems.PositivistMonth other) -> int
Calendrie.Systems.PositivistMonth.Contains(Calendrie.Systems.PositivistDate date) -> bool
Calendrie.Systems.PositivistMonth.CountDays() -> int
Calendrie.Systems.PositivistMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.PositivistMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.PositivistMonth.CountMonthsSince(Calendrie.Systems.PositivistMonth other) -> int
Calendrie.Systems.PositivistMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.PositivistMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.PositivistMonth.CountYearsSince(Calendrie.Systems.PositivistMonth other) -> int
Calendrie.Systems.PositivistMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.PositivistMonth.Equals(Calendrie.Systems.PositivistMonth other) -> bool
Calendrie.Systems.PositivistMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistMonth.MaxDay.get -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistMonth.MinDay.get -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistMonth.Month.get -> int
Calendrie.Systems.PositivistMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.PositivistMonth.NextMonth() -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.PlusMonths(int months) -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.PlusYears(int years) -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.PositivistMonth() -> void
Calendrie.Systems.PositivistMonth.PositivistMonth(int year, int month) -> void
Calendrie.Systems.PositivistMonth.PreviousMonth() -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.PositivistDate>!
Calendrie.Systems.PositivistMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.PositivistDate>
Calendrie.Systems.PositivistMonth.WithMonth(int newMonth) -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.WithYear(int newYear) -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistMonth.Year.get -> int
Calendrie.Systems.PositivistMonth.YearOfCentury.get -> int
Calendrie.Systems.PositivistMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.PositivistYear
Calendrie.Systems.PositivistYear.Century.get -> int
Calendrie.Systems.PositivistYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.PositivistYear.CompareTo(Calendrie.Systems.PositivistYear other) -> int
Calendrie.Systems.PositivistYear.Contains(Calendrie.Systems.PositivistDate date) -> bool
Calendrie.Systems.PositivistYear.Contains(Calendrie.Systems.PositivistMonth month) -> bool
Calendrie.Systems.PositivistYear.CountDays() -> int
Calendrie.Systems.PositivistYear.CountYearsSince(Calendrie.Systems.PositivistYear other) -> int
Calendrie.Systems.PositivistYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.PositivistDate>!
Calendrie.Systems.PositivistYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.PositivistMonth>!
Calendrie.Systems.PositivistYear.Equals(Calendrie.Systems.PositivistYear other) -> bool
Calendrie.Systems.PositivistYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistYear.GetMonthOfYear(int month) -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistYear.IsLeap.get -> bool
Calendrie.Systems.PositivistYear.MaxDay.get -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistYear.MaxMonth.get -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistYear.MinDay.get -> Calendrie.Systems.PositivistDate
Calendrie.Systems.PositivistYear.MinMonth.get -> Calendrie.Systems.PositivistMonth
Calendrie.Systems.PositivistYear.NextYear() -> Calendrie.Systems.PositivistYear
Calendrie.Systems.PositivistYear.PlusYears(int years) -> Calendrie.Systems.PositivistYear
Calendrie.Systems.PositivistYear.PositivistYear() -> void
Calendrie.Systems.PositivistYear.PositivistYear(int year) -> void
Calendrie.Systems.PositivistYear.PreviousYear() -> Calendrie.Systems.PositivistYear
Calendrie.Systems.PositivistYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.PositivistDate>
Calendrie.Systems.PositivistYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.PositivistMonth>
Calendrie.Systems.PositivistYear.Year.get -> int
Calendrie.Systems.PositivistYear.YearOfCentury.get -> int
Calendrie.Systems.PositivistYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.PositivistYear.YearsSinceEpoch.get -> int
Calendrie.Systems.TabularIslamicCalendar
Calendrie.Systems.TabularIslamicCalendar.TabularIslamicCalendar() -> void
Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Century.get -> int
Calendrie.Systems.TabularIslamicDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicDate.CompareTo(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountDaysSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.TabularIslamicDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.TabularIslamicDate.CountMonthsSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.TabularIslamicDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.TabularIslamicDate.CountWeeksSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountYearsSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.Day.get -> int
Calendrie.Systems.TabularIslamicDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.TabularIslamicDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.TabularIslamicDate.DayOfYear.get -> int
Calendrie.Systems.TabularIslamicDate.DaysSinceEpoch.get -> int
Calendrie.Systems.TabularIslamicDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.TabularIslamicDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.TabularIslamicDate.Equals(Calendrie.Systems.TabularIslamicDate other) -> bool
Calendrie.Systems.TabularIslamicDate.IsIntercalary.get -> bool
Calendrie.Systems.TabularIslamicDate.Month.get -> int
Calendrie.Systems.TabularIslamicDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.NextDay() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.NextWeek() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusDays(int days) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusMonths(int months) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusWeeks(int weeks) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusYears(int years) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PreviousDay() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PreviousWeek() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.TabularIslamicDate() -> void
Calendrie.Systems.TabularIslamicDate.TabularIslamicDate(int year, int dayOfYear) -> void
Calendrie.Systems.TabularIslamicDate.TabularIslamicDate(int year, int month, int day) -> void
Calendrie.Systems.TabularIslamicDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.TabularIslamicDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.TabularIslamicDate.WithDay(int newDay) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.WithMonth(int newMonth) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.WithYear(int newYear) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Year.get -> int
Calendrie.Systems.TabularIslamicDate.YearOfCentury.get -> int
Calendrie.Systems.TabularIslamicDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.Century.get -> int
Calendrie.Systems.TabularIslamicMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicMonth.CompareTo(Calendrie.Systems.TabularIslamicMonth other) -> int
Calendrie.Systems.TabularIslamicMonth.Contains(Calendrie.Systems.TabularIslamicDate date) -> bool
Calendrie.Systems.TabularIslamicMonth.CountDays() -> int
Calendrie.Systems.TabularIslamicMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.TabularIslamicMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.TabularIslamicMonth.CountMonthsSince(Calendrie.Systems.TabularIslamicMonth other) -> int
Calendrie.Systems.TabularIslamicMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.TabularIslamicMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.TabularIslamicMonth.CountYearsSince(Calendrie.Systems.TabularIslamicMonth other) -> int
Calendrie.Systems.TabularIslamicMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.TabularIslamicMonth.Equals(Calendrie.Systems.TabularIslamicMonth other) -> bool
Calendrie.Systems.TabularIslamicMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicMonth.MaxDay.get -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicMonth.MinDay.get -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicMonth.Month.get -> int
Calendrie.Systems.TabularIslamicMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.TabularIslamicMonth.NextMonth() -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.PlusMonths(int months) -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.PlusYears(int years) -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.PreviousMonth() -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.TabularIslamicMonth() -> void
Calendrie.Systems.TabularIslamicMonth.TabularIslamicMonth(int year, int month) -> void
Calendrie.Systems.TabularIslamicMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.TabularIslamicDate>!
Calendrie.Systems.TabularIslamicMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.TabularIslamicDate>
Calendrie.Systems.TabularIslamicMonth.WithMonth(int newMonth) -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.WithYear(int newYear) -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicMonth.Year.get -> int
Calendrie.Systems.TabularIslamicMonth.YearOfCentury.get -> int
Calendrie.Systems.TabularIslamicMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicYear
Calendrie.Systems.TabularIslamicYear.Century.get -> int
Calendrie.Systems.TabularIslamicYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicYear.CompareTo(Calendrie.Systems.TabularIslamicYear other) -> int
Calendrie.Systems.TabularIslamicYear.Contains(Calendrie.Systems.TabularIslamicDate date) -> bool
Calendrie.Systems.TabularIslamicYear.Contains(Calendrie.Systems.TabularIslamicMonth month) -> bool
Calendrie.Systems.TabularIslamicYear.CountDays() -> int
Calendrie.Systems.TabularIslamicYear.CountYearsSince(Calendrie.Systems.TabularIslamicYear other) -> int
Calendrie.Systems.TabularIslamicYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.TabularIslamicDate>!
Calendrie.Systems.TabularIslamicYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.TabularIslamicMonth>!
Calendrie.Systems.TabularIslamicYear.Equals(Calendrie.Systems.TabularIslamicYear other) -> bool
Calendrie.Systems.TabularIslamicYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicYear.GetMonthOfYear(int month) -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicYear.IsLeap.get -> bool
Calendrie.Systems.TabularIslamicYear.MaxDay.get -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicYear.MaxMonth.get -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicYear.MinDay.get -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicYear.MinMonth.get -> Calendrie.Systems.TabularIslamicMonth
Calendrie.Systems.TabularIslamicYear.NextYear() -> Calendrie.Systems.TabularIslamicYear
Calendrie.Systems.TabularIslamicYear.PlusYears(int years) -> Calendrie.Systems.TabularIslamicYear
Calendrie.Systems.TabularIslamicYear.PreviousYear() -> Calendrie.Systems.TabularIslamicYear
Calendrie.Systems.TabularIslamicYear.TabularIslamicYear() -> void
Calendrie.Systems.TabularIslamicYear.TabularIslamicYear(int year) -> void
Calendrie.Systems.TabularIslamicYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.TabularIslamicDate>
Calendrie.Systems.TabularIslamicYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.TabularIslamicMonth>
Calendrie.Systems.TabularIslamicYear.Year.get -> int
Calendrie.Systems.TabularIslamicYear.YearOfCentury.get -> int
Calendrie.Systems.TabularIslamicYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicYear.YearsSinceEpoch.get -> int
Calendrie.Systems.WorldCalendar
Calendrie.Systems.WorldCalendar.WorldCalendar() -> void
Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.Century.get -> int
Calendrie.Systems.WorldDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldDate.CompareTo(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountDaysSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.WorldDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.WorldDate.CountMonthsSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.WorldDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.WorldDate.CountWeeksSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountYearsSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.Day.get -> int
Calendrie.Systems.WorldDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.WorldDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.WorldDate.DayOfYear.get -> int
Calendrie.Systems.WorldDate.DaysSinceEpoch.get -> int
Calendrie.Systems.WorldDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.WorldDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.WorldDate.Equals(Calendrie.Systems.WorldDate other) -> bool
Calendrie.Systems.WorldDate.IsBlank.get -> bool
Calendrie.Systems.WorldDate.IsIntercalary.get -> bool
Calendrie.Systems.WorldDate.IsSupplementary.get -> bool
Calendrie.Systems.WorldDate.Month.get -> int
Calendrie.Systems.WorldDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.NextDay() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.NextWeek() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusDays(int days) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusMonths(int months) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusWeeks(int weeks) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusYears(int years) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PreviousDay() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PreviousWeek() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.WorldDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.WorldDate.WithDay(int newDay) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithMonth(int newMonth) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithYear(int newYear) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WorldDate() -> void
Calendrie.Systems.WorldDate.WorldDate(int year, int dayOfYear) -> void
Calendrie.Systems.WorldDate.WorldDate(int year, int month, int day) -> void
Calendrie.Systems.WorldDate.Year.get -> int
Calendrie.Systems.WorldDate.YearOfCentury.get -> int
Calendrie.Systems.WorldDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.Century.get -> int
Calendrie.Systems.WorldMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldMonth.CompareTo(Calendrie.Systems.WorldMonth other) -> int
Calendrie.Systems.WorldMonth.Contains(Calendrie.Systems.WorldDate date) -> bool
Calendrie.Systems.WorldMonth.CountDays() -> int
Calendrie.Systems.WorldMonth.CountDaysInWorldMonth() -> int
Calendrie.Systems.WorldMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.WorldMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.WorldMonth.CountMonthsSince(Calendrie.Systems.WorldMonth other) -> int
Calendrie.Systems.WorldMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.WorldMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.WorldMonth.CountYearsSince(Calendrie.Systems.WorldMonth other) -> int
Calendrie.Systems.WorldMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.WorldMonth.Equals(Calendrie.Systems.WorldMonth other) -> bool
Calendrie.Systems.WorldMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldMonth.MaxDay.get -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldMonth.MinDay.get -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldMonth.Month.get -> int
Calendrie.Systems.WorldMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.WorldMonth.NextMonth() -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.PlusMonths(int months) -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.PlusYears(int years) -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.PreviousMonth() -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.WorldDate>!
Calendrie.Systems.WorldMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.WorldDate>
Calendrie.Systems.WorldMonth.WithMonth(int newMonth) -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.WithYear(int newYear) -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldMonth.WorldMonth() -> void
Calendrie.Systems.WorldMonth.WorldMonth(int year, int month) -> void
Calendrie.Systems.WorldMonth.Year.get -> int
Calendrie.Systems.WorldMonth.YearOfCentury.get -> int
Calendrie.Systems.WorldMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldYear
Calendrie.Systems.WorldYear.Century.get -> int
Calendrie.Systems.WorldYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldYear.CompareTo(Calendrie.Systems.WorldYear other) -> int
Calendrie.Systems.WorldYear.Contains(Calendrie.Systems.WorldDate date) -> bool
Calendrie.Systems.WorldYear.Contains(Calendrie.Systems.WorldMonth month) -> bool
Calendrie.Systems.WorldYear.CountDays() -> int
Calendrie.Systems.WorldYear.CountYearsSince(Calendrie.Systems.WorldYear other) -> int
Calendrie.Systems.WorldYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.WorldDate>!
Calendrie.Systems.WorldYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.WorldMonth>!
Calendrie.Systems.WorldYear.Equals(Calendrie.Systems.WorldYear other) -> bool
Calendrie.Systems.WorldYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldYear.GetMonthOfYear(int month) -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldYear.IsLeap.get -> bool
Calendrie.Systems.WorldYear.MaxDay.get -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldYear.MaxMonth.get -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldYear.MinDay.get -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldYear.MinMonth.get -> Calendrie.Systems.WorldMonth
Calendrie.Systems.WorldYear.NextYear() -> Calendrie.Systems.WorldYear
Calendrie.Systems.WorldYear.PlusYears(int years) -> Calendrie.Systems.WorldYear
Calendrie.Systems.WorldYear.PreviousYear() -> Calendrie.Systems.WorldYear
Calendrie.Systems.WorldYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.WorldDate>
Calendrie.Systems.WorldYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.WorldMonth>
Calendrie.Systems.WorldYear.WorldYear() -> void
Calendrie.Systems.WorldYear.WorldYear(int year) -> void
Calendrie.Systems.WorldYear.Year.get -> int
Calendrie.Systems.WorldYear.YearOfCentury.get -> int
Calendrie.Systems.WorldYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldYear.YearsSinceEpoch.get -> int
Calendrie.Systems.Zoroastrian13Calendar
Calendrie.Systems.Zoroastrian13Calendar.Zoroastrian13Calendar() -> void
Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Century.get -> int
Calendrie.Systems.Zoroastrian13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Date.CompareTo(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountDaysSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Zoroastrian13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Zoroastrian13Date.CountMonthsSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Zoroastrian13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Zoroastrian13Date.CountWeeksSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountYearsSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.Day.get -> int
Calendrie.Systems.Zoroastrian13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Zoroastrian13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Zoroastrian13Date.DayOfYear.get -> int
Calendrie.Systems.Zoroastrian13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Zoroastrian13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Zoroastrian13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Zoroastrian13Date.Equals(Calendrie.Systems.Zoroastrian13Date other) -> bool
Calendrie.Systems.Zoroastrian13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Zoroastrian13Date.IsSupplementary.get -> bool
Calendrie.Systems.Zoroastrian13Date.Month.get -> int
Calendrie.Systems.Zoroastrian13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.NextDay() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.NextWeek() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusDays(int days) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusMonths(int months) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusWeeks(int weeks) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusYears(int years) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusYears(int years, out int roundoff) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PreviousDay() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PreviousWeek() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.Zoroastrian13Date.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.Zoroastrian13Date.WithDay(int newDay) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithMonth(int newMonth) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithYear(int newYear) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Year.get -> int
Calendrie.Systems.Zoroastrian13Date.YearOfCentury.get -> int
Calendrie.Systems.Zoroastrian13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Date.Zoroastrian13Date() -> void
Calendrie.Systems.Zoroastrian13Date.Zoroastrian13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Zoroastrian13Date.Zoroastrian13Date(int year, int month, int day) -> void
Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.Century.get -> int
Calendrie.Systems.Zoroastrian13Month.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Month.CompareTo(Calendrie.Systems.Zoroastrian13Month other) -> int
Calendrie.Systems.Zoroastrian13Month.Contains(Calendrie.Systems.Zoroastrian13Date date) -> bool
Calendrie.Systems.Zoroastrian13Month.CountDays() -> int
Calendrie.Systems.Zoroastrian13Month.CountElapsedDaysInYear() -> int
Calendrie.Systems.Zoroastrian13Month.CountElapsedMonthsInYear() -> int
Calendrie.Systems.Zoroastrian13Month.CountMonthsSince(Calendrie.Systems.Zoroastrian13Month other) -> int
Calendrie.Systems.Zoroastrian13Month.CountRemainingDaysInYear() -> int
Calendrie.Systems.Zoroastrian13Month.CountRemainingMonthsInYear() -> int
Calendrie.Systems.Zoroastrian13Month.CountYearsSince(Calendrie.Systems.Zoroastrian13Month other) -> int
Calendrie.Systems.Zoroastrian13Month.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.Zoroastrian13Month.Equals(Calendrie.Systems.Zoroastrian13Month other) -> bool
Calendrie.Systems.Zoroastrian13Month.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Month.IsVirtual.get -> bool
Calendrie.Systems.Zoroastrian13Month.MaxDay.get -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Month.MinDay.get -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Month.Month.get -> int
Calendrie.Systems.Zoroastrian13Month.MonthsSinceEpoch.get -> int
Calendrie.Systems.Zoroastrian13Month.NextMonth() -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.PlusMonths(int months) -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.PlusYears(int years) -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.PreviousMonth() -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Zoroastrian13Date>!
Calendrie.Systems.Zoroastrian13Month.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Zoroastrian13Date>
Calendrie.Systems.Zoroastrian13Month.WithMonth(int newMonth) -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.WithYear(int newYear) -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Month.Year.get -> int
Calendrie.Systems.Zoroastrian13Month.YearOfCentury.get -> int
Calendrie.Systems.Zoroastrian13Month.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Month.Zoroastrian13Month() -> void
Calendrie.Systems.Zoroastrian13Month.Zoroastrian13Month(int year, int month) -> void
Calendrie.Systems.Zoroastrian13Year
Calendrie.Systems.Zoroastrian13Year.Century.get -> int
Calendrie.Systems.Zoroastrian13Year.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Year.CompareTo(Calendrie.Systems.Zoroastrian13Year other) -> int
Calendrie.Systems.Zoroastrian13Year.Contains(Calendrie.Systems.Zoroastrian13Date date) -> bool
Calendrie.Systems.Zoroastrian13Year.Contains(Calendrie.Systems.Zoroastrian13Month month) -> bool
Calendrie.Systems.Zoroastrian13Year.CountDays() -> int
Calendrie.Systems.Zoroastrian13Year.CountYearsSince(Calendrie.Systems.Zoroastrian13Year other) -> int
Calendrie.Systems.Zoroastrian13Year.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Zoroastrian13Date>!
Calendrie.Systems.Zoroastrian13Year.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.Zoroastrian13Month>!
Calendrie.Systems.Zoroastrian13Year.Equals(Calendrie.Systems.Zoroastrian13Year other) -> bool
Calendrie.Systems.Zoroastrian13Year.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Year.GetMonthOfYear(int month) -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Year.MaxDay.get -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Year.MaxMonth.get -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Year.MinDay.get -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Year.MinMonth.get -> Calendrie.Systems.Zoroastrian13Month
Calendrie.Systems.Zoroastrian13Year.NextYear() -> Calendrie.Systems.Zoroastrian13Year
Calendrie.Systems.Zoroastrian13Year.PlusYears(int years) -> Calendrie.Systems.Zoroastrian13Year
Calendrie.Systems.Zoroastrian13Year.PreviousYear() -> Calendrie.Systems.Zoroastrian13Year
Calendrie.Systems.Zoroastrian13Year.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Zoroastrian13Date>
Calendrie.Systems.Zoroastrian13Year.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.Zoroastrian13Month>
Calendrie.Systems.Zoroastrian13Year.Year.get -> int
Calendrie.Systems.Zoroastrian13Year.YearOfCentury.get -> int
Calendrie.Systems.Zoroastrian13Year.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Year.YearsSinceEpoch.get -> int
Calendrie.Systems.Zoroastrian13Year.Zoroastrian13Year() -> void
Calendrie.Systems.Zoroastrian13Year.Zoroastrian13Year(int year) -> void
Calendrie.Systems.ZoroastrianCalendar
Calendrie.Systems.ZoroastrianCalendar.ZoroastrianCalendar() -> void
Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Century.get -> int
Calendrie.Systems.ZoroastrianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianDate.CompareTo(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountDaysSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.ZoroastrianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.ZoroastrianDate.CountMonthsSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.ZoroastrianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.ZoroastrianDate.CountWeeksSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountYearsSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.Day.get -> int
Calendrie.Systems.ZoroastrianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.ZoroastrianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.ZoroastrianDate.DayOfYear.get -> int
Calendrie.Systems.ZoroastrianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.ZoroastrianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.ZoroastrianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.ZoroastrianDate.Equals(Calendrie.Systems.ZoroastrianDate other) -> bool
Calendrie.Systems.ZoroastrianDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.ZoroastrianDate.IsSupplementary.get -> bool
Calendrie.Systems.ZoroastrianDate.Month.get -> int
Calendrie.Systems.ZoroastrianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.NextDay() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.NextWeek() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusDays(int days) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusMonths(int months) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusMonths(int months, out int roundoff) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusWeeks(int weeks) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusYears(int years) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusYears(int years, out int roundoff) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PreviousDay() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PreviousWeek() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.ZoroastrianDate.ToJulianDate() -> Calendrie.Systems.JulianDate
Calendrie.Systems.ZoroastrianDate.WithDay(int newDay) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithMonth(int newMonth) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithYear(int newYear) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Year.get -> int
Calendrie.Systems.ZoroastrianDate.YearOfCentury.get -> int
Calendrie.Systems.ZoroastrianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianDate.ZoroastrianDate() -> void
Calendrie.Systems.ZoroastrianDate.ZoroastrianDate(int year, int dayOfYear) -> void
Calendrie.Systems.ZoroastrianDate.ZoroastrianDate(int year, int month, int day) -> void
Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.Century.get -> int
Calendrie.Systems.ZoroastrianMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianMonth.CompareTo(Calendrie.Systems.ZoroastrianMonth other) -> int
Calendrie.Systems.ZoroastrianMonth.Contains(Calendrie.Systems.ZoroastrianDate date) -> bool
Calendrie.Systems.ZoroastrianMonth.CountDays() -> int
Calendrie.Systems.ZoroastrianMonth.CountElapsedDaysInYear() -> int
Calendrie.Systems.ZoroastrianMonth.CountElapsedMonthsInYear() -> int
Calendrie.Systems.ZoroastrianMonth.CountMonthsSince(Calendrie.Systems.ZoroastrianMonth other) -> int
Calendrie.Systems.ZoroastrianMonth.CountRemainingDaysInYear() -> int
Calendrie.Systems.ZoroastrianMonth.CountRemainingMonthsInYear() -> int
Calendrie.Systems.ZoroastrianMonth.CountYearsSince(Calendrie.Systems.ZoroastrianMonth other) -> int
Calendrie.Systems.ZoroastrianMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Systems.ZoroastrianMonth.Equals(Calendrie.Systems.ZoroastrianMonth other) -> bool
Calendrie.Systems.ZoroastrianMonth.GetDayOfMonth(int dayOfMonth) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianMonth.MaxDay.get -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianMonth.MinDay.get -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianMonth.Month.get -> int
Calendrie.Systems.ZoroastrianMonth.MonthsSinceEpoch.get -> int
Calendrie.Systems.ZoroastrianMonth.NextMonth() -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.PlusMonths(int months) -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.PlusYears(int years) -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.PreviousMonth() -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.ToEnumerable() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.ZoroastrianDate>!
Calendrie.Systems.ZoroastrianMonth.ToRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.ZoroastrianDate>
Calendrie.Systems.ZoroastrianMonth.WithMonth(int newMonth) -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.WithYear(int newYear) -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianMonth.Year.get -> int
Calendrie.Systems.ZoroastrianMonth.YearOfCentury.get -> int
Calendrie.Systems.ZoroastrianMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianMonth.ZoroastrianMonth() -> void
Calendrie.Systems.ZoroastrianMonth.ZoroastrianMonth(int year, int month) -> void
Calendrie.Systems.ZoroastrianYear
Calendrie.Systems.ZoroastrianYear.Century.get -> int
Calendrie.Systems.ZoroastrianYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianYear.CompareTo(Calendrie.Systems.ZoroastrianYear other) -> int
Calendrie.Systems.ZoroastrianYear.Contains(Calendrie.Systems.ZoroastrianDate date) -> bool
Calendrie.Systems.ZoroastrianYear.Contains(Calendrie.Systems.ZoroastrianMonth month) -> bool
Calendrie.Systems.ZoroastrianYear.CountDays() -> int
Calendrie.Systems.ZoroastrianYear.CountYearsSince(Calendrie.Systems.ZoroastrianYear other) -> int
Calendrie.Systems.ZoroastrianYear.EnumerateDays() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.ZoroastrianDate>!
Calendrie.Systems.ZoroastrianYear.EnumerateMonths() -> System.Collections.Generic.IEnumerable<Calendrie.Systems.ZoroastrianMonth>!
Calendrie.Systems.ZoroastrianYear.Equals(Calendrie.Systems.ZoroastrianYear other) -> bool
Calendrie.Systems.ZoroastrianYear.GetDayOfYear(int dayOfYear) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianYear.GetMonthOfYear(int month) -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianYear.MaxDay.get -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianYear.MaxMonth.get -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianYear.MinDay.get -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianYear.MinMonth.get -> Calendrie.Systems.ZoroastrianMonth
Calendrie.Systems.ZoroastrianYear.NextYear() -> Calendrie.Systems.ZoroastrianYear
Calendrie.Systems.ZoroastrianYear.PlusYears(int years) -> Calendrie.Systems.ZoroastrianYear
Calendrie.Systems.ZoroastrianYear.PreviousYear() -> Calendrie.Systems.ZoroastrianYear
Calendrie.Systems.ZoroastrianYear.ToDayRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.ZoroastrianDate>
Calendrie.Systems.ZoroastrianYear.ToMonthRange() -> Calendrie.Core.Intervals.Range<Calendrie.Systems.ZoroastrianMonth>
Calendrie.Systems.ZoroastrianYear.Year.get -> int
Calendrie.Systems.ZoroastrianYear.YearOfCentury.get -> int
Calendrie.Systems.ZoroastrianYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianYear.YearsSinceEpoch.get -> int
Calendrie.Systems.ZoroastrianYear.ZoroastrianYear() -> void
Calendrie.Systems.ZoroastrianYear.ZoroastrianYear(int year) -> void
Calendrie.YearNumbering
const Calendrie.Core.CalendricalConstants.DaysInWanderingYear = 365 -> int
const Calendrie.Core.CalendricalConstants.DaysInWeek = 7 -> int
const Calendrie.Core.CalendricalConstants.DaysPer4JulianYearCycle = 1461 -> int
const Calendrie.Core.Schemas.Coptic12Schema.MonthsPerYear = 12 -> int
const Calendrie.Core.Schemas.Coptic13Schema.MonthsPerYear = 13 -> int
const Calendrie.Core.Schemas.Coptic13Schema.VirtualMonth = 13 -> int
const Calendrie.Core.Schemas.CopticSchema.DaysInCopticMonth = 30 -> int
const Calendrie.Core.Schemas.CopticSchema.DaysPer4YearCycle = 1461 -> int
const Calendrie.Core.Schemas.Egyptian12Schema.MonthsPerYear = 12 -> int
const Calendrie.Core.Schemas.Egyptian13Schema.MonthsPerYear = 13 -> int
const Calendrie.Core.Schemas.Egyptian13Schema.VirtualMonth = 13 -> int
const Calendrie.Core.Schemas.EgyptianSchema.DaysInEgyptianMonth = 30 -> int
const Calendrie.Core.Schemas.EgyptianSchema.DaysInYear = 365 -> int
const Calendrie.Core.Schemas.FrenchRepublican12Schema.MonthsPerYear = 12 -> int
const Calendrie.Core.Schemas.FrenchRepublican13Schema.MonthsPerYear = 13 -> int
const Calendrie.Core.Schemas.FrenchRepublican13Schema.VirtualMonth = 13 -> int
const Calendrie.Core.Schemas.FrenchRepublicanSchema.DaysInFrenchRepublicanMonth = 30 -> int
const Calendrie.Core.Schemas.FrenchRepublicanSchema.DaysPer4000YearCycle = 1460969 -> long
const Calendrie.Core.Schemas.GJSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.GJSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.GJSchema.DaysInYearAfterFebruary = 306 -> int
const Calendrie.Core.Schemas.GJSchema.MonthsPerYear = 12 -> int
const Calendrie.Core.Schemas.GregorianSchema.DaysPer100YearSubcycle = 36524 -> int
const Calendrie.Core.Schemas.GregorianSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.GregorianSchema.DaysPer4YearSubcycle = 1461 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysInInternationalFixedMonth = 28 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.MonthsPerYear = 13 -> int
const Calendrie.Core.Schemas.JulianSchema.DaysPer4YearCycle = 1461 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysInYearBeforeJuly = 186 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysPer128YearSubcycle = 46751 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysPer2820YearCycle = 1029983 -> int
const Calendrie.Core.Schemas.Persian2820Schema.MonthsPerYear = 12 -> int
const Calendrie.Core.Schemas.Persian2820Schema.Year0 = 474 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysInPositivistMonth = 28 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.PositivistSchema.MonthsPerYear = 13 -> int
const Calendrie.Core.Schemas.PtolemaicSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.PtolemaicSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.DaysInCommonYear = 354 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.DaysInLeapYear = 355 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.DaysPer30YearCycle = 10631 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.MonthsPerYear = 12 -> int
const Calendrie.Core.Schemas.WorldSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.WorldSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.WorldSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.WorldSchema.MonthsPerYear = 12 -> int
const Calendrie.Core.TemporalConstants.HoursPerDay = 24 -> int
const Calendrie.Core.TemporalConstants.MicrosecondsPerDay = 86400000000 -> long
const Calendrie.Core.TemporalConstants.MicrosecondsPerHour = 3600000000 -> long
const Calendrie.Core.TemporalConstants.MicrosecondsPerMinute = 60000000 -> int
const Calendrie.Core.TemporalConstants.MicrosecondsPerSecond = 1000000 -> int
const Calendrie.Core.TemporalConstants.MillisecondsPerDay = 86400000 -> int
const Calendrie.Core.TemporalConstants.MillisecondsPerHour = 3600000 -> int
const Calendrie.Core.TemporalConstants.MillisecondsPerMinute = 60000 -> int
const Calendrie.Core.TemporalConstants.MillisecondsPerSecond = 1000 -> int
const Calendrie.Core.TemporalConstants.MinutesPerDay = 1440 -> int
const Calendrie.Core.TemporalConstants.MinutesPerHour = 60 -> int
const Calendrie.Core.TemporalConstants.NanosecondsPerDay = 86400000000000 -> long
const Calendrie.Core.TemporalConstants.NanosecondsPerHour = 3600000000000 -> long
const Calendrie.Core.TemporalConstants.NanosecondsPerMinute = 60000000000 -> long
const Calendrie.Core.TemporalConstants.NanosecondsPerSecond = 1000000000 -> int
const Calendrie.Core.TemporalConstants.SecondsPerDay = 86400 -> int
const Calendrie.Core.TemporalConstants.SecondsPerHour = 3600 -> int
const Calendrie.Core.TemporalConstants.SecondsPerMinute = 60 -> int
const Calendrie.Core.TemporalConstants.TicksPerDay = 864000000000 -> long
const Calendrie.Core.TemporalConstants.TicksPerHour = 36000000000 -> long
const Calendrie.Core.TemporalConstants.TicksPerMinute = 600000000 -> int
const Calendrie.Core.TemporalConstants.TicksPerSecond = 10000000 -> int
const Calendrie.DayNumber.MaxDaysSinceZero = 2147483646 -> int
const Calendrie.DayNumber.MinDaysSinceZero = -2147483647 -> int
const Calendrie.Ord.MaxAlgebraicValue = 2147483647 -> int
const Calendrie.Ord.MinAlgebraicValue = -2147483646 -> int
const Calendrie.Systems.Armenian13Year.MonthCount = 13 -> int
const Calendrie.Systems.ArmenianYear.MonthCount = 12 -> int
const Calendrie.Systems.CivilYear.MonthCount = 12 -> int
const Calendrie.Systems.Coptic13Year.MonthCount = 13 -> int
const Calendrie.Systems.CopticYear.MonthCount = 12 -> int
const Calendrie.Systems.Egyptian13Year.MonthCount = 13 -> int
const Calendrie.Systems.EgyptianYear.MonthCount = 12 -> int
const Calendrie.Systems.Ethiopic13Year.MonthCount = 13 -> int
const Calendrie.Systems.EthiopicYear.MonthCount = 12 -> int
const Calendrie.Systems.FrenchRepublican13Year.MonthCount = 13 -> int
const Calendrie.Systems.FrenchRepublicanYear.MonthCount = 12 -> int
const Calendrie.Systems.GregorianYear.MonthCount = 12 -> int
const Calendrie.Systems.InternationalFixedYear.MonthCount = 13 -> int
const Calendrie.Systems.JulianYear.MonthCount = 12 -> int
const Calendrie.Systems.Persian2820Year.MonthCount = 12 -> int
const Calendrie.Systems.PositivistYear.MonthCount = 13 -> int
const Calendrie.Systems.TabularIslamicYear.MonthCount = 12 -> int
const Calendrie.Systems.WorldYear.MonthCount = 12 -> int
const Calendrie.Systems.Zoroastrian13Year.MonthCount = 13 -> int
const Calendrie.Systems.ZoroastrianYear.MonthCount = 12 -> int
override Calendrie.Core.Intervals.LowerRay<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.LowerRay<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.LowerRay<T>.ToString() -> string!
override Calendrie.Core.Intervals.OrderedPair<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.OrderedPair<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.OrderedPair<T>.ToString() -> string!
override Calendrie.Core.Intervals.Range<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.Range<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.Range<T>.ToString() -> string!
override Calendrie.Core.Intervals.RangeSet<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.RangeSet<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.RangeSet<T>.ToString() -> string!
override Calendrie.Core.Intervals.UpperRay<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.UpperRay<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.UpperRay<T>.ToString() -> string!
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.CountDaysInYearBeforeMonth(int y, int m) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetMonth(int y, int doy, out int d) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetStartOfYear(int y) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetStartOfYearInMonths(int y) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetYear(int daysSinceEpoch) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetYear(int daysSinceEpoch, out int doy) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.CountDaysInYearBeforeMonth(int y, int m) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetMonth(int y, int doy, out int d) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetStartOfYear(int y) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetYear(int daysSinceEpoch) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetYear(int daysSinceEpoch, out int doy) -> int
override Calendrie.DayNumber.Equals(object? obj) -> bool
override Calendrie.DayNumber.GetHashCode() -> int
override Calendrie.DayNumber.ToString() -> string!
override Calendrie.Hemerology.Calendar.ToString() -> string!
override Calendrie.Ord.Equals(object? obj) -> bool
override Calendrie.Ord.GetHashCode() -> int
override Calendrie.Ord.ToString() -> string!
override Calendrie.Systems.Armenian13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Armenian13Date.GetHashCode() -> int
override Calendrie.Systems.Armenian13Date.ToString() -> string!
override Calendrie.Systems.Armenian13Month.Equals(object? obj) -> bool
override Calendrie.Systems.Armenian13Month.GetHashCode() -> int
override Calendrie.Systems.Armenian13Month.ToString() -> string!
override Calendrie.Systems.Armenian13Year.Equals(object? obj) -> bool
override Calendrie.Systems.Armenian13Year.GetHashCode() -> int
override Calendrie.Systems.Armenian13Year.ToString() -> string!
override Calendrie.Systems.ArmenianDate.Equals(object? obj) -> bool
override Calendrie.Systems.ArmenianDate.GetHashCode() -> int
override Calendrie.Systems.ArmenianDate.ToString() -> string!
override Calendrie.Systems.ArmenianMonth.Equals(object? obj) -> bool
override Calendrie.Systems.ArmenianMonth.GetHashCode() -> int
override Calendrie.Systems.ArmenianMonth.ToString() -> string!
override Calendrie.Systems.ArmenianYear.Equals(object? obj) -> bool
override Calendrie.Systems.ArmenianYear.GetHashCode() -> int
override Calendrie.Systems.ArmenianYear.ToString() -> string!
override Calendrie.Systems.CivilDate.Equals(object? obj) -> bool
override Calendrie.Systems.CivilDate.GetHashCode() -> int
override Calendrie.Systems.CivilDate.ToString() -> string!
override Calendrie.Systems.CivilMonth.Equals(object? obj) -> bool
override Calendrie.Systems.CivilMonth.GetHashCode() -> int
override Calendrie.Systems.CivilMonth.ToString() -> string!
override Calendrie.Systems.CivilYear.Equals(object? obj) -> bool
override Calendrie.Systems.CivilYear.GetHashCode() -> int
override Calendrie.Systems.CivilYear.ToString() -> string!
override Calendrie.Systems.Coptic13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Coptic13Date.GetHashCode() -> int
override Calendrie.Systems.Coptic13Date.ToString() -> string!
override Calendrie.Systems.Coptic13Month.Equals(object? obj) -> bool
override Calendrie.Systems.Coptic13Month.GetHashCode() -> int
override Calendrie.Systems.Coptic13Month.ToString() -> string!
override Calendrie.Systems.Coptic13Year.Equals(object? obj) -> bool
override Calendrie.Systems.Coptic13Year.GetHashCode() -> int
override Calendrie.Systems.Coptic13Year.ToString() -> string!
override Calendrie.Systems.CopticDate.Equals(object? obj) -> bool
override Calendrie.Systems.CopticDate.GetHashCode() -> int
override Calendrie.Systems.CopticDate.ToString() -> string!
override Calendrie.Systems.CopticMonth.Equals(object? obj) -> bool
override Calendrie.Systems.CopticMonth.GetHashCode() -> int
override Calendrie.Systems.CopticMonth.ToString() -> string!
override Calendrie.Systems.CopticYear.Equals(object? obj) -> bool
override Calendrie.Systems.CopticYear.GetHashCode() -> int
override Calendrie.Systems.CopticYear.ToString() -> string!
override Calendrie.Systems.Egyptian13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Egyptian13Date.GetHashCode() -> int
override Calendrie.Systems.Egyptian13Date.ToString() -> string!
override Calendrie.Systems.Egyptian13Month.Equals(object? obj) -> bool
override Calendrie.Systems.Egyptian13Month.GetHashCode() -> int
override Calendrie.Systems.Egyptian13Month.ToString() -> string!
override Calendrie.Systems.Egyptian13Year.Equals(object? obj) -> bool
override Calendrie.Systems.Egyptian13Year.GetHashCode() -> int
override Calendrie.Systems.Egyptian13Year.ToString() -> string!
override Calendrie.Systems.EgyptianDate.Equals(object? obj) -> bool
override Calendrie.Systems.EgyptianDate.GetHashCode() -> int
override Calendrie.Systems.EgyptianDate.ToString() -> string!
override Calendrie.Systems.EgyptianMonth.Equals(object? obj) -> bool
override Calendrie.Systems.EgyptianMonth.GetHashCode() -> int
override Calendrie.Systems.EgyptianMonth.ToString() -> string!
override Calendrie.Systems.EgyptianYear.Equals(object? obj) -> bool
override Calendrie.Systems.EgyptianYear.GetHashCode() -> int
override Calendrie.Systems.EgyptianYear.ToString() -> string!
override Calendrie.Systems.Ethiopic13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Ethiopic13Date.GetHashCode() -> int
override Calendrie.Systems.Ethiopic13Date.ToString() -> string!
override Calendrie.Systems.Ethiopic13Month.Equals(object? obj) -> bool
override Calendrie.Systems.Ethiopic13Month.GetHashCode() -> int
override Calendrie.Systems.Ethiopic13Month.ToString() -> string!
override Calendrie.Systems.Ethiopic13Year.Equals(object? obj) -> bool
override Calendrie.Systems.Ethiopic13Year.GetHashCode() -> int
override Calendrie.Systems.Ethiopic13Year.ToString() -> string!
override Calendrie.Systems.EthiopicDate.Equals(object? obj) -> bool
override Calendrie.Systems.EthiopicDate.GetHashCode() -> int
override Calendrie.Systems.EthiopicDate.ToString() -> string!
override Calendrie.Systems.EthiopicMonth.Equals(object? obj) -> bool
override Calendrie.Systems.EthiopicMonth.GetHashCode() -> int
override Calendrie.Systems.EthiopicMonth.ToString() -> string!
override Calendrie.Systems.EthiopicYear.Equals(object? obj) -> bool
override Calendrie.Systems.EthiopicYear.GetHashCode() -> int
override Calendrie.Systems.EthiopicYear.ToString() -> string!
override Calendrie.Systems.FrenchRepublican13Date.Equals(object? obj) -> bool
override Calendrie.Systems.FrenchRepublican13Date.GetHashCode() -> int
override Calendrie.Systems.FrenchRepublican13Date.ToString() -> string!
override Calendrie.Systems.FrenchRepublican13Month.Equals(object? obj) -> bool
override Calendrie.Systems.FrenchRepublican13Month.GetHashCode() -> int
override Calendrie.Systems.FrenchRepublican13Month.ToString() -> string!
override Calendrie.Systems.FrenchRepublican13Year.Equals(object? obj) -> bool
override Calendrie.Systems.FrenchRepublican13Year.GetHashCode() -> int
override Calendrie.Systems.FrenchRepublican13Year.ToString() -> string!
override Calendrie.Systems.FrenchRepublicanDate.Equals(object? obj) -> bool
override Calendrie.Systems.FrenchRepublicanDate.GetHashCode() -> int
override Calendrie.Systems.FrenchRepublicanDate.ToString() -> string!
override Calendrie.Systems.FrenchRepublicanMonth.Equals(object? obj) -> bool
override Calendrie.Systems.FrenchRepublicanMonth.GetHashCode() -> int
override Calendrie.Systems.FrenchRepublicanMonth.ToString() -> string!
override Calendrie.Systems.FrenchRepublicanYear.Equals(object? obj) -> bool
override Calendrie.Systems.FrenchRepublicanYear.GetHashCode() -> int
override Calendrie.Systems.FrenchRepublicanYear.ToString() -> string!
override Calendrie.Systems.GregorianDate.Equals(object? obj) -> bool
override Calendrie.Systems.GregorianDate.GetHashCode() -> int
override Calendrie.Systems.GregorianDate.ToString() -> string!
override Calendrie.Systems.GregorianMonth.Equals(object? obj) -> bool
override Calendrie.Systems.GregorianMonth.GetHashCode() -> int
override Calendrie.Systems.GregorianMonth.ToString() -> string!
override Calendrie.Systems.GregorianYear.Equals(object? obj) -> bool
override Calendrie.Systems.GregorianYear.GetHashCode() -> int
override Calendrie.Systems.GregorianYear.ToString() -> string!
override Calendrie.Systems.InternationalFixedDate.Equals(object? obj) -> bool
override Calendrie.Systems.InternationalFixedDate.GetHashCode() -> int
override Calendrie.Systems.InternationalFixedDate.ToString() -> string!
override Calendrie.Systems.InternationalFixedMonth.Equals(object? obj) -> bool
override Calendrie.Systems.InternationalFixedMonth.GetHashCode() -> int
override Calendrie.Systems.InternationalFixedMonth.ToString() -> string!
override Calendrie.Systems.InternationalFixedYear.Equals(object? obj) -> bool
override Calendrie.Systems.InternationalFixedYear.GetHashCode() -> int
override Calendrie.Systems.InternationalFixedYear.ToString() -> string!
override Calendrie.Systems.JulianDate.Equals(object? obj) -> bool
override Calendrie.Systems.JulianDate.GetHashCode() -> int
override Calendrie.Systems.JulianDate.ToString() -> string!
override Calendrie.Systems.JulianMonth.Equals(object? obj) -> bool
override Calendrie.Systems.JulianMonth.GetHashCode() -> int
override Calendrie.Systems.JulianMonth.ToString() -> string!
override Calendrie.Systems.JulianYear.Equals(object? obj) -> bool
override Calendrie.Systems.JulianYear.GetHashCode() -> int
override Calendrie.Systems.JulianYear.ToString() -> string!
override Calendrie.Systems.Persian2820Date.Equals(object? obj) -> bool
override Calendrie.Systems.Persian2820Date.GetHashCode() -> int
override Calendrie.Systems.Persian2820Date.ToString() -> string!
override Calendrie.Systems.Persian2820Month.Equals(object? obj) -> bool
override Calendrie.Systems.Persian2820Month.GetHashCode() -> int
override Calendrie.Systems.Persian2820Month.ToString() -> string!
override Calendrie.Systems.Persian2820Year.Equals(object? obj) -> bool
override Calendrie.Systems.Persian2820Year.GetHashCode() -> int
override Calendrie.Systems.Persian2820Year.ToString() -> string!
override Calendrie.Systems.PositivistDate.Equals(object? obj) -> bool
override Calendrie.Systems.PositivistDate.GetHashCode() -> int
override Calendrie.Systems.PositivistDate.ToString() -> string!
override Calendrie.Systems.PositivistMonth.Equals(object? obj) -> bool
override Calendrie.Systems.PositivistMonth.GetHashCode() -> int
override Calendrie.Systems.PositivistMonth.ToString() -> string!
override Calendrie.Systems.PositivistYear.Equals(object? obj) -> bool
override Calendrie.Systems.PositivistYear.GetHashCode() -> int
override Calendrie.Systems.PositivistYear.ToString() -> string!
override Calendrie.Systems.TabularIslamicDate.Equals(object? obj) -> bool
override Calendrie.Systems.TabularIslamicDate.GetHashCode() -> int
override Calendrie.Systems.TabularIslamicDate.ToString() -> string!
override Calendrie.Systems.TabularIslamicMonth.Equals(object? obj) -> bool
override Calendrie.Systems.TabularIslamicMonth.GetHashCode() -> int
override Calendrie.Systems.TabularIslamicMonth.ToString() -> string!
override Calendrie.Systems.TabularIslamicYear.Equals(object? obj) -> bool
override Calendrie.Systems.TabularIslamicYear.GetHashCode() -> int
override Calendrie.Systems.TabularIslamicYear.ToString() -> string!
override Calendrie.Systems.WorldDate.Equals(object? obj) -> bool
override Calendrie.Systems.WorldDate.GetHashCode() -> int
override Calendrie.Systems.WorldDate.ToString() -> string!
override Calendrie.Systems.WorldMonth.Equals(object? obj) -> bool
override Calendrie.Systems.WorldMonth.GetHashCode() -> int
override Calendrie.Systems.WorldMonth.ToString() -> string!
override Calendrie.Systems.WorldYear.Equals(object? obj) -> bool
override Calendrie.Systems.WorldYear.GetHashCode() -> int
override Calendrie.Systems.WorldYear.ToString() -> string!
override Calendrie.Systems.Zoroastrian13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Zoroastrian13Date.GetHashCode() -> int
override Calendrie.Systems.Zoroastrian13Date.ToString() -> string!
override Calendrie.Systems.Zoroastrian13Month.Equals(object? obj) -> bool
override Calendrie.Systems.Zoroastrian13Month.GetHashCode() -> int
override Calendrie.Systems.Zoroastrian13Month.ToString() -> string!
override Calendrie.Systems.Zoroastrian13Year.Equals(object? obj) -> bool
override Calendrie.Systems.Zoroastrian13Year.GetHashCode() -> int
override Calendrie.Systems.Zoroastrian13Year.ToString() -> string!
override Calendrie.Systems.ZoroastrianDate.Equals(object? obj) -> bool
override Calendrie.Systems.ZoroastrianDate.GetHashCode() -> int
override Calendrie.Systems.ZoroastrianDate.ToString() -> string!
override Calendrie.Systems.ZoroastrianMonth.Equals(object? obj) -> bool
override Calendrie.Systems.ZoroastrianMonth.GetHashCode() -> int
override Calendrie.Systems.ZoroastrianMonth.ToString() -> string!
override Calendrie.Systems.ZoroastrianYear.Equals(object? obj) -> bool
override Calendrie.Systems.ZoroastrianYear.GetHashCode() -> int
override Calendrie.Systems.ZoroastrianYear.ToString() -> string!
override sealed Calendrie.Core.CalendricalSegment.ToString() -> string!
override sealed Calendrie.Core.Prototyping.NonRegularSchemaPrototype.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.RegularSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.RegularSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.RegularSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.RegularSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.RegularSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.RegularSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.RegularSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.CivilSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.CivilSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.CivilSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.CivilSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.CivilSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.CivilSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic12Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic13Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic13Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.CopticSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.CopticSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.CopticSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.CopticSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.Egyptian12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Egyptian12Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Egyptian13Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.EgyptianSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.GetYear(int daysSinceEpoch, out int doy) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.EgyptianSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.EgyptianSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.GetYear(int daysSinceEpoch, out int doy) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.GJSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.GJSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.GJSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.GJSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.GJSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.GregorianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.GregorianSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.GregorianSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.GregorianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.GregorianSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.GregorianSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.JulianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.JulianSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.JulianSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.JulianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.JulianSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.JulianSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.PositivistSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.PtolemaicSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.PtolemaicSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PtolemaicSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.PtolemaicSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.WorldSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.MonthsInYear.get -> int
override sealed Calendrie.Core.Schemas.WorldSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
static Calendrie.Core.CalendricalSchema.DefaultSupportedYears.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.Core.CalendricalSchema.MaxSupportedYears.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.Core.CalendricalSegment.Create(Calendrie.Core.ICalendricalSchema! schema, Calendrie.Core.Intervals.Range<int> supportedYears) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.CreateMaximal(Calendrie.Core.ICalendricalSchema! schema) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.CreateMaximalOnOrAfterYear1(Calendrie.Core.ICalendricalSchema! schema) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.LowerRay<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> Calendrie.Core.Intervals.LowerRay<int>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> Calendrie.Core.Intervals.Range<int>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> Calendrie.Core.Intervals.UpperRay<int>?
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.LowerRay<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.Range<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.LowerRay<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.Range<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.UpperRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.Interval.Span<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.Interval.Span<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.Range<T> y) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Interval.Span<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.Interval.Union<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.Interval.Union<T>(Calendrie.Core.Intervals.UpperRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.LowerRay.Complement(this Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> ray) -> Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber>
static Calendrie.Core.Intervals.LowerRay.Complement(this Calendrie.Core.Intervals.LowerRay<int> ray) -> Calendrie.Core.Intervals.UpperRay<int>
static Calendrie.Core.Intervals.LowerRay.EndingAt<T>(T max) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.LowerRay<T>.operator !=(Calendrie.Core.Intervals.LowerRay<T> left, Calendrie.Core.Intervals.LowerRay<T> right) -> bool
static Calendrie.Core.Intervals.LowerRay<T>.operator ==(Calendrie.Core.Intervals.LowerRay<T> left, Calendrie.Core.Intervals.LowerRay<T> right) -> bool
static Calendrie.Core.Intervals.OrderedPair.Create<T>(T x, T y) -> Calendrie.Core.Intervals.OrderedPair<T>
static Calendrie.Core.Intervals.OrderedPair<T>.operator !=(Calendrie.Core.Intervals.OrderedPair<T> left, Calendrie.Core.Intervals.OrderedPair<T> right) -> bool
static Calendrie.Core.Intervals.OrderedPair<T>.operator ==(Calendrie.Core.Intervals.OrderedPair<T> left, Calendrie.Core.Intervals.OrderedPair<T> right) -> bool
static Calendrie.Core.Intervals.Range.Count(this Calendrie.Core.Intervals.Range<Calendrie.DayNumber> range) -> int
static Calendrie.Core.Intervals.Range.Count(this Calendrie.Core.Intervals.Range<int> range) -> int
static Calendrie.Core.Intervals.Range.Create<T>(T min, T max) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.EndingAt<T>(T max) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.EndingAt<T>(T max, int length) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.FromEndpoints<T>(Calendrie.Core.Intervals.OrderedPair<T> endpoints) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.LongCount(this Calendrie.Core.Intervals.Range<Calendrie.DayNumber> range) -> long
static Calendrie.Core.Intervals.Range.LongCount(this Calendrie.Core.Intervals.Range<int> range) -> long
static Calendrie.Core.Intervals.Range.Maximal32.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.Core.Intervals.Range.Maximal<T>() -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.Singleton<T>(T value) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.StartingAt<T>(T min) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.StartingAt<T>(T min, int length) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.ToEnumerable(this Calendrie.Core.Intervals.Range<Calendrie.DayNumber> range) -> System.Collections.Generic.IEnumerable<Calendrie.DayNumber>!
static Calendrie.Core.Intervals.Range.ToEnumerable(this Calendrie.Core.Intervals.Range<int> range) -> System.Collections.Generic.IEnumerable<int>!
static Calendrie.Core.Intervals.Range<T>.operator !=(Calendrie.Core.Intervals.Range<T> left, Calendrie.Core.Intervals.Range<T> right) -> bool
static Calendrie.Core.Intervals.Range<T>.operator ==(Calendrie.Core.Intervals.Range<T> left, Calendrie.Core.Intervals.Range<T> right) -> bool
static Calendrie.Core.Intervals.RangeSet.Create<T>(T min, T max) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.RangeSet.Empty<T>() -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.RangeSet.FromEndpoints<T>(Calendrie.Core.Intervals.OrderedPair<T> endpoints) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.RangeSet<T>.operator !=(Calendrie.Core.Intervals.RangeSet<T> left, Calendrie.Core.Intervals.RangeSet<T> right) -> bool
static Calendrie.Core.Intervals.RangeSet<T>.operator ==(Calendrie.Core.Intervals.RangeSet<T> left, Calendrie.Core.Intervals.RangeSet<T> right) -> bool
static Calendrie.Core.Intervals.UpperRay.Complement(this Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> ray) -> Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber>
static Calendrie.Core.Intervals.UpperRay.Complement(this Calendrie.Core.Intervals.UpperRay<int> ray) -> Calendrie.Core.Intervals.LowerRay<int>
static Calendrie.Core.Intervals.UpperRay.StartingAt<T>(T min) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.UpperRay<T>.operator !=(Calendrie.Core.Intervals.UpperRay<T> left, Calendrie.Core.Intervals.UpperRay<T> right) -> bool
static Calendrie.Core.Intervals.UpperRay<T>.operator ==(Calendrie.Core.Intervals.UpperRay<T> left, Calendrie.Core.Intervals.UpperRay<T> right) -> bool
static Calendrie.DateParts.AtStartOfMonth(int y, int m) -> Calendrie.DateParts
static Calendrie.DateParts.AtStartOfYear(int y) -> Calendrie.DateParts
static Calendrie.DateParts.operator <(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DateParts.operator <=(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DateParts.operator >(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DateParts.operator >=(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DayNumber.FromGregorianOrdinalParts(int year, int dayOfYear) -> Calendrie.DayNumber
static Calendrie.DayNumber.FromGregorianParts(int year, int month, int day) -> Calendrie.DayNumber
static Calendrie.DayNumber.FromJulianOrdinalParts(int year, int dayOfYear) -> Calendrie.DayNumber
static Calendrie.DayNumber.FromJulianParts(int year, int month, int day) -> Calendrie.DayNumber
static Calendrie.DayNumber.GregorianDomain.get -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>
static Calendrie.DayNumber.JulianDomain.get -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>
static Calendrie.DayNumber.Max(Calendrie.DayNumber x, Calendrie.DayNumber y) -> Calendrie.DayNumber
static Calendrie.DayNumber.MaxValue.get -> Calendrie.DayNumber
static Calendrie.DayNumber.Min(Calendrie.DayNumber x, Calendrie.DayNumber y) -> Calendrie.DayNumber
static Calendrie.DayNumber.MinValue.get -> Calendrie.DayNumber
static Calendrie.DayNumber.operator !=(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator +(Calendrie.DayNumber value, int days) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator ++(Calendrie.DayNumber value) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator -(Calendrie.DayNumber left, Calendrie.DayNumber right) -> int
static Calendrie.DayNumber.operator -(Calendrie.DayNumber value, int days) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator --(Calendrie.DayNumber value) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator <(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator <=(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator ==(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator >(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator >=(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.Zero.get -> Calendrie.DayNumber
static Calendrie.DayZero.Armenian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Coptic.get -> Calendrie.DayNumber
static Calendrie.DayZero.Egyptian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Ethiopic.get -> Calendrie.DayNumber
static Calendrie.DayZero.FrenchRepublican.get -> Calendrie.DayNumber
static Calendrie.DayZero.Gregorian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Holocene.get -> Calendrie.DayNumber
static Calendrie.DayZero.Julian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Minguo.get -> Calendrie.DayNumber
static Calendrie.DayZero.NewStyle.get -> Calendrie.DayNumber
static Calendrie.DayZero.OldStyle.get -> Calendrie.DayNumber
static Calendrie.DayZero.Persian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Positivist.get -> Calendrie.DayNumber
static Calendrie.DayZero.RataDie.get -> Calendrie.DayNumber
static Calendrie.DayZero.SundayBeforeGregorian.get -> Calendrie.DayNumber
static Calendrie.DayZero.TabularIslamic.get -> Calendrie.DayNumber
static Calendrie.DayZero.Tropicalia.get -> Calendrie.DayNumber
static Calendrie.DayZero.Zoroastrian.get -> Calendrie.DayNumber
static Calendrie.Horology.LocalSystemClock.Instance.get -> Calendrie.Horology.LocalSystemClock!
static Calendrie.Horology.UtcSystemClock.Instance.get -> Calendrie.Horology.UtcSystemClock!
static Calendrie.MonthParts.AtStartOfYear(int y) -> Calendrie.MonthParts
static Calendrie.MonthParts.operator <(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.MonthParts.operator <=(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.MonthParts.operator >(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.MonthParts.operator >=(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.Ord.explicit operator int(Calendrie.Ord ord) -> int
static Calendrie.Ord.First.get -> Calendrie.Ord
static Calendrie.Ord.FromInt32(int value) -> Calendrie.Ord
static Calendrie.Ord.FromRank(int rank) -> Calendrie.Ord
static Calendrie.Ord.Max(Calendrie.Ord left, Calendrie.Ord right) -> Calendrie.Ord
static Calendrie.Ord.MaxValue.get -> Calendrie.Ord
static Calendrie.Ord.Min(Calendrie.Ord left, Calendrie.Ord right) -> Calendrie.Ord
static Calendrie.Ord.MinValue.get -> Calendrie.Ord
static Calendrie.Ord.operator !=(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator +(Calendrie.Ord ord, int num) -> Calendrie.Ord
static Calendrie.Ord.operator ++(Calendrie.Ord ord) -> Calendrie.Ord
static Calendrie.Ord.operator -(Calendrie.Ord left, Calendrie.Ord right) -> int
static Calendrie.Ord.operator -(Calendrie.Ord ord) -> Calendrie.Ord
static Calendrie.Ord.operator -(Calendrie.Ord ord, int num) -> Calendrie.Ord
static Calendrie.Ord.operator --(Calendrie.Ord ord) -> Calendrie.Ord
static Calendrie.Ord.operator <(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator <=(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator ==(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator >(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator >=(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.Zeroth.get -> Calendrie.Ord
static Calendrie.OrdinalParts.AtStartOfYear(int y) -> Calendrie.OrdinalParts
static Calendrie.OrdinalParts.operator <(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.OrdinalParts.operator <=(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.OrdinalParts.operator >(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.OrdinalParts.operator >=(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.Systems.Armenian13Calendar.MaxYear.get -> int
static Calendrie.Systems.Armenian13Calendar.MinYear.get -> int
static Calendrie.Systems.Armenian13Date.Calendar.get -> Calendrie.Systems.Armenian13Calendar!
static Calendrie.Systems.Armenian13Date.Create(int year, int dayOfYear) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.Create(int year, int month, int day) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.Armenian13Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.Armenian13Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.Armenian13Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.Armenian13Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.Armenian13Date date) -> Calendrie.DayNumber
static Calendrie.Systems.Armenian13Date.Max(Calendrie.Systems.Armenian13Date x, Calendrie.Systems.Armenian13Date y) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.MaxValue.get -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.Min(Calendrie.Systems.Armenian13Date x, Calendrie.Systems.Armenian13Date y) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.MinValue.get -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator !=(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator +(Calendrie.Systems.Armenian13Date value, int days) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator ++(Calendrie.Systems.Armenian13Date value) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator -(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> int
static Calendrie.Systems.Armenian13Date.operator -(Calendrie.Systems.Armenian13Date value, int days) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator --(Calendrie.Systems.Armenian13Date value) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator <(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator <=(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator ==(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator >(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator >=(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.Armenian13Date?
static Calendrie.Systems.Armenian13Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.Armenian13Date?
static Calendrie.Systems.Armenian13Month.Calendar.get -> Calendrie.Systems.Armenian13Calendar!
static Calendrie.Systems.Armenian13Month.Create(int year, int month) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.FromDate(Calendrie.Systems.Armenian13Date date) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.Max(Calendrie.Systems.Armenian13Month x, Calendrie.Systems.Armenian13Month y) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.MaxValue.get -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.Min(Calendrie.Systems.Armenian13Month x, Calendrie.Systems.Armenian13Month y) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.MinValue.get -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.operator !=(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> bool
static Calendrie.Systems.Armenian13Month.operator +(Calendrie.Systems.Armenian13Month value, int months) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.operator ++(Calendrie.Systems.Armenian13Month value) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.operator -(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> int
static Calendrie.Systems.Armenian13Month.operator -(Calendrie.Systems.Armenian13Month value, int months) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.operator --(Calendrie.Systems.Armenian13Month value) -> Calendrie.Systems.Armenian13Month
static Calendrie.Systems.Armenian13Month.operator <(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> bool
static Calendrie.Systems.Armenian13Month.operator <=(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> bool
static Calendrie.Systems.Armenian13Month.operator ==(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> bool
static Calendrie.Systems.Armenian13Month.operator >(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> bool
static Calendrie.Systems.Armenian13Month.operator >=(Calendrie.Systems.Armenian13Month left, Calendrie.Systems.Armenian13Month right) -> bool
static Calendrie.Systems.Armenian13Month.TryCreate(int year, int month) -> Calendrie.Systems.Armenian13Month?
static Calendrie.Systems.Armenian13Year.Calendar.get -> Calendrie.Systems.Armenian13Calendar!
static Calendrie.Systems.Armenian13Year.Create(int year) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.FromDate(Calendrie.Systems.Armenian13Date date) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.FromMonth(Calendrie.Systems.Armenian13Month month) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.Max(Calendrie.Systems.Armenian13Year x, Calendrie.Systems.Armenian13Year y) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.MaxValue.get -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.Min(Calendrie.Systems.Armenian13Year x, Calendrie.Systems.Armenian13Year y) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.MinValue.get -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.operator !=(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> bool
static Calendrie.Systems.Armenian13Year.operator +(Calendrie.Systems.Armenian13Year value, int years) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.operator ++(Calendrie.Systems.Armenian13Year value) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.operator -(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> int
static Calendrie.Systems.Armenian13Year.operator -(Calendrie.Systems.Armenian13Year value, int years) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.operator --(Calendrie.Systems.Armenian13Year value) -> Calendrie.Systems.Armenian13Year
static Calendrie.Systems.Armenian13Year.operator <(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> bool
static Calendrie.Systems.Armenian13Year.operator <=(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> bool
static Calendrie.Systems.Armenian13Year.operator ==(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> bool
static Calendrie.Systems.Armenian13Year.operator >(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> bool
static Calendrie.Systems.Armenian13Year.operator >=(Calendrie.Systems.Armenian13Year left, Calendrie.Systems.Armenian13Year right) -> bool
static Calendrie.Systems.Armenian13Year.TryCreate(int year) -> Calendrie.Systems.Armenian13Year?
static Calendrie.Systems.ArmenianCalendar.MaxYear.get -> int
static Calendrie.Systems.ArmenianCalendar.MinYear.get -> int
static Calendrie.Systems.ArmenianDate.Calendar.get -> Calendrie.Systems.ArmenianCalendar!
static Calendrie.Systems.ArmenianDate.Create(int year, int dayOfYear) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.Create(int year, int month, int day) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.ArmenianDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.ArmenianDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.ArmenianDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.ArmenianDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.ArmenianDate date) -> Calendrie.DayNumber
static Calendrie.Systems.ArmenianDate.Max(Calendrie.Systems.ArmenianDate x, Calendrie.Systems.ArmenianDate y) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.MaxValue.get -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.Min(Calendrie.Systems.ArmenianDate x, Calendrie.Systems.ArmenianDate y) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.MinValue.get -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator !=(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator +(Calendrie.Systems.ArmenianDate value, int days) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator ++(Calendrie.Systems.ArmenianDate value) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator -(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> int
static Calendrie.Systems.ArmenianDate.operator -(Calendrie.Systems.ArmenianDate value, int days) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator --(Calendrie.Systems.ArmenianDate value) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator <(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator <=(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator ==(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator >(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator >=(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.ArmenianDate?
static Calendrie.Systems.ArmenianDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.ArmenianDate?
static Calendrie.Systems.ArmenianMonth.Calendar.get -> Calendrie.Systems.ArmenianCalendar!
static Calendrie.Systems.ArmenianMonth.Create(int year, int month) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.FromDate(Calendrie.Systems.ArmenianDate date) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.Max(Calendrie.Systems.ArmenianMonth x, Calendrie.Systems.ArmenianMonth y) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.MaxValue.get -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.Min(Calendrie.Systems.ArmenianMonth x, Calendrie.Systems.ArmenianMonth y) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.MinValue.get -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.operator !=(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> bool
static Calendrie.Systems.ArmenianMonth.operator +(Calendrie.Systems.ArmenianMonth value, int months) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.operator ++(Calendrie.Systems.ArmenianMonth value) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.operator -(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> int
static Calendrie.Systems.ArmenianMonth.operator -(Calendrie.Systems.ArmenianMonth value, int months) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.operator --(Calendrie.Systems.ArmenianMonth value) -> Calendrie.Systems.ArmenianMonth
static Calendrie.Systems.ArmenianMonth.operator <(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> bool
static Calendrie.Systems.ArmenianMonth.operator <=(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> bool
static Calendrie.Systems.ArmenianMonth.operator ==(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> bool
static Calendrie.Systems.ArmenianMonth.operator >(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> bool
static Calendrie.Systems.ArmenianMonth.operator >=(Calendrie.Systems.ArmenianMonth left, Calendrie.Systems.ArmenianMonth right) -> bool
static Calendrie.Systems.ArmenianMonth.TryCreate(int year, int month) -> Calendrie.Systems.ArmenianMonth?
static Calendrie.Systems.ArmenianYear.Calendar.get -> Calendrie.Systems.ArmenianCalendar!
static Calendrie.Systems.ArmenianYear.Create(int year) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.FromDate(Calendrie.Systems.ArmenianDate date) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.FromMonth(Calendrie.Systems.ArmenianMonth month) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.Max(Calendrie.Systems.ArmenianYear x, Calendrie.Systems.ArmenianYear y) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.MaxValue.get -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.Min(Calendrie.Systems.ArmenianYear x, Calendrie.Systems.ArmenianYear y) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.MinValue.get -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.operator !=(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> bool
static Calendrie.Systems.ArmenianYear.operator +(Calendrie.Systems.ArmenianYear value, int years) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.operator ++(Calendrie.Systems.ArmenianYear value) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.operator -(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> int
static Calendrie.Systems.ArmenianYear.operator -(Calendrie.Systems.ArmenianYear value, int years) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.operator --(Calendrie.Systems.ArmenianYear value) -> Calendrie.Systems.ArmenianYear
static Calendrie.Systems.ArmenianYear.operator <(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> bool
static Calendrie.Systems.ArmenianYear.operator <=(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> bool
static Calendrie.Systems.ArmenianYear.operator ==(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> bool
static Calendrie.Systems.ArmenianYear.operator >(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> bool
static Calendrie.Systems.ArmenianYear.operator >=(Calendrie.Systems.ArmenianYear left, Calendrie.Systems.ArmenianYear right) -> bool
static Calendrie.Systems.ArmenianYear.TryCreate(int year) -> Calendrie.Systems.ArmenianYear?
static Calendrie.Systems.CivilCalendar.MaxYear.get -> int
static Calendrie.Systems.CivilCalendar.MinYear.get -> int
static Calendrie.Systems.CivilDate.Calendar.get -> Calendrie.Systems.CivilCalendar!
static Calendrie.Systems.CivilDate.Create(int year, int dayOfYear) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.Create(int year, int month, int day) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.CivilDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.CivilDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.CivilDate date) -> Calendrie.DayNumber
static Calendrie.Systems.CivilDate.implicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.CivilDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.CivilDate.Max(Calendrie.Systems.CivilDate x, Calendrie.Systems.CivilDate y) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.MaxValue.get -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.Min(Calendrie.Systems.CivilDate x, Calendrie.Systems.CivilDate y) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.MinValue.get -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator !=(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator +(Calendrie.Systems.CivilDate value, int days) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator ++(Calendrie.Systems.CivilDate value) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator -(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> int
static Calendrie.Systems.CivilDate.operator -(Calendrie.Systems.CivilDate value, int days) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator --(Calendrie.Systems.CivilDate value) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator <(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator <=(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator ==(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator >(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator >=(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.CivilDate?
static Calendrie.Systems.CivilDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.CivilDate?
static Calendrie.Systems.CivilMonth.Calendar.get -> Calendrie.Systems.CivilCalendar!
static Calendrie.Systems.CivilMonth.Create(int year, int month) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.FromDate(Calendrie.Systems.CivilDate date) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.implicit operator Calendrie.Systems.GregorianMonth(Calendrie.Systems.CivilMonth month) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.CivilMonth.Max(Calendrie.Systems.CivilMonth x, Calendrie.Systems.CivilMonth y) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.MaxValue.get -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.Min(Calendrie.Systems.CivilMonth x, Calendrie.Systems.CivilMonth y) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.MinValue.get -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.operator !=(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> bool
static Calendrie.Systems.CivilMonth.operator +(Calendrie.Systems.CivilMonth value, int months) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.operator ++(Calendrie.Systems.CivilMonth value) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.operator -(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> int
static Calendrie.Systems.CivilMonth.operator -(Calendrie.Systems.CivilMonth value, int months) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.operator --(Calendrie.Systems.CivilMonth value) -> Calendrie.Systems.CivilMonth
static Calendrie.Systems.CivilMonth.operator <(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> bool
static Calendrie.Systems.CivilMonth.operator <=(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> bool
static Calendrie.Systems.CivilMonth.operator ==(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> bool
static Calendrie.Systems.CivilMonth.operator >(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> bool
static Calendrie.Systems.CivilMonth.operator >=(Calendrie.Systems.CivilMonth left, Calendrie.Systems.CivilMonth right) -> bool
static Calendrie.Systems.CivilMonth.TryCreate(int year, int month) -> Calendrie.Systems.CivilMonth?
static Calendrie.Systems.CivilYear.Calendar.get -> Calendrie.Systems.CivilCalendar!
static Calendrie.Systems.CivilYear.Create(int year) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.FromDate(Calendrie.Systems.CivilDate date) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.FromMonth(Calendrie.Systems.CivilMonth month) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.implicit operator Calendrie.Systems.GregorianYear(Calendrie.Systems.CivilYear year) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.CivilYear.Max(Calendrie.Systems.CivilYear x, Calendrie.Systems.CivilYear y) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.MaxValue.get -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.Min(Calendrie.Systems.CivilYear x, Calendrie.Systems.CivilYear y) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.MinValue.get -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.operator !=(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> bool
static Calendrie.Systems.CivilYear.operator +(Calendrie.Systems.CivilYear value, int years) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.operator ++(Calendrie.Systems.CivilYear value) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.operator -(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> int
static Calendrie.Systems.CivilYear.operator -(Calendrie.Systems.CivilYear value, int years) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.operator --(Calendrie.Systems.CivilYear value) -> Calendrie.Systems.CivilYear
static Calendrie.Systems.CivilYear.operator <(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> bool
static Calendrie.Systems.CivilYear.operator <=(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> bool
static Calendrie.Systems.CivilYear.operator ==(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> bool
static Calendrie.Systems.CivilYear.operator >(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> bool
static Calendrie.Systems.CivilYear.operator >=(Calendrie.Systems.CivilYear left, Calendrie.Systems.CivilYear right) -> bool
static Calendrie.Systems.CivilYear.TryCreate(int year) -> Calendrie.Systems.CivilYear?
static Calendrie.Systems.Coptic13Calendar.MaxYear.get -> int
static Calendrie.Systems.Coptic13Calendar.MinYear.get -> int
static Calendrie.Systems.Coptic13Date.Calendar.get -> Calendrie.Systems.Coptic13Calendar!
static Calendrie.Systems.Coptic13Date.Create(int year, int dayOfYear) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.Create(int year, int month, int day) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.Coptic13Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.Coptic13Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.Coptic13Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.Coptic13Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.Coptic13Date date) -> Calendrie.DayNumber
static Calendrie.Systems.Coptic13Date.Max(Calendrie.Systems.Coptic13Date x, Calendrie.Systems.Coptic13Date y) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.MaxValue.get -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.Min(Calendrie.Systems.Coptic13Date x, Calendrie.Systems.Coptic13Date y) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.MinValue.get -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator !=(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator +(Calendrie.Systems.Coptic13Date value, int days) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator ++(Calendrie.Systems.Coptic13Date value) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator -(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> int
static Calendrie.Systems.Coptic13Date.operator -(Calendrie.Systems.Coptic13Date value, int days) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator --(Calendrie.Systems.Coptic13Date value) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator <(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator <=(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator ==(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator >(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator >=(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.Coptic13Date?
static Calendrie.Systems.Coptic13Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.Coptic13Date?
static Calendrie.Systems.Coptic13Month.Calendar.get -> Calendrie.Systems.Coptic13Calendar!
static Calendrie.Systems.Coptic13Month.Create(int year, int month) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.FromDate(Calendrie.Systems.Coptic13Date date) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.Max(Calendrie.Systems.Coptic13Month x, Calendrie.Systems.Coptic13Month y) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.MaxValue.get -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.Min(Calendrie.Systems.Coptic13Month x, Calendrie.Systems.Coptic13Month y) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.MinValue.get -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.operator !=(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> bool
static Calendrie.Systems.Coptic13Month.operator +(Calendrie.Systems.Coptic13Month value, int months) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.operator ++(Calendrie.Systems.Coptic13Month value) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.operator -(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> int
static Calendrie.Systems.Coptic13Month.operator -(Calendrie.Systems.Coptic13Month value, int months) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.operator --(Calendrie.Systems.Coptic13Month value) -> Calendrie.Systems.Coptic13Month
static Calendrie.Systems.Coptic13Month.operator <(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> bool
static Calendrie.Systems.Coptic13Month.operator <=(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> bool
static Calendrie.Systems.Coptic13Month.operator ==(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> bool
static Calendrie.Systems.Coptic13Month.operator >(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> bool
static Calendrie.Systems.Coptic13Month.operator >=(Calendrie.Systems.Coptic13Month left, Calendrie.Systems.Coptic13Month right) -> bool
static Calendrie.Systems.Coptic13Month.TryCreate(int year, int month) -> Calendrie.Systems.Coptic13Month?
static Calendrie.Systems.Coptic13Year.Calendar.get -> Calendrie.Systems.Coptic13Calendar!
static Calendrie.Systems.Coptic13Year.Create(int year) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.FromDate(Calendrie.Systems.Coptic13Date date) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.FromMonth(Calendrie.Systems.Coptic13Month month) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.Max(Calendrie.Systems.Coptic13Year x, Calendrie.Systems.Coptic13Year y) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.MaxValue.get -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.Min(Calendrie.Systems.Coptic13Year x, Calendrie.Systems.Coptic13Year y) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.MinValue.get -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.operator !=(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> bool
static Calendrie.Systems.Coptic13Year.operator +(Calendrie.Systems.Coptic13Year value, int years) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.operator ++(Calendrie.Systems.Coptic13Year value) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.operator -(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> int
static Calendrie.Systems.Coptic13Year.operator -(Calendrie.Systems.Coptic13Year value, int years) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.operator --(Calendrie.Systems.Coptic13Year value) -> Calendrie.Systems.Coptic13Year
static Calendrie.Systems.Coptic13Year.operator <(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> bool
static Calendrie.Systems.Coptic13Year.operator <=(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> bool
static Calendrie.Systems.Coptic13Year.operator ==(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> bool
static Calendrie.Systems.Coptic13Year.operator >(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> bool
static Calendrie.Systems.Coptic13Year.operator >=(Calendrie.Systems.Coptic13Year left, Calendrie.Systems.Coptic13Year right) -> bool
static Calendrie.Systems.Coptic13Year.TryCreate(int year) -> Calendrie.Systems.Coptic13Year?
static Calendrie.Systems.CopticCalendar.MaxYear.get -> int
static Calendrie.Systems.CopticCalendar.MinYear.get -> int
static Calendrie.Systems.CopticDate.Calendar.get -> Calendrie.Systems.CopticCalendar!
static Calendrie.Systems.CopticDate.Create(int year, int dayOfYear) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.Create(int year, int month, int day) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.CopticDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.CopticDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.CopticDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.CopticDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.CopticDate date) -> Calendrie.DayNumber
static Calendrie.Systems.CopticDate.Max(Calendrie.Systems.CopticDate x, Calendrie.Systems.CopticDate y) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.MaxValue.get -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.Min(Calendrie.Systems.CopticDate x, Calendrie.Systems.CopticDate y) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.MinValue.get -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator !=(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator +(Calendrie.Systems.CopticDate value, int days) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator ++(Calendrie.Systems.CopticDate value) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator -(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> int
static Calendrie.Systems.CopticDate.operator -(Calendrie.Systems.CopticDate value, int days) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator --(Calendrie.Systems.CopticDate value) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator <(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator <=(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator ==(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator >(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator >=(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.CopticDate?
static Calendrie.Systems.CopticDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.CopticDate?
static Calendrie.Systems.CopticMonth.Calendar.get -> Calendrie.Systems.CopticCalendar!
static Calendrie.Systems.CopticMonth.Create(int year, int month) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.FromDate(Calendrie.Systems.CopticDate date) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.Max(Calendrie.Systems.CopticMonth x, Calendrie.Systems.CopticMonth y) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.MaxValue.get -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.Min(Calendrie.Systems.CopticMonth x, Calendrie.Systems.CopticMonth y) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.MinValue.get -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.operator !=(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> bool
static Calendrie.Systems.CopticMonth.operator +(Calendrie.Systems.CopticMonth value, int months) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.operator ++(Calendrie.Systems.CopticMonth value) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.operator -(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> int
static Calendrie.Systems.CopticMonth.operator -(Calendrie.Systems.CopticMonth value, int months) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.operator --(Calendrie.Systems.CopticMonth value) -> Calendrie.Systems.CopticMonth
static Calendrie.Systems.CopticMonth.operator <(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> bool
static Calendrie.Systems.CopticMonth.operator <=(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> bool
static Calendrie.Systems.CopticMonth.operator ==(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> bool
static Calendrie.Systems.CopticMonth.operator >(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> bool
static Calendrie.Systems.CopticMonth.operator >=(Calendrie.Systems.CopticMonth left, Calendrie.Systems.CopticMonth right) -> bool
static Calendrie.Systems.CopticMonth.TryCreate(int year, int month) -> Calendrie.Systems.CopticMonth?
static Calendrie.Systems.CopticYear.Calendar.get -> Calendrie.Systems.CopticCalendar!
static Calendrie.Systems.CopticYear.Create(int year) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.FromDate(Calendrie.Systems.CopticDate date) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.FromMonth(Calendrie.Systems.CopticMonth month) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.Max(Calendrie.Systems.CopticYear x, Calendrie.Systems.CopticYear y) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.MaxValue.get -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.Min(Calendrie.Systems.CopticYear x, Calendrie.Systems.CopticYear y) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.MinValue.get -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.operator !=(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> bool
static Calendrie.Systems.CopticYear.operator +(Calendrie.Systems.CopticYear value, int years) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.operator ++(Calendrie.Systems.CopticYear value) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.operator -(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> int
static Calendrie.Systems.CopticYear.operator -(Calendrie.Systems.CopticYear value, int years) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.operator --(Calendrie.Systems.CopticYear value) -> Calendrie.Systems.CopticYear
static Calendrie.Systems.CopticYear.operator <(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> bool
static Calendrie.Systems.CopticYear.operator <=(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> bool
static Calendrie.Systems.CopticYear.operator ==(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> bool
static Calendrie.Systems.CopticYear.operator >(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> bool
static Calendrie.Systems.CopticYear.operator >=(Calendrie.Systems.CopticYear left, Calendrie.Systems.CopticYear right) -> bool
static Calendrie.Systems.CopticYear.TryCreate(int year) -> Calendrie.Systems.CopticYear?
static Calendrie.Systems.Egyptian13Calendar.MaxYear.get -> int
static Calendrie.Systems.Egyptian13Calendar.MinYear.get -> int
static Calendrie.Systems.Egyptian13Date.Calendar.get -> Calendrie.Systems.Egyptian13Calendar!
static Calendrie.Systems.Egyptian13Date.Create(int year, int dayOfYear) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.Create(int year, int month, int day) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.Egyptian13Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.Egyptian13Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.Egyptian13Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.Egyptian13Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.Egyptian13Date date) -> Calendrie.DayNumber
static Calendrie.Systems.Egyptian13Date.Max(Calendrie.Systems.Egyptian13Date x, Calendrie.Systems.Egyptian13Date y) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.MaxValue.get -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.Min(Calendrie.Systems.Egyptian13Date x, Calendrie.Systems.Egyptian13Date y) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.MinValue.get -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.operator !=(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> bool
static Calendrie.Systems.Egyptian13Date.operator +(Calendrie.Systems.Egyptian13Date value, int days) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.operator ++(Calendrie.Systems.Egyptian13Date value) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.operator -(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> int
static Calendrie.Systems.Egyptian13Date.operator -(Calendrie.Systems.Egyptian13Date value, int days) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.operator --(Calendrie.Systems.Egyptian13Date value) -> Calendrie.Systems.Egyptian13Date
static Calendrie.Systems.Egyptian13Date.operator <(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> bool
static Calendrie.Systems.Egyptian13Date.operator <=(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> bool
static Calendrie.Systems.Egyptian13Date.operator ==(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> bool
static Calendrie.Systems.Egyptian13Date.operator >(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> bool
static Calendrie.Systems.Egyptian13Date.operator >=(Calendrie.Systems.Egyptian13Date left, Calendrie.Systems.Egyptian13Date right) -> bool
static Calendrie.Systems.Egyptian13Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.Egyptian13Date?
static Calendrie.Systems.Egyptian13Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.Egyptian13Date?
static Calendrie.Systems.Egyptian13Month.Calendar.get -> Calendrie.Systems.Egyptian13Calendar!
static Calendrie.Systems.Egyptian13Month.Create(int year, int month) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.FromDate(Calendrie.Systems.Egyptian13Date date) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.Max(Calendrie.Systems.Egyptian13Month x, Calendrie.Systems.Egyptian13Month y) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.MaxValue.get -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.Min(Calendrie.Systems.Egyptian13Month x, Calendrie.Systems.Egyptian13Month y) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.MinValue.get -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.operator !=(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> bool
static Calendrie.Systems.Egyptian13Month.operator +(Calendrie.Systems.Egyptian13Month value, int months) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.operator ++(Calendrie.Systems.Egyptian13Month value) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.operator -(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> int
static Calendrie.Systems.Egyptian13Month.operator -(Calendrie.Systems.Egyptian13Month value, int months) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.operator --(Calendrie.Systems.Egyptian13Month value) -> Calendrie.Systems.Egyptian13Month
static Calendrie.Systems.Egyptian13Month.operator <(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> bool
static Calendrie.Systems.Egyptian13Month.operator <=(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> bool
static Calendrie.Systems.Egyptian13Month.operator ==(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> bool
static Calendrie.Systems.Egyptian13Month.operator >(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> bool
static Calendrie.Systems.Egyptian13Month.operator >=(Calendrie.Systems.Egyptian13Month left, Calendrie.Systems.Egyptian13Month right) -> bool
static Calendrie.Systems.Egyptian13Month.TryCreate(int year, int month) -> Calendrie.Systems.Egyptian13Month?
static Calendrie.Systems.Egyptian13Year.Calendar.get -> Calendrie.Systems.Egyptian13Calendar!
static Calendrie.Systems.Egyptian13Year.Create(int year) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.FromDate(Calendrie.Systems.Egyptian13Date date) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.FromMonth(Calendrie.Systems.Egyptian13Month month) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.Max(Calendrie.Systems.Egyptian13Year x, Calendrie.Systems.Egyptian13Year y) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.MaxValue.get -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.Min(Calendrie.Systems.Egyptian13Year x, Calendrie.Systems.Egyptian13Year y) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.MinValue.get -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.operator !=(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> bool
static Calendrie.Systems.Egyptian13Year.operator +(Calendrie.Systems.Egyptian13Year value, int years) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.operator ++(Calendrie.Systems.Egyptian13Year value) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.operator -(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> int
static Calendrie.Systems.Egyptian13Year.operator -(Calendrie.Systems.Egyptian13Year value, int years) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.operator --(Calendrie.Systems.Egyptian13Year value) -> Calendrie.Systems.Egyptian13Year
static Calendrie.Systems.Egyptian13Year.operator <(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> bool
static Calendrie.Systems.Egyptian13Year.operator <=(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> bool
static Calendrie.Systems.Egyptian13Year.operator ==(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> bool
static Calendrie.Systems.Egyptian13Year.operator >(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> bool
static Calendrie.Systems.Egyptian13Year.operator >=(Calendrie.Systems.Egyptian13Year left, Calendrie.Systems.Egyptian13Year right) -> bool
static Calendrie.Systems.Egyptian13Year.TryCreate(int year) -> Calendrie.Systems.Egyptian13Year?
static Calendrie.Systems.EgyptianCalendar.MaxYear.get -> int
static Calendrie.Systems.EgyptianCalendar.MinYear.get -> int
static Calendrie.Systems.EgyptianDate.Calendar.get -> Calendrie.Systems.EgyptianCalendar!
static Calendrie.Systems.EgyptianDate.Create(int year, int dayOfYear) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.Create(int year, int month, int day) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.EgyptianDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.EgyptianDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.EgyptianDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.EgyptianDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.EgyptianDate date) -> Calendrie.DayNumber
static Calendrie.Systems.EgyptianDate.Max(Calendrie.Systems.EgyptianDate x, Calendrie.Systems.EgyptianDate y) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.MaxValue.get -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.Min(Calendrie.Systems.EgyptianDate x, Calendrie.Systems.EgyptianDate y) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.MinValue.get -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.operator !=(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> bool
static Calendrie.Systems.EgyptianDate.operator +(Calendrie.Systems.EgyptianDate value, int days) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.operator ++(Calendrie.Systems.EgyptianDate value) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.operator -(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> int
static Calendrie.Systems.EgyptianDate.operator -(Calendrie.Systems.EgyptianDate value, int days) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.operator --(Calendrie.Systems.EgyptianDate value) -> Calendrie.Systems.EgyptianDate
static Calendrie.Systems.EgyptianDate.operator <(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> bool
static Calendrie.Systems.EgyptianDate.operator <=(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> bool
static Calendrie.Systems.EgyptianDate.operator ==(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> bool
static Calendrie.Systems.EgyptianDate.operator >(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> bool
static Calendrie.Systems.EgyptianDate.operator >=(Calendrie.Systems.EgyptianDate left, Calendrie.Systems.EgyptianDate right) -> bool
static Calendrie.Systems.EgyptianDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.EgyptianDate?
static Calendrie.Systems.EgyptianDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.EgyptianDate?
static Calendrie.Systems.EgyptianMonth.Calendar.get -> Calendrie.Systems.EgyptianCalendar!
static Calendrie.Systems.EgyptianMonth.Create(int year, int month) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.FromDate(Calendrie.Systems.EgyptianDate date) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.Max(Calendrie.Systems.EgyptianMonth x, Calendrie.Systems.EgyptianMonth y) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.MaxValue.get -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.Min(Calendrie.Systems.EgyptianMonth x, Calendrie.Systems.EgyptianMonth y) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.MinValue.get -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.operator !=(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> bool
static Calendrie.Systems.EgyptianMonth.operator +(Calendrie.Systems.EgyptianMonth value, int months) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.operator ++(Calendrie.Systems.EgyptianMonth value) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.operator -(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> int
static Calendrie.Systems.EgyptianMonth.operator -(Calendrie.Systems.EgyptianMonth value, int months) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.operator --(Calendrie.Systems.EgyptianMonth value) -> Calendrie.Systems.EgyptianMonth
static Calendrie.Systems.EgyptianMonth.operator <(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> bool
static Calendrie.Systems.EgyptianMonth.operator <=(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> bool
static Calendrie.Systems.EgyptianMonth.operator ==(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> bool
static Calendrie.Systems.EgyptianMonth.operator >(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> bool
static Calendrie.Systems.EgyptianMonth.operator >=(Calendrie.Systems.EgyptianMonth left, Calendrie.Systems.EgyptianMonth right) -> bool
static Calendrie.Systems.EgyptianMonth.TryCreate(int year, int month) -> Calendrie.Systems.EgyptianMonth?
static Calendrie.Systems.EgyptianYear.Calendar.get -> Calendrie.Systems.EgyptianCalendar!
static Calendrie.Systems.EgyptianYear.Create(int year) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.FromDate(Calendrie.Systems.EgyptianDate date) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.FromMonth(Calendrie.Systems.EgyptianMonth month) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.Max(Calendrie.Systems.EgyptianYear x, Calendrie.Systems.EgyptianYear y) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.MaxValue.get -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.Min(Calendrie.Systems.EgyptianYear x, Calendrie.Systems.EgyptianYear y) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.MinValue.get -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.operator !=(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> bool
static Calendrie.Systems.EgyptianYear.operator +(Calendrie.Systems.EgyptianYear value, int years) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.operator ++(Calendrie.Systems.EgyptianYear value) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.operator -(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> int
static Calendrie.Systems.EgyptianYear.operator -(Calendrie.Systems.EgyptianYear value, int years) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.operator --(Calendrie.Systems.EgyptianYear value) -> Calendrie.Systems.EgyptianYear
static Calendrie.Systems.EgyptianYear.operator <(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> bool
static Calendrie.Systems.EgyptianYear.operator <=(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> bool
static Calendrie.Systems.EgyptianYear.operator ==(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> bool
static Calendrie.Systems.EgyptianYear.operator >(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> bool
static Calendrie.Systems.EgyptianYear.operator >=(Calendrie.Systems.EgyptianYear left, Calendrie.Systems.EgyptianYear right) -> bool
static Calendrie.Systems.EgyptianYear.TryCreate(int year) -> Calendrie.Systems.EgyptianYear?
static Calendrie.Systems.Ethiopic13Calendar.MaxYear.get -> int
static Calendrie.Systems.Ethiopic13Calendar.MinYear.get -> int
static Calendrie.Systems.Ethiopic13Date.Calendar.get -> Calendrie.Systems.Ethiopic13Calendar!
static Calendrie.Systems.Ethiopic13Date.Create(int year, int dayOfYear) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.Create(int year, int month, int day) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.Ethiopic13Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.Ethiopic13Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.Ethiopic13Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.Ethiopic13Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.Ethiopic13Date date) -> Calendrie.DayNumber
static Calendrie.Systems.Ethiopic13Date.Max(Calendrie.Systems.Ethiopic13Date x, Calendrie.Systems.Ethiopic13Date y) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.MaxValue.get -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.Min(Calendrie.Systems.Ethiopic13Date x, Calendrie.Systems.Ethiopic13Date y) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.MinValue.get -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator !=(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator +(Calendrie.Systems.Ethiopic13Date value, int days) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator ++(Calendrie.Systems.Ethiopic13Date value) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator -(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> int
static Calendrie.Systems.Ethiopic13Date.operator -(Calendrie.Systems.Ethiopic13Date value, int days) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator --(Calendrie.Systems.Ethiopic13Date value) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator <(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator <=(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator ==(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator >(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator >=(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.Ethiopic13Date?
static Calendrie.Systems.Ethiopic13Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.Ethiopic13Date?
static Calendrie.Systems.Ethiopic13Month.Calendar.get -> Calendrie.Systems.Ethiopic13Calendar!
static Calendrie.Systems.Ethiopic13Month.Create(int year, int month) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.FromDate(Calendrie.Systems.Ethiopic13Date date) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.Max(Calendrie.Systems.Ethiopic13Month x, Calendrie.Systems.Ethiopic13Month y) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.MaxValue.get -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.Min(Calendrie.Systems.Ethiopic13Month x, Calendrie.Systems.Ethiopic13Month y) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.MinValue.get -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.operator !=(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> bool
static Calendrie.Systems.Ethiopic13Month.operator +(Calendrie.Systems.Ethiopic13Month value, int months) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.operator ++(Calendrie.Systems.Ethiopic13Month value) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.operator -(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> int
static Calendrie.Systems.Ethiopic13Month.operator -(Calendrie.Systems.Ethiopic13Month value, int months) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.operator --(Calendrie.Systems.Ethiopic13Month value) -> Calendrie.Systems.Ethiopic13Month
static Calendrie.Systems.Ethiopic13Month.operator <(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> bool
static Calendrie.Systems.Ethiopic13Month.operator <=(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> bool
static Calendrie.Systems.Ethiopic13Month.operator ==(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> bool
static Calendrie.Systems.Ethiopic13Month.operator >(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> bool
static Calendrie.Systems.Ethiopic13Month.operator >=(Calendrie.Systems.Ethiopic13Month left, Calendrie.Systems.Ethiopic13Month right) -> bool
static Calendrie.Systems.Ethiopic13Month.TryCreate(int year, int month) -> Calendrie.Systems.Ethiopic13Month?
static Calendrie.Systems.Ethiopic13Year.Calendar.get -> Calendrie.Systems.Ethiopic13Calendar!
static Calendrie.Systems.Ethiopic13Year.Create(int year) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.FromDate(Calendrie.Systems.Ethiopic13Date date) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.FromMonth(Calendrie.Systems.Ethiopic13Month month) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.Max(Calendrie.Systems.Ethiopic13Year x, Calendrie.Systems.Ethiopic13Year y) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.MaxValue.get -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.Min(Calendrie.Systems.Ethiopic13Year x, Calendrie.Systems.Ethiopic13Year y) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.MinValue.get -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.operator !=(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> bool
static Calendrie.Systems.Ethiopic13Year.operator +(Calendrie.Systems.Ethiopic13Year value, int years) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.operator ++(Calendrie.Systems.Ethiopic13Year value) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.operator -(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> int
static Calendrie.Systems.Ethiopic13Year.operator -(Calendrie.Systems.Ethiopic13Year value, int years) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.operator --(Calendrie.Systems.Ethiopic13Year value) -> Calendrie.Systems.Ethiopic13Year
static Calendrie.Systems.Ethiopic13Year.operator <(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> bool
static Calendrie.Systems.Ethiopic13Year.operator <=(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> bool
static Calendrie.Systems.Ethiopic13Year.operator ==(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> bool
static Calendrie.Systems.Ethiopic13Year.operator >(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> bool
static Calendrie.Systems.Ethiopic13Year.operator >=(Calendrie.Systems.Ethiopic13Year left, Calendrie.Systems.Ethiopic13Year right) -> bool
static Calendrie.Systems.Ethiopic13Year.TryCreate(int year) -> Calendrie.Systems.Ethiopic13Year?
static Calendrie.Systems.EthiopicCalendar.MaxYear.get -> int
static Calendrie.Systems.EthiopicCalendar.MinYear.get -> int
static Calendrie.Systems.EthiopicDate.Calendar.get -> Calendrie.Systems.EthiopicCalendar!
static Calendrie.Systems.EthiopicDate.Create(int year, int dayOfYear) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.Create(int year, int month, int day) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.EthiopicDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.EthiopicDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.EthiopicDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.EthiopicDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.EthiopicDate date) -> Calendrie.DayNumber
static Calendrie.Systems.EthiopicDate.Max(Calendrie.Systems.EthiopicDate x, Calendrie.Systems.EthiopicDate y) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.MaxValue.get -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.Min(Calendrie.Systems.EthiopicDate x, Calendrie.Systems.EthiopicDate y) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.MinValue.get -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator !=(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator +(Calendrie.Systems.EthiopicDate value, int days) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator ++(Calendrie.Systems.EthiopicDate value) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator -(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> int
static Calendrie.Systems.EthiopicDate.operator -(Calendrie.Systems.EthiopicDate value, int days) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator --(Calendrie.Systems.EthiopicDate value) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator <(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator <=(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator ==(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator >(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator >=(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.EthiopicDate?
static Calendrie.Systems.EthiopicDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.EthiopicDate?
static Calendrie.Systems.EthiopicMonth.Calendar.get -> Calendrie.Systems.EthiopicCalendar!
static Calendrie.Systems.EthiopicMonth.Create(int year, int month) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.FromDate(Calendrie.Systems.EthiopicDate date) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.Max(Calendrie.Systems.EthiopicMonth x, Calendrie.Systems.EthiopicMonth y) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.MaxValue.get -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.Min(Calendrie.Systems.EthiopicMonth x, Calendrie.Systems.EthiopicMonth y) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.MinValue.get -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.operator !=(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> bool
static Calendrie.Systems.EthiopicMonth.operator +(Calendrie.Systems.EthiopicMonth value, int months) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.operator ++(Calendrie.Systems.EthiopicMonth value) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.operator -(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> int
static Calendrie.Systems.EthiopicMonth.operator -(Calendrie.Systems.EthiopicMonth value, int months) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.operator --(Calendrie.Systems.EthiopicMonth value) -> Calendrie.Systems.EthiopicMonth
static Calendrie.Systems.EthiopicMonth.operator <(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> bool
static Calendrie.Systems.EthiopicMonth.operator <=(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> bool
static Calendrie.Systems.EthiopicMonth.operator ==(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> bool
static Calendrie.Systems.EthiopicMonth.operator >(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> bool
static Calendrie.Systems.EthiopicMonth.operator >=(Calendrie.Systems.EthiopicMonth left, Calendrie.Systems.EthiopicMonth right) -> bool
static Calendrie.Systems.EthiopicMonth.TryCreate(int year, int month) -> Calendrie.Systems.EthiopicMonth?
static Calendrie.Systems.EthiopicYear.Calendar.get -> Calendrie.Systems.EthiopicCalendar!
static Calendrie.Systems.EthiopicYear.Create(int year) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.FromDate(Calendrie.Systems.EthiopicDate date) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.FromMonth(Calendrie.Systems.EthiopicMonth month) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.Max(Calendrie.Systems.EthiopicYear x, Calendrie.Systems.EthiopicYear y) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.MaxValue.get -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.Min(Calendrie.Systems.EthiopicYear x, Calendrie.Systems.EthiopicYear y) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.MinValue.get -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.operator !=(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> bool
static Calendrie.Systems.EthiopicYear.operator +(Calendrie.Systems.EthiopicYear value, int years) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.operator ++(Calendrie.Systems.EthiopicYear value) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.operator -(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> int
static Calendrie.Systems.EthiopicYear.operator -(Calendrie.Systems.EthiopicYear value, int years) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.operator --(Calendrie.Systems.EthiopicYear value) -> Calendrie.Systems.EthiopicYear
static Calendrie.Systems.EthiopicYear.operator <(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> bool
static Calendrie.Systems.EthiopicYear.operator <=(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> bool
static Calendrie.Systems.EthiopicYear.operator ==(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> bool
static Calendrie.Systems.EthiopicYear.operator >(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> bool
static Calendrie.Systems.EthiopicYear.operator >=(Calendrie.Systems.EthiopicYear left, Calendrie.Systems.EthiopicYear right) -> bool
static Calendrie.Systems.EthiopicYear.TryCreate(int year) -> Calendrie.Systems.EthiopicYear?
static Calendrie.Systems.FrenchRepublican13Calendar.MaxYear.get -> int
static Calendrie.Systems.FrenchRepublican13Calendar.MinYear.get -> int
static Calendrie.Systems.FrenchRepublican13Date.Calendar.get -> Calendrie.Systems.FrenchRepublican13Calendar!
static Calendrie.Systems.FrenchRepublican13Date.Create(int year, int dayOfYear) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.Create(int year, int month, int day) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.FrenchRepublican13Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.FrenchRepublican13Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.FrenchRepublican13Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.FrenchRepublican13Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.FrenchRepublican13Date date) -> Calendrie.DayNumber
static Calendrie.Systems.FrenchRepublican13Date.Max(Calendrie.Systems.FrenchRepublican13Date x, Calendrie.Systems.FrenchRepublican13Date y) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.MaxValue.get -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.Min(Calendrie.Systems.FrenchRepublican13Date x, Calendrie.Systems.FrenchRepublican13Date y) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.MinValue.get -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.operator !=(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> bool
static Calendrie.Systems.FrenchRepublican13Date.operator +(Calendrie.Systems.FrenchRepublican13Date value, int days) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.operator ++(Calendrie.Systems.FrenchRepublican13Date value) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.operator -(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> int
static Calendrie.Systems.FrenchRepublican13Date.operator -(Calendrie.Systems.FrenchRepublican13Date value, int days) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.operator --(Calendrie.Systems.FrenchRepublican13Date value) -> Calendrie.Systems.FrenchRepublican13Date
static Calendrie.Systems.FrenchRepublican13Date.operator <(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> bool
static Calendrie.Systems.FrenchRepublican13Date.operator <=(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> bool
static Calendrie.Systems.FrenchRepublican13Date.operator ==(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> bool
static Calendrie.Systems.FrenchRepublican13Date.operator >(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> bool
static Calendrie.Systems.FrenchRepublican13Date.operator >=(Calendrie.Systems.FrenchRepublican13Date left, Calendrie.Systems.FrenchRepublican13Date right) -> bool
static Calendrie.Systems.FrenchRepublican13Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.FrenchRepublican13Date?
static Calendrie.Systems.FrenchRepublican13Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.FrenchRepublican13Date?
static Calendrie.Systems.FrenchRepublican13Month.Calendar.get -> Calendrie.Systems.FrenchRepublican13Calendar!
static Calendrie.Systems.FrenchRepublican13Month.Create(int year, int month) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.FromDate(Calendrie.Systems.FrenchRepublican13Date date) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.Max(Calendrie.Systems.FrenchRepublican13Month x, Calendrie.Systems.FrenchRepublican13Month y) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.MaxValue.get -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.Min(Calendrie.Systems.FrenchRepublican13Month x, Calendrie.Systems.FrenchRepublican13Month y) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.MinValue.get -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.operator !=(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> bool
static Calendrie.Systems.FrenchRepublican13Month.operator +(Calendrie.Systems.FrenchRepublican13Month value, int months) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.operator ++(Calendrie.Systems.FrenchRepublican13Month value) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.operator -(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> int
static Calendrie.Systems.FrenchRepublican13Month.operator -(Calendrie.Systems.FrenchRepublican13Month value, int months) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.operator --(Calendrie.Systems.FrenchRepublican13Month value) -> Calendrie.Systems.FrenchRepublican13Month
static Calendrie.Systems.FrenchRepublican13Month.operator <(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> bool
static Calendrie.Systems.FrenchRepublican13Month.operator <=(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> bool
static Calendrie.Systems.FrenchRepublican13Month.operator ==(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> bool
static Calendrie.Systems.FrenchRepublican13Month.operator >(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> bool
static Calendrie.Systems.FrenchRepublican13Month.operator >=(Calendrie.Systems.FrenchRepublican13Month left, Calendrie.Systems.FrenchRepublican13Month right) -> bool
static Calendrie.Systems.FrenchRepublican13Month.TryCreate(int year, int month) -> Calendrie.Systems.FrenchRepublican13Month?
static Calendrie.Systems.FrenchRepublican13Year.Calendar.get -> Calendrie.Systems.FrenchRepublican13Calendar!
static Calendrie.Systems.FrenchRepublican13Year.Create(int year) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.FromDate(Calendrie.Systems.FrenchRepublican13Date date) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.FromMonth(Calendrie.Systems.FrenchRepublican13Month month) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.Max(Calendrie.Systems.FrenchRepublican13Year x, Calendrie.Systems.FrenchRepublican13Year y) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.MaxValue.get -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.Min(Calendrie.Systems.FrenchRepublican13Year x, Calendrie.Systems.FrenchRepublican13Year y) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.MinValue.get -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.operator !=(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> bool
static Calendrie.Systems.FrenchRepublican13Year.operator +(Calendrie.Systems.FrenchRepublican13Year value, int years) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.operator ++(Calendrie.Systems.FrenchRepublican13Year value) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.operator -(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> int
static Calendrie.Systems.FrenchRepublican13Year.operator -(Calendrie.Systems.FrenchRepublican13Year value, int years) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.operator --(Calendrie.Systems.FrenchRepublican13Year value) -> Calendrie.Systems.FrenchRepublican13Year
static Calendrie.Systems.FrenchRepublican13Year.operator <(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> bool
static Calendrie.Systems.FrenchRepublican13Year.operator <=(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> bool
static Calendrie.Systems.FrenchRepublican13Year.operator ==(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> bool
static Calendrie.Systems.FrenchRepublican13Year.operator >(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> bool
static Calendrie.Systems.FrenchRepublican13Year.operator >=(Calendrie.Systems.FrenchRepublican13Year left, Calendrie.Systems.FrenchRepublican13Year right) -> bool
static Calendrie.Systems.FrenchRepublican13Year.TryCreate(int year) -> Calendrie.Systems.FrenchRepublican13Year?
static Calendrie.Systems.FrenchRepublicanCalendar.MaxYear.get -> int
static Calendrie.Systems.FrenchRepublicanCalendar.MinYear.get -> int
static Calendrie.Systems.FrenchRepublicanDate.Calendar.get -> Calendrie.Systems.FrenchRepublicanCalendar!
static Calendrie.Systems.FrenchRepublicanDate.Create(int year, int dayOfYear) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.Create(int year, int month, int day) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.FrenchRepublicanDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.FrenchRepublicanDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.FrenchRepublicanDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.FrenchRepublicanDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.FrenchRepublicanDate date) -> Calendrie.DayNumber
static Calendrie.Systems.FrenchRepublicanDate.Max(Calendrie.Systems.FrenchRepublicanDate x, Calendrie.Systems.FrenchRepublicanDate y) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.MaxValue.get -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.Min(Calendrie.Systems.FrenchRepublicanDate x, Calendrie.Systems.FrenchRepublicanDate y) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.MinValue.get -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.operator !=(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> bool
static Calendrie.Systems.FrenchRepublicanDate.operator +(Calendrie.Systems.FrenchRepublicanDate value, int days) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.operator ++(Calendrie.Systems.FrenchRepublicanDate value) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.operator -(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> int
static Calendrie.Systems.FrenchRepublicanDate.operator -(Calendrie.Systems.FrenchRepublicanDate value, int days) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.operator --(Calendrie.Systems.FrenchRepublicanDate value) -> Calendrie.Systems.FrenchRepublicanDate
static Calendrie.Systems.FrenchRepublicanDate.operator <(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> bool
static Calendrie.Systems.FrenchRepublicanDate.operator <=(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> bool
static Calendrie.Systems.FrenchRepublicanDate.operator ==(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> bool
static Calendrie.Systems.FrenchRepublicanDate.operator >(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> bool
static Calendrie.Systems.FrenchRepublicanDate.operator >=(Calendrie.Systems.FrenchRepublicanDate left, Calendrie.Systems.FrenchRepublicanDate right) -> bool
static Calendrie.Systems.FrenchRepublicanDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.FrenchRepublicanDate?
static Calendrie.Systems.FrenchRepublicanDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.FrenchRepublicanDate?
static Calendrie.Systems.FrenchRepublicanMonth.Calendar.get -> Calendrie.Systems.FrenchRepublicanCalendar!
static Calendrie.Systems.FrenchRepublicanMonth.Create(int year, int month) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.FromDate(Calendrie.Systems.FrenchRepublicanDate date) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.Max(Calendrie.Systems.FrenchRepublicanMonth x, Calendrie.Systems.FrenchRepublicanMonth y) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.MaxValue.get -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.Min(Calendrie.Systems.FrenchRepublicanMonth x, Calendrie.Systems.FrenchRepublicanMonth y) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.MinValue.get -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.operator !=(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> bool
static Calendrie.Systems.FrenchRepublicanMonth.operator +(Calendrie.Systems.FrenchRepublicanMonth value, int months) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.operator ++(Calendrie.Systems.FrenchRepublicanMonth value) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.operator -(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> int
static Calendrie.Systems.FrenchRepublicanMonth.operator -(Calendrie.Systems.FrenchRepublicanMonth value, int months) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.operator --(Calendrie.Systems.FrenchRepublicanMonth value) -> Calendrie.Systems.FrenchRepublicanMonth
static Calendrie.Systems.FrenchRepublicanMonth.operator <(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> bool
static Calendrie.Systems.FrenchRepublicanMonth.operator <=(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> bool
static Calendrie.Systems.FrenchRepublicanMonth.operator ==(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> bool
static Calendrie.Systems.FrenchRepublicanMonth.operator >(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> bool
static Calendrie.Systems.FrenchRepublicanMonth.operator >=(Calendrie.Systems.FrenchRepublicanMonth left, Calendrie.Systems.FrenchRepublicanMonth right) -> bool
static Calendrie.Systems.FrenchRepublicanMonth.TryCreate(int year, int month) -> Calendrie.Systems.FrenchRepublicanMonth?
static Calendrie.Systems.FrenchRepublicanYear.Calendar.get -> Calendrie.Systems.FrenchRepublicanCalendar!
static Calendrie.Systems.FrenchRepublicanYear.Create(int year) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.FromDate(Calendrie.Systems.FrenchRepublicanDate date) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.FromMonth(Calendrie.Systems.FrenchRepublicanMonth month) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.Max(Calendrie.Systems.FrenchRepublicanYear x, Calendrie.Systems.FrenchRepublicanYear y) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.MaxValue.get -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.Min(Calendrie.Systems.FrenchRepublicanYear x, Calendrie.Systems.FrenchRepublicanYear y) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.MinValue.get -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.operator !=(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> bool
static Calendrie.Systems.FrenchRepublicanYear.operator +(Calendrie.Systems.FrenchRepublicanYear value, int years) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.operator ++(Calendrie.Systems.FrenchRepublicanYear value) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.operator -(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> int
static Calendrie.Systems.FrenchRepublicanYear.operator -(Calendrie.Systems.FrenchRepublicanYear value, int years) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.operator --(Calendrie.Systems.FrenchRepublicanYear value) -> Calendrie.Systems.FrenchRepublicanYear
static Calendrie.Systems.FrenchRepublicanYear.operator <(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> bool
static Calendrie.Systems.FrenchRepublicanYear.operator <=(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> bool
static Calendrie.Systems.FrenchRepublicanYear.operator ==(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> bool
static Calendrie.Systems.FrenchRepublicanYear.operator >(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> bool
static Calendrie.Systems.FrenchRepublicanYear.operator >=(Calendrie.Systems.FrenchRepublicanYear left, Calendrie.Systems.FrenchRepublicanYear right) -> bool
static Calendrie.Systems.FrenchRepublicanYear.TryCreate(int year) -> Calendrie.Systems.FrenchRepublicanYear?
static Calendrie.Systems.GregorianCalendar.MaxYear.get -> int
static Calendrie.Systems.GregorianCalendar.MinYear.get -> int
static Calendrie.Systems.GregorianDate.Calendar.get -> Calendrie.Systems.GregorianCalendar!
static Calendrie.Systems.GregorianDate.Create(int year, int dayOfYear) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.Create(int year, int month, int day) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.GregorianDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.GregorianDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.GregorianDate date) -> Calendrie.DayNumber
static Calendrie.Systems.GregorianDate.Max(Calendrie.Systems.GregorianDate x, Calendrie.Systems.GregorianDate y) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.MaxValue.get -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.Min(Calendrie.Systems.GregorianDate x, Calendrie.Systems.GregorianDate y) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.MinValue.get -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator !=(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator +(Calendrie.Systems.GregorianDate value, int days) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator ++(Calendrie.Systems.GregorianDate value) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator -(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> int
static Calendrie.Systems.GregorianDate.operator -(Calendrie.Systems.GregorianDate value, int days) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator --(Calendrie.Systems.GregorianDate value) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator <(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator <=(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator ==(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator >(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator >=(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.GregorianDate?
static Calendrie.Systems.GregorianDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.GregorianDate?
static Calendrie.Systems.GregorianMonth.Calendar.get -> Calendrie.Systems.GregorianCalendar!
static Calendrie.Systems.GregorianMonth.Create(int year, int month) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.FromDate(Calendrie.Systems.GregorianDate date) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.Max(Calendrie.Systems.GregorianMonth x, Calendrie.Systems.GregorianMonth y) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.MaxValue.get -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.Min(Calendrie.Systems.GregorianMonth x, Calendrie.Systems.GregorianMonth y) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.MinValue.get -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.operator !=(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> bool
static Calendrie.Systems.GregorianMonth.operator +(Calendrie.Systems.GregorianMonth value, int months) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.operator ++(Calendrie.Systems.GregorianMonth value) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.operator -(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> int
static Calendrie.Systems.GregorianMonth.operator -(Calendrie.Systems.GregorianMonth value, int months) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.operator --(Calendrie.Systems.GregorianMonth value) -> Calendrie.Systems.GregorianMonth
static Calendrie.Systems.GregorianMonth.operator <(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> bool
static Calendrie.Systems.GregorianMonth.operator <=(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> bool
static Calendrie.Systems.GregorianMonth.operator ==(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> bool
static Calendrie.Systems.GregorianMonth.operator >(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> bool
static Calendrie.Systems.GregorianMonth.operator >=(Calendrie.Systems.GregorianMonth left, Calendrie.Systems.GregorianMonth right) -> bool
static Calendrie.Systems.GregorianMonth.TryCreate(int year, int month) -> Calendrie.Systems.GregorianMonth?
static Calendrie.Systems.GregorianYear.Calendar.get -> Calendrie.Systems.GregorianCalendar!
static Calendrie.Systems.GregorianYear.Create(int year) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.FromDate(Calendrie.Systems.GregorianDate date) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.FromMonth(Calendrie.Systems.GregorianMonth month) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.Max(Calendrie.Systems.GregorianYear x, Calendrie.Systems.GregorianYear y) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.MaxValue.get -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.Min(Calendrie.Systems.GregorianYear x, Calendrie.Systems.GregorianYear y) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.MinValue.get -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.operator !=(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> bool
static Calendrie.Systems.GregorianYear.operator +(Calendrie.Systems.GregorianYear value, int years) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.operator ++(Calendrie.Systems.GregorianYear value) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.operator -(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> int
static Calendrie.Systems.GregorianYear.operator -(Calendrie.Systems.GregorianYear value, int years) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.operator --(Calendrie.Systems.GregorianYear value) -> Calendrie.Systems.GregorianYear
static Calendrie.Systems.GregorianYear.operator <(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> bool
static Calendrie.Systems.GregorianYear.operator <=(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> bool
static Calendrie.Systems.GregorianYear.operator ==(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> bool
static Calendrie.Systems.GregorianYear.operator >(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> bool
static Calendrie.Systems.GregorianYear.operator >=(Calendrie.Systems.GregorianYear left, Calendrie.Systems.GregorianYear right) -> bool
static Calendrie.Systems.GregorianYear.TryCreate(int year) -> Calendrie.Systems.GregorianYear?
static Calendrie.Systems.InternationalFixedCalendar.MaxYear.get -> int
static Calendrie.Systems.InternationalFixedCalendar.MinYear.get -> int
static Calendrie.Systems.InternationalFixedDate.Calendar.get -> Calendrie.Systems.InternationalFixedCalendar!
static Calendrie.Systems.InternationalFixedDate.Create(int year, int dayOfYear) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.Create(int year, int month, int day) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.InternationalFixedDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.InternationalFixedDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.InternationalFixedDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.InternationalFixedDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.InternationalFixedDate date) -> Calendrie.DayNumber
static Calendrie.Systems.InternationalFixedDate.Max(Calendrie.Systems.InternationalFixedDate x, Calendrie.Systems.InternationalFixedDate y) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.MaxValue.get -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.Min(Calendrie.Systems.InternationalFixedDate x, Calendrie.Systems.InternationalFixedDate y) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.MinValue.get -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.operator !=(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> bool
static Calendrie.Systems.InternationalFixedDate.operator +(Calendrie.Systems.InternationalFixedDate value, int days) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.operator ++(Calendrie.Systems.InternationalFixedDate value) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.operator -(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> int
static Calendrie.Systems.InternationalFixedDate.operator -(Calendrie.Systems.InternationalFixedDate value, int days) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.operator --(Calendrie.Systems.InternationalFixedDate value) -> Calendrie.Systems.InternationalFixedDate
static Calendrie.Systems.InternationalFixedDate.operator <(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> bool
static Calendrie.Systems.InternationalFixedDate.operator <=(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> bool
static Calendrie.Systems.InternationalFixedDate.operator ==(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> bool
static Calendrie.Systems.InternationalFixedDate.operator >(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> bool
static Calendrie.Systems.InternationalFixedDate.operator >=(Calendrie.Systems.InternationalFixedDate left, Calendrie.Systems.InternationalFixedDate right) -> bool
static Calendrie.Systems.InternationalFixedDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.InternationalFixedDate?
static Calendrie.Systems.InternationalFixedDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.InternationalFixedDate?
static Calendrie.Systems.InternationalFixedMonth.Calendar.get -> Calendrie.Systems.InternationalFixedCalendar!
static Calendrie.Systems.InternationalFixedMonth.Create(int year, int month) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.FromDate(Calendrie.Systems.InternationalFixedDate date) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.Max(Calendrie.Systems.InternationalFixedMonth x, Calendrie.Systems.InternationalFixedMonth y) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.MaxValue.get -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.Min(Calendrie.Systems.InternationalFixedMonth x, Calendrie.Systems.InternationalFixedMonth y) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.MinValue.get -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.operator !=(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> bool
static Calendrie.Systems.InternationalFixedMonth.operator +(Calendrie.Systems.InternationalFixedMonth value, int months) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.operator ++(Calendrie.Systems.InternationalFixedMonth value) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.operator -(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> int
static Calendrie.Systems.InternationalFixedMonth.operator -(Calendrie.Systems.InternationalFixedMonth value, int months) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.operator --(Calendrie.Systems.InternationalFixedMonth value) -> Calendrie.Systems.InternationalFixedMonth
static Calendrie.Systems.InternationalFixedMonth.operator <(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> bool
static Calendrie.Systems.InternationalFixedMonth.operator <=(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> bool
static Calendrie.Systems.InternationalFixedMonth.operator ==(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> bool
static Calendrie.Systems.InternationalFixedMonth.operator >(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> bool
static Calendrie.Systems.InternationalFixedMonth.operator >=(Calendrie.Systems.InternationalFixedMonth left, Calendrie.Systems.InternationalFixedMonth right) -> bool
static Calendrie.Systems.InternationalFixedMonth.TryCreate(int year, int month) -> Calendrie.Systems.InternationalFixedMonth?
static Calendrie.Systems.InternationalFixedYear.Calendar.get -> Calendrie.Systems.InternationalFixedCalendar!
static Calendrie.Systems.InternationalFixedYear.Create(int year) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.FromDate(Calendrie.Systems.InternationalFixedDate date) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.FromMonth(Calendrie.Systems.InternationalFixedMonth month) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.Max(Calendrie.Systems.InternationalFixedYear x, Calendrie.Systems.InternationalFixedYear y) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.MaxValue.get -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.Min(Calendrie.Systems.InternationalFixedYear x, Calendrie.Systems.InternationalFixedYear y) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.MinValue.get -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.operator !=(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> bool
static Calendrie.Systems.InternationalFixedYear.operator +(Calendrie.Systems.InternationalFixedYear value, int years) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.operator ++(Calendrie.Systems.InternationalFixedYear value) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.operator -(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> int
static Calendrie.Systems.InternationalFixedYear.operator -(Calendrie.Systems.InternationalFixedYear value, int years) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.operator --(Calendrie.Systems.InternationalFixedYear value) -> Calendrie.Systems.InternationalFixedYear
static Calendrie.Systems.InternationalFixedYear.operator <(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> bool
static Calendrie.Systems.InternationalFixedYear.operator <=(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> bool
static Calendrie.Systems.InternationalFixedYear.operator ==(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> bool
static Calendrie.Systems.InternationalFixedYear.operator >(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> bool
static Calendrie.Systems.InternationalFixedYear.operator >=(Calendrie.Systems.InternationalFixedYear left, Calendrie.Systems.InternationalFixedYear right) -> bool
static Calendrie.Systems.InternationalFixedYear.TryCreate(int year) -> Calendrie.Systems.InternationalFixedYear?
static Calendrie.Systems.JulianCalendar.MaxYear.get -> int
static Calendrie.Systems.JulianCalendar.MinYear.get -> int
static Calendrie.Systems.JulianDate.Calendar.get -> Calendrie.Systems.JulianCalendar!
static Calendrie.Systems.JulianDate.Create(int year, int dayOfYear) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.Create(int year, int month, int day) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.JulianDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.JulianDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.JulianDate date) -> Calendrie.DayNumber
static Calendrie.Systems.JulianDate.Max(Calendrie.Systems.JulianDate x, Calendrie.Systems.JulianDate y) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.MaxValue.get -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.Min(Calendrie.Systems.JulianDate x, Calendrie.Systems.JulianDate y) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.MinValue.get -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator !=(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator +(Calendrie.Systems.JulianDate value, int days) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator ++(Calendrie.Systems.JulianDate value) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator -(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> int
static Calendrie.Systems.JulianDate.operator -(Calendrie.Systems.JulianDate value, int days) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator --(Calendrie.Systems.JulianDate value) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator <(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator <=(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator ==(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator >(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator >=(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.JulianDate?
static Calendrie.Systems.JulianDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.JulianDate?
static Calendrie.Systems.JulianMonth.Calendar.get -> Calendrie.Systems.JulianCalendar!
static Calendrie.Systems.JulianMonth.Create(int year, int month) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.FromDate(Calendrie.Systems.JulianDate date) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.Max(Calendrie.Systems.JulianMonth x, Calendrie.Systems.JulianMonth y) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.MaxValue.get -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.Min(Calendrie.Systems.JulianMonth x, Calendrie.Systems.JulianMonth y) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.MinValue.get -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.operator !=(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> bool
static Calendrie.Systems.JulianMonth.operator +(Calendrie.Systems.JulianMonth value, int months) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.operator ++(Calendrie.Systems.JulianMonth value) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.operator -(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> int
static Calendrie.Systems.JulianMonth.operator -(Calendrie.Systems.JulianMonth value, int months) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.operator --(Calendrie.Systems.JulianMonth value) -> Calendrie.Systems.JulianMonth
static Calendrie.Systems.JulianMonth.operator <(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> bool
static Calendrie.Systems.JulianMonth.operator <=(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> bool
static Calendrie.Systems.JulianMonth.operator ==(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> bool
static Calendrie.Systems.JulianMonth.operator >(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> bool
static Calendrie.Systems.JulianMonth.operator >=(Calendrie.Systems.JulianMonth left, Calendrie.Systems.JulianMonth right) -> bool
static Calendrie.Systems.JulianMonth.TryCreate(int year, int month) -> Calendrie.Systems.JulianMonth?
static Calendrie.Systems.JulianYear.Calendar.get -> Calendrie.Systems.JulianCalendar!
static Calendrie.Systems.JulianYear.Create(int year) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.FromDate(Calendrie.Systems.JulianDate date) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.FromMonth(Calendrie.Systems.JulianMonth month) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.Max(Calendrie.Systems.JulianYear x, Calendrie.Systems.JulianYear y) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.MaxValue.get -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.Min(Calendrie.Systems.JulianYear x, Calendrie.Systems.JulianYear y) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.MinValue.get -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.operator !=(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> bool
static Calendrie.Systems.JulianYear.operator +(Calendrie.Systems.JulianYear value, int years) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.operator ++(Calendrie.Systems.JulianYear value) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.operator -(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> int
static Calendrie.Systems.JulianYear.operator -(Calendrie.Systems.JulianYear value, int years) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.operator --(Calendrie.Systems.JulianYear value) -> Calendrie.Systems.JulianYear
static Calendrie.Systems.JulianYear.operator <(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> bool
static Calendrie.Systems.JulianYear.operator <=(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> bool
static Calendrie.Systems.JulianYear.operator ==(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> bool
static Calendrie.Systems.JulianYear.operator >(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> bool
static Calendrie.Systems.JulianYear.operator >=(Calendrie.Systems.JulianYear left, Calendrie.Systems.JulianYear right) -> bool
static Calendrie.Systems.JulianYear.TryCreate(int year) -> Calendrie.Systems.JulianYear?
static Calendrie.Systems.Persian2820Calendar.MaxYear.get -> int
static Calendrie.Systems.Persian2820Calendar.MinYear.get -> int
static Calendrie.Systems.Persian2820Date.Calendar.get -> Calendrie.Systems.Persian2820Calendar!
static Calendrie.Systems.Persian2820Date.Create(int year, int dayOfYear) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.Create(int year, int month, int day) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.Persian2820Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.Persian2820Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.Persian2820Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.Persian2820Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.Persian2820Date date) -> Calendrie.DayNumber
static Calendrie.Systems.Persian2820Date.Max(Calendrie.Systems.Persian2820Date x, Calendrie.Systems.Persian2820Date y) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.MaxValue.get -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.Min(Calendrie.Systems.Persian2820Date x, Calendrie.Systems.Persian2820Date y) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.MinValue.get -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.operator !=(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> bool
static Calendrie.Systems.Persian2820Date.operator +(Calendrie.Systems.Persian2820Date value, int days) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.operator ++(Calendrie.Systems.Persian2820Date value) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.operator -(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> int
static Calendrie.Systems.Persian2820Date.operator -(Calendrie.Systems.Persian2820Date value, int days) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.operator --(Calendrie.Systems.Persian2820Date value) -> Calendrie.Systems.Persian2820Date
static Calendrie.Systems.Persian2820Date.operator <(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> bool
static Calendrie.Systems.Persian2820Date.operator <=(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> bool
static Calendrie.Systems.Persian2820Date.operator ==(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> bool
static Calendrie.Systems.Persian2820Date.operator >(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> bool
static Calendrie.Systems.Persian2820Date.operator >=(Calendrie.Systems.Persian2820Date left, Calendrie.Systems.Persian2820Date right) -> bool
static Calendrie.Systems.Persian2820Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.Persian2820Date?
static Calendrie.Systems.Persian2820Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.Persian2820Date?
static Calendrie.Systems.Persian2820Month.Calendar.get -> Calendrie.Systems.Persian2820Calendar!
static Calendrie.Systems.Persian2820Month.Create(int year, int month) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.FromDate(Calendrie.Systems.Persian2820Date date) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.Max(Calendrie.Systems.Persian2820Month x, Calendrie.Systems.Persian2820Month y) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.MaxValue.get -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.Min(Calendrie.Systems.Persian2820Month x, Calendrie.Systems.Persian2820Month y) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.MinValue.get -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.operator !=(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> bool
static Calendrie.Systems.Persian2820Month.operator +(Calendrie.Systems.Persian2820Month value, int months) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.operator ++(Calendrie.Systems.Persian2820Month value) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.operator -(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> int
static Calendrie.Systems.Persian2820Month.operator -(Calendrie.Systems.Persian2820Month value, int months) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.operator --(Calendrie.Systems.Persian2820Month value) -> Calendrie.Systems.Persian2820Month
static Calendrie.Systems.Persian2820Month.operator <(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> bool
static Calendrie.Systems.Persian2820Month.operator <=(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> bool
static Calendrie.Systems.Persian2820Month.operator ==(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> bool
static Calendrie.Systems.Persian2820Month.operator >(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> bool
static Calendrie.Systems.Persian2820Month.operator >=(Calendrie.Systems.Persian2820Month left, Calendrie.Systems.Persian2820Month right) -> bool
static Calendrie.Systems.Persian2820Month.TryCreate(int year, int month) -> Calendrie.Systems.Persian2820Month?
static Calendrie.Systems.Persian2820Year.Calendar.get -> Calendrie.Systems.Persian2820Calendar!
static Calendrie.Systems.Persian2820Year.Create(int year) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.FromDate(Calendrie.Systems.Persian2820Date date) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.FromMonth(Calendrie.Systems.Persian2820Month month) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.Max(Calendrie.Systems.Persian2820Year x, Calendrie.Systems.Persian2820Year y) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.MaxValue.get -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.Min(Calendrie.Systems.Persian2820Year x, Calendrie.Systems.Persian2820Year y) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.MinValue.get -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.operator !=(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> bool
static Calendrie.Systems.Persian2820Year.operator +(Calendrie.Systems.Persian2820Year value, int years) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.operator ++(Calendrie.Systems.Persian2820Year value) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.operator -(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> int
static Calendrie.Systems.Persian2820Year.operator -(Calendrie.Systems.Persian2820Year value, int years) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.operator --(Calendrie.Systems.Persian2820Year value) -> Calendrie.Systems.Persian2820Year
static Calendrie.Systems.Persian2820Year.operator <(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> bool
static Calendrie.Systems.Persian2820Year.operator <=(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> bool
static Calendrie.Systems.Persian2820Year.operator ==(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> bool
static Calendrie.Systems.Persian2820Year.operator >(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> bool
static Calendrie.Systems.Persian2820Year.operator >=(Calendrie.Systems.Persian2820Year left, Calendrie.Systems.Persian2820Year right) -> bool
static Calendrie.Systems.Persian2820Year.TryCreate(int year) -> Calendrie.Systems.Persian2820Year?
static Calendrie.Systems.PositivistCalendar.MaxYear.get -> int
static Calendrie.Systems.PositivistCalendar.MinYear.get -> int
static Calendrie.Systems.PositivistDate.Calendar.get -> Calendrie.Systems.PositivistCalendar!
static Calendrie.Systems.PositivistDate.Create(int year, int dayOfYear) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.Create(int year, int month, int day) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.PositivistDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.PositivistDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.PositivistDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.PositivistDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.PositivistDate date) -> Calendrie.DayNumber
static Calendrie.Systems.PositivistDate.Max(Calendrie.Systems.PositivistDate x, Calendrie.Systems.PositivistDate y) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.MaxValue.get -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.Min(Calendrie.Systems.PositivistDate x, Calendrie.Systems.PositivistDate y) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.MinValue.get -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.operator !=(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> bool
static Calendrie.Systems.PositivistDate.operator +(Calendrie.Systems.PositivistDate value, int days) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.operator ++(Calendrie.Systems.PositivistDate value) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.operator -(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> int
static Calendrie.Systems.PositivistDate.operator -(Calendrie.Systems.PositivistDate value, int days) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.operator --(Calendrie.Systems.PositivistDate value) -> Calendrie.Systems.PositivistDate
static Calendrie.Systems.PositivistDate.operator <(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> bool
static Calendrie.Systems.PositivistDate.operator <=(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> bool
static Calendrie.Systems.PositivistDate.operator ==(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> bool
static Calendrie.Systems.PositivistDate.operator >(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> bool
static Calendrie.Systems.PositivistDate.operator >=(Calendrie.Systems.PositivistDate left, Calendrie.Systems.PositivistDate right) -> bool
static Calendrie.Systems.PositivistDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.PositivistDate?
static Calendrie.Systems.PositivistDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.PositivistDate?
static Calendrie.Systems.PositivistMonth.Calendar.get -> Calendrie.Systems.PositivistCalendar!
static Calendrie.Systems.PositivistMonth.Create(int year, int month) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.FromDate(Calendrie.Systems.PositivistDate date) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.Max(Calendrie.Systems.PositivistMonth x, Calendrie.Systems.PositivistMonth y) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.MaxValue.get -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.Min(Calendrie.Systems.PositivistMonth x, Calendrie.Systems.PositivistMonth y) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.MinValue.get -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.operator !=(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> bool
static Calendrie.Systems.PositivistMonth.operator +(Calendrie.Systems.PositivistMonth value, int months) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.operator ++(Calendrie.Systems.PositivistMonth value) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.operator -(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> int
static Calendrie.Systems.PositivistMonth.operator -(Calendrie.Systems.PositivistMonth value, int months) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.operator --(Calendrie.Systems.PositivistMonth value) -> Calendrie.Systems.PositivistMonth
static Calendrie.Systems.PositivistMonth.operator <(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> bool
static Calendrie.Systems.PositivistMonth.operator <=(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> bool
static Calendrie.Systems.PositivistMonth.operator ==(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> bool
static Calendrie.Systems.PositivistMonth.operator >(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> bool
static Calendrie.Systems.PositivistMonth.operator >=(Calendrie.Systems.PositivistMonth left, Calendrie.Systems.PositivistMonth right) -> bool
static Calendrie.Systems.PositivistMonth.TryCreate(int year, int month) -> Calendrie.Systems.PositivistMonth?
static Calendrie.Systems.PositivistYear.Calendar.get -> Calendrie.Systems.PositivistCalendar!
static Calendrie.Systems.PositivistYear.Create(int year) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.FromDate(Calendrie.Systems.PositivistDate date) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.FromMonth(Calendrie.Systems.PositivistMonth month) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.Max(Calendrie.Systems.PositivistYear x, Calendrie.Systems.PositivistYear y) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.MaxValue.get -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.Min(Calendrie.Systems.PositivistYear x, Calendrie.Systems.PositivistYear y) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.MinValue.get -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.operator !=(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> bool
static Calendrie.Systems.PositivistYear.operator +(Calendrie.Systems.PositivistYear value, int years) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.operator ++(Calendrie.Systems.PositivistYear value) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.operator -(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> int
static Calendrie.Systems.PositivistYear.operator -(Calendrie.Systems.PositivistYear value, int years) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.operator --(Calendrie.Systems.PositivistYear value) -> Calendrie.Systems.PositivistYear
static Calendrie.Systems.PositivistYear.operator <(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> bool
static Calendrie.Systems.PositivistYear.operator <=(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> bool
static Calendrie.Systems.PositivistYear.operator ==(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> bool
static Calendrie.Systems.PositivistYear.operator >(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> bool
static Calendrie.Systems.PositivistYear.operator >=(Calendrie.Systems.PositivistYear left, Calendrie.Systems.PositivistYear right) -> bool
static Calendrie.Systems.PositivistYear.TryCreate(int year) -> Calendrie.Systems.PositivistYear?
static Calendrie.Systems.TabularIslamicCalendar.MaxYear.get -> int
static Calendrie.Systems.TabularIslamicCalendar.MinYear.get -> int
static Calendrie.Systems.TabularIslamicDate.Calendar.get -> Calendrie.Systems.TabularIslamicCalendar!
static Calendrie.Systems.TabularIslamicDate.Create(int year, int dayOfYear) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.Create(int year, int month, int day) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.TabularIslamicDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.TabularIslamicDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.TabularIslamicDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.TabularIslamicDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.TabularIslamicDate date) -> Calendrie.DayNumber
static Calendrie.Systems.TabularIslamicDate.Max(Calendrie.Systems.TabularIslamicDate x, Calendrie.Systems.TabularIslamicDate y) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.MaxValue.get -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.Min(Calendrie.Systems.TabularIslamicDate x, Calendrie.Systems.TabularIslamicDate y) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.MinValue.get -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator !=(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator +(Calendrie.Systems.TabularIslamicDate value, int days) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator ++(Calendrie.Systems.TabularIslamicDate value) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator -(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> int
static Calendrie.Systems.TabularIslamicDate.operator -(Calendrie.Systems.TabularIslamicDate value, int days) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator --(Calendrie.Systems.TabularIslamicDate value) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator <(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator <=(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator ==(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator >(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator >=(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.TabularIslamicDate?
static Calendrie.Systems.TabularIslamicDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.TabularIslamicDate?
static Calendrie.Systems.TabularIslamicMonth.Calendar.get -> Calendrie.Systems.TabularIslamicCalendar!
static Calendrie.Systems.TabularIslamicMonth.Create(int year, int month) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.FromDate(Calendrie.Systems.TabularIslamicDate date) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.Max(Calendrie.Systems.TabularIslamicMonth x, Calendrie.Systems.TabularIslamicMonth y) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.MaxValue.get -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.Min(Calendrie.Systems.TabularIslamicMonth x, Calendrie.Systems.TabularIslamicMonth y) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.MinValue.get -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.operator !=(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> bool
static Calendrie.Systems.TabularIslamicMonth.operator +(Calendrie.Systems.TabularIslamicMonth value, int months) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.operator ++(Calendrie.Systems.TabularIslamicMonth value) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.operator -(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> int
static Calendrie.Systems.TabularIslamicMonth.operator -(Calendrie.Systems.TabularIslamicMonth value, int months) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.operator --(Calendrie.Systems.TabularIslamicMonth value) -> Calendrie.Systems.TabularIslamicMonth
static Calendrie.Systems.TabularIslamicMonth.operator <(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> bool
static Calendrie.Systems.TabularIslamicMonth.operator <=(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> bool
static Calendrie.Systems.TabularIslamicMonth.operator ==(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> bool
static Calendrie.Systems.TabularIslamicMonth.operator >(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> bool
static Calendrie.Systems.TabularIslamicMonth.operator >=(Calendrie.Systems.TabularIslamicMonth left, Calendrie.Systems.TabularIslamicMonth right) -> bool
static Calendrie.Systems.TabularIslamicMonth.TryCreate(int year, int month) -> Calendrie.Systems.TabularIslamicMonth?
static Calendrie.Systems.TabularIslamicYear.Calendar.get -> Calendrie.Systems.TabularIslamicCalendar!
static Calendrie.Systems.TabularIslamicYear.Create(int year) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.FromDate(Calendrie.Systems.TabularIslamicDate date) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.FromMonth(Calendrie.Systems.TabularIslamicMonth month) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.Max(Calendrie.Systems.TabularIslamicYear x, Calendrie.Systems.TabularIslamicYear y) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.MaxValue.get -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.Min(Calendrie.Systems.TabularIslamicYear x, Calendrie.Systems.TabularIslamicYear y) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.MinValue.get -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.operator !=(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> bool
static Calendrie.Systems.TabularIslamicYear.operator +(Calendrie.Systems.TabularIslamicYear value, int years) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.operator ++(Calendrie.Systems.TabularIslamicYear value) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.operator -(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> int
static Calendrie.Systems.TabularIslamicYear.operator -(Calendrie.Systems.TabularIslamicYear value, int years) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.operator --(Calendrie.Systems.TabularIslamicYear value) -> Calendrie.Systems.TabularIslamicYear
static Calendrie.Systems.TabularIslamicYear.operator <(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> bool
static Calendrie.Systems.TabularIslamicYear.operator <=(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> bool
static Calendrie.Systems.TabularIslamicYear.operator ==(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> bool
static Calendrie.Systems.TabularIslamicYear.operator >(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> bool
static Calendrie.Systems.TabularIslamicYear.operator >=(Calendrie.Systems.TabularIslamicYear left, Calendrie.Systems.TabularIslamicYear right) -> bool
static Calendrie.Systems.TabularIslamicYear.TryCreate(int year) -> Calendrie.Systems.TabularIslamicYear?
static Calendrie.Systems.WorldCalendar.MaxYear.get -> int
static Calendrie.Systems.WorldCalendar.MinYear.get -> int
static Calendrie.Systems.WorldDate.Calendar.get -> Calendrie.Systems.WorldCalendar!
static Calendrie.Systems.WorldDate.Create(int year, int dayOfYear) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.Create(int year, int month, int day) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.WorldDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.WorldDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.WorldDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.WorldDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.WorldDate date) -> Calendrie.DayNumber
static Calendrie.Systems.WorldDate.Max(Calendrie.Systems.WorldDate x, Calendrie.Systems.WorldDate y) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.MaxValue.get -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.Min(Calendrie.Systems.WorldDate x, Calendrie.Systems.WorldDate y) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.MinValue.get -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator !=(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator +(Calendrie.Systems.WorldDate value, int days) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator ++(Calendrie.Systems.WorldDate value) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator -(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> int
static Calendrie.Systems.WorldDate.operator -(Calendrie.Systems.WorldDate value, int days) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator --(Calendrie.Systems.WorldDate value) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator <(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator <=(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator ==(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator >(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator >=(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.WorldDate?
static Calendrie.Systems.WorldDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.WorldDate?
static Calendrie.Systems.WorldMonth.Calendar.get -> Calendrie.Systems.WorldCalendar!
static Calendrie.Systems.WorldMonth.Create(int year, int month) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.FromDate(Calendrie.Systems.WorldDate date) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.Max(Calendrie.Systems.WorldMonth x, Calendrie.Systems.WorldMonth y) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.MaxValue.get -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.Min(Calendrie.Systems.WorldMonth x, Calendrie.Systems.WorldMonth y) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.MinValue.get -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.operator !=(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> bool
static Calendrie.Systems.WorldMonth.operator +(Calendrie.Systems.WorldMonth value, int months) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.operator ++(Calendrie.Systems.WorldMonth value) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.operator -(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> int
static Calendrie.Systems.WorldMonth.operator -(Calendrie.Systems.WorldMonth value, int months) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.operator --(Calendrie.Systems.WorldMonth value) -> Calendrie.Systems.WorldMonth
static Calendrie.Systems.WorldMonth.operator <(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> bool
static Calendrie.Systems.WorldMonth.operator <=(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> bool
static Calendrie.Systems.WorldMonth.operator ==(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> bool
static Calendrie.Systems.WorldMonth.operator >(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> bool
static Calendrie.Systems.WorldMonth.operator >=(Calendrie.Systems.WorldMonth left, Calendrie.Systems.WorldMonth right) -> bool
static Calendrie.Systems.WorldMonth.TryCreate(int year, int month) -> Calendrie.Systems.WorldMonth?
static Calendrie.Systems.WorldYear.Calendar.get -> Calendrie.Systems.WorldCalendar!
static Calendrie.Systems.WorldYear.Create(int year) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.FromDate(Calendrie.Systems.WorldDate date) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.FromMonth(Calendrie.Systems.WorldMonth month) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.Max(Calendrie.Systems.WorldYear x, Calendrie.Systems.WorldYear y) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.MaxValue.get -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.Min(Calendrie.Systems.WorldYear x, Calendrie.Systems.WorldYear y) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.MinValue.get -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.operator !=(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> bool
static Calendrie.Systems.WorldYear.operator +(Calendrie.Systems.WorldYear value, int years) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.operator ++(Calendrie.Systems.WorldYear value) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.operator -(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> int
static Calendrie.Systems.WorldYear.operator -(Calendrie.Systems.WorldYear value, int years) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.operator --(Calendrie.Systems.WorldYear value) -> Calendrie.Systems.WorldYear
static Calendrie.Systems.WorldYear.operator <(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> bool
static Calendrie.Systems.WorldYear.operator <=(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> bool
static Calendrie.Systems.WorldYear.operator ==(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> bool
static Calendrie.Systems.WorldYear.operator >(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> bool
static Calendrie.Systems.WorldYear.operator >=(Calendrie.Systems.WorldYear left, Calendrie.Systems.WorldYear right) -> bool
static Calendrie.Systems.WorldYear.TryCreate(int year) -> Calendrie.Systems.WorldYear?
static Calendrie.Systems.Zoroastrian13Calendar.MaxYear.get -> int
static Calendrie.Systems.Zoroastrian13Calendar.MinYear.get -> int
static Calendrie.Systems.Zoroastrian13Date.Calendar.get -> Calendrie.Systems.Zoroastrian13Calendar!
static Calendrie.Systems.Zoroastrian13Date.Create(int year, int dayOfYear) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.Create(int year, int month, int day) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.Zoroastrian13Date date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.Zoroastrian13Date.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.Zoroastrian13Date date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.Zoroastrian13Date.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.implicit operator Calendrie.DayNumber(Calendrie.Systems.Zoroastrian13Date date) -> Calendrie.DayNumber
static Calendrie.Systems.Zoroastrian13Date.Max(Calendrie.Systems.Zoroastrian13Date x, Calendrie.Systems.Zoroastrian13Date y) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.MaxValue.get -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.Min(Calendrie.Systems.Zoroastrian13Date x, Calendrie.Systems.Zoroastrian13Date y) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.MinValue.get -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator !=(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator +(Calendrie.Systems.Zoroastrian13Date value, int days) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator ++(Calendrie.Systems.Zoroastrian13Date value) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator -(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> int
static Calendrie.Systems.Zoroastrian13Date.operator -(Calendrie.Systems.Zoroastrian13Date value, int days) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator --(Calendrie.Systems.Zoroastrian13Date value) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator <(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator <=(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator ==(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator >(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator >=(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.Zoroastrian13Date?
static Calendrie.Systems.Zoroastrian13Date.TryCreate(int year, int month, int day) -> Calendrie.Systems.Zoroastrian13Date?
static Calendrie.Systems.Zoroastrian13Month.Calendar.get -> Calendrie.Systems.Zoroastrian13Calendar!
static Calendrie.Systems.Zoroastrian13Month.Create(int year, int month) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.FromDate(Calendrie.Systems.Zoroastrian13Date date) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.Max(Calendrie.Systems.Zoroastrian13Month x, Calendrie.Systems.Zoroastrian13Month y) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.MaxValue.get -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.Min(Calendrie.Systems.Zoroastrian13Month x, Calendrie.Systems.Zoroastrian13Month y) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.MinValue.get -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.operator !=(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> bool
static Calendrie.Systems.Zoroastrian13Month.operator +(Calendrie.Systems.Zoroastrian13Month value, int months) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.operator ++(Calendrie.Systems.Zoroastrian13Month value) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.operator -(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> int
static Calendrie.Systems.Zoroastrian13Month.operator -(Calendrie.Systems.Zoroastrian13Month value, int months) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.operator --(Calendrie.Systems.Zoroastrian13Month value) -> Calendrie.Systems.Zoroastrian13Month
static Calendrie.Systems.Zoroastrian13Month.operator <(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> bool
static Calendrie.Systems.Zoroastrian13Month.operator <=(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> bool
static Calendrie.Systems.Zoroastrian13Month.operator ==(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> bool
static Calendrie.Systems.Zoroastrian13Month.operator >(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> bool
static Calendrie.Systems.Zoroastrian13Month.operator >=(Calendrie.Systems.Zoroastrian13Month left, Calendrie.Systems.Zoroastrian13Month right) -> bool
static Calendrie.Systems.Zoroastrian13Month.TryCreate(int year, int month) -> Calendrie.Systems.Zoroastrian13Month?
static Calendrie.Systems.Zoroastrian13Year.Calendar.get -> Calendrie.Systems.Zoroastrian13Calendar!
static Calendrie.Systems.Zoroastrian13Year.Create(int year) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.FromDate(Calendrie.Systems.Zoroastrian13Date date) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.FromMonth(Calendrie.Systems.Zoroastrian13Month month) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.Max(Calendrie.Systems.Zoroastrian13Year x, Calendrie.Systems.Zoroastrian13Year y) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.MaxValue.get -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.Min(Calendrie.Systems.Zoroastrian13Year x, Calendrie.Systems.Zoroastrian13Year y) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.MinValue.get -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.operator !=(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> bool
static Calendrie.Systems.Zoroastrian13Year.operator +(Calendrie.Systems.Zoroastrian13Year value, int years) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.operator ++(Calendrie.Systems.Zoroastrian13Year value) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.operator -(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> int
static Calendrie.Systems.Zoroastrian13Year.operator -(Calendrie.Systems.Zoroastrian13Year value, int years) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.operator --(Calendrie.Systems.Zoroastrian13Year value) -> Calendrie.Systems.Zoroastrian13Year
static Calendrie.Systems.Zoroastrian13Year.operator <(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> bool
static Calendrie.Systems.Zoroastrian13Year.operator <=(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> bool
static Calendrie.Systems.Zoroastrian13Year.operator ==(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> bool
static Calendrie.Systems.Zoroastrian13Year.operator >(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> bool
static Calendrie.Systems.Zoroastrian13Year.operator >=(Calendrie.Systems.Zoroastrian13Year left, Calendrie.Systems.Zoroastrian13Year right) -> bool
static Calendrie.Systems.Zoroastrian13Year.TryCreate(int year) -> Calendrie.Systems.Zoroastrian13Year?
static Calendrie.Systems.ZoroastrianCalendar.MaxYear.get -> int
static Calendrie.Systems.ZoroastrianCalendar.MinYear.get -> int
static Calendrie.Systems.ZoroastrianDate.Calendar.get -> Calendrie.Systems.ZoroastrianCalendar!
static Calendrie.Systems.ZoroastrianDate.Create(int year, int dayOfYear) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.Create(int year, int month, int day) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.explicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.ZoroastrianDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.ZoroastrianDate.explicit operator Calendrie.Systems.JulianDate(Calendrie.Systems.ZoroastrianDate date) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.ZoroastrianDate.FromAbsoluteDate(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.implicit operator Calendrie.DayNumber(Calendrie.Systems.ZoroastrianDate date) -> Calendrie.DayNumber
static Calendrie.Systems.ZoroastrianDate.Max(Calendrie.Systems.ZoroastrianDate x, Calendrie.Systems.ZoroastrianDate y) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.MaxValue.get -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.Min(Calendrie.Systems.ZoroastrianDate x, Calendrie.Systems.ZoroastrianDate y) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.MinValue.get -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator !=(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator +(Calendrie.Systems.ZoroastrianDate value, int days) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator ++(Calendrie.Systems.ZoroastrianDate value) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator -(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> int
static Calendrie.Systems.ZoroastrianDate.operator -(Calendrie.Systems.ZoroastrianDate value, int days) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator --(Calendrie.Systems.ZoroastrianDate value) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator <(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator <=(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator ==(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator >(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator >=(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.TryCreate(int year, int dayOfYear) -> Calendrie.Systems.ZoroastrianDate?
static Calendrie.Systems.ZoroastrianDate.TryCreate(int year, int month, int day) -> Calendrie.Systems.ZoroastrianDate?
static Calendrie.Systems.ZoroastrianMonth.Calendar.get -> Calendrie.Systems.ZoroastrianCalendar!
static Calendrie.Systems.ZoroastrianMonth.Create(int year, int month) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.FromDate(Calendrie.Systems.ZoroastrianDate date) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.FromMonthsSinceEpoch(int monthsSinceEpoch) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.Max(Calendrie.Systems.ZoroastrianMonth x, Calendrie.Systems.ZoroastrianMonth y) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.MaxValue.get -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.Min(Calendrie.Systems.ZoroastrianMonth x, Calendrie.Systems.ZoroastrianMonth y) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.MinValue.get -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.operator !=(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> bool
static Calendrie.Systems.ZoroastrianMonth.operator +(Calendrie.Systems.ZoroastrianMonth value, int months) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.operator ++(Calendrie.Systems.ZoroastrianMonth value) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.operator -(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> int
static Calendrie.Systems.ZoroastrianMonth.operator -(Calendrie.Systems.ZoroastrianMonth value, int months) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.operator --(Calendrie.Systems.ZoroastrianMonth value) -> Calendrie.Systems.ZoroastrianMonth
static Calendrie.Systems.ZoroastrianMonth.operator <(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> bool
static Calendrie.Systems.ZoroastrianMonth.operator <=(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> bool
static Calendrie.Systems.ZoroastrianMonth.operator ==(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> bool
static Calendrie.Systems.ZoroastrianMonth.operator >(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> bool
static Calendrie.Systems.ZoroastrianMonth.operator >=(Calendrie.Systems.ZoroastrianMonth left, Calendrie.Systems.ZoroastrianMonth right) -> bool
static Calendrie.Systems.ZoroastrianMonth.TryCreate(int year, int month) -> Calendrie.Systems.ZoroastrianMonth?
static Calendrie.Systems.ZoroastrianYear.Calendar.get -> Calendrie.Systems.ZoroastrianCalendar!
static Calendrie.Systems.ZoroastrianYear.Create(int year) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.FromDate(Calendrie.Systems.ZoroastrianDate date) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.FromMonth(Calendrie.Systems.ZoroastrianMonth month) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.Max(Calendrie.Systems.ZoroastrianYear x, Calendrie.Systems.ZoroastrianYear y) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.MaxValue.get -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.Min(Calendrie.Systems.ZoroastrianYear x, Calendrie.Systems.ZoroastrianYear y) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.MinValue.get -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.operator !=(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> bool
static Calendrie.Systems.ZoroastrianYear.operator +(Calendrie.Systems.ZoroastrianYear value, int years) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.operator ++(Calendrie.Systems.ZoroastrianYear value) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.operator -(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> int
static Calendrie.Systems.ZoroastrianYear.operator -(Calendrie.Systems.ZoroastrianYear value, int years) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.operator --(Calendrie.Systems.ZoroastrianYear value) -> Calendrie.Systems.ZoroastrianYear
static Calendrie.Systems.ZoroastrianYear.operator <(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> bool
static Calendrie.Systems.ZoroastrianYear.operator <=(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> bool
static Calendrie.Systems.ZoroastrianYear.operator ==(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> bool
static Calendrie.Systems.ZoroastrianYear.operator >(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> bool
static Calendrie.Systems.ZoroastrianYear.operator >=(Calendrie.Systems.ZoroastrianYear left, Calendrie.Systems.ZoroastrianYear right) -> bool
static Calendrie.Systems.ZoroastrianYear.TryCreate(int year) -> Calendrie.Systems.ZoroastrianYear?
static Calendrie.YearNumbering.GetCentury(int year) -> int
static Calendrie.YearNumbering.GetCentury(int year, out int yearOfCentury) -> int
static Calendrie.YearNumbering.GetDecade(int year, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetDecadeOfCentury(int year, out int century, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetIsoCentury(int year, out int yearOfCentury) -> int
static Calendrie.YearNumbering.GetIsoDecade(int year, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetIsoDecadeOfCentury(int year, out int century, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetIsoMillennium(int year, out int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetMillennium(int year, out int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetYearFromCentury(int century, int yearOfCentury) -> int
static Calendrie.YearNumbering.GetYearFromDecade(int decade, int yearOfDecade) -> int
static Calendrie.YearNumbering.GetYearFromIsoCentury(int century, int yearOfCentury) -> int
static Calendrie.YearNumbering.GetYearFromIsoDecade(int decade, int yearOfDecade) -> int
static Calendrie.YearNumbering.GetYearFromIsoMillennium(int millennium, int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetYearFromMillennium(int millennium, int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetYearOfCentury(int year) -> int
virtual Calendrie.Core.CalendricalSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
virtual Calendrie.Core.CalendricalSchema.CountMonthsSinceEpoch(int y, int m) -> int
virtual Calendrie.Core.CalendricalSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
virtual Calendrie.Core.CalendricalSchema.GetEndOfYearInMonths(int y) -> int
virtual Calendrie.Core.CalendricalSchema.GetYear(int daysSinceEpoch, out int doy) -> int
