#nullable enable
abstract Calendrie.Core.CalendricalSchema.CountDaysInMonth(int y, int m) -> int
abstract Calendrie.Core.CalendricalSchema.CountDaysInYear(int y) -> int
abstract Calendrie.Core.CalendricalSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
abstract Calendrie.Core.CalendricalSchema.CountMonthsInYear(int y) -> int
abstract Calendrie.Core.CalendricalSchema.Family.get -> Calendrie.CalendricalFamily
abstract Calendrie.Core.CalendricalSchema.GetMonth(int y, int doy, out int d) -> int
abstract Calendrie.Core.CalendricalSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
abstract Calendrie.Core.CalendricalSchema.GetStartOfYear(int y) -> int
abstract Calendrie.Core.CalendricalSchema.GetStartOfYearInMonths(int y) -> int
abstract Calendrie.Core.CalendricalSchema.GetYear(int daysSinceEpoch) -> int
abstract Calendrie.Core.CalendricalSchema.IsIntercalaryDay(int y, int m, int d) -> bool
abstract Calendrie.Core.CalendricalSchema.IsIntercalaryMonth(int y, int m) -> bool
abstract Calendrie.Core.CalendricalSchema.IsLeapYear(int y) -> bool
abstract Calendrie.Core.CalendricalSchema.IsRegular(out int monthsInYear) -> bool
abstract Calendrie.Core.CalendricalSchema.IsSupplementaryDay(int y, int m, int d) -> bool
abstract Calendrie.Core.CalendricalSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
abstract Calendrie.Core.LimitSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
abstract Calendrie.Core.RegularSchema.MonthsInYear.get -> int
abstract Calendrie.Hemerology.Calendar.CountDaysInMonth(int year, int month) -> int
abstract Calendrie.Hemerology.Calendar.CountDaysInYear(int year) -> int
abstract Calendrie.Hemerology.CalendarScope.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
abstract Calendrie.Hemerology.CalendarScope.ValidateYearMonth(int year, int month, string? paramName = null) -> void
abstract Calendrie.Hemerology.CalendarScope.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.Days = 1 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.DaysAndMonths = Calendrie.CalendricalAdjustments.Days | Calendrie.CalendricalAdjustments.Months -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.Months = 4 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.None = 0 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAdjustments.Weeks = 2 -> Calendrie.CalendricalAdjustments
Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Arithmetical = 1 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Astronomical = 2 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Observational = 3 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalAlgorithm.Unknown = 0 -> Calendrie.CalendricalAlgorithm
Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.AnnusVagus = 1 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Lunar = 3 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Lunisolar = 4 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Other = 0 -> Calendrie.CalendricalFamily
Calendrie.CalendricalFamily.Solar = 2 -> Calendrie.CalendricalFamily
Calendrie.Core.CalendricalConstants
Calendrie.Core.CalendricalSchema
Calendrie.Core.CalendricalSchema.Algorithm.get -> Calendrie.CalendricalAlgorithm
Calendrie.Core.CalendricalSchema.CalendricalSchema(Calendrie.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.CalendricalSchema.CountDaysInMonthAfter(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthAfter(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthAfter(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthBefore(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInMonthBefore(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfter(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfter(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfter(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearAfterMonth(int y, int m) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearBefore(int daysSinceEpoch) -> int
Calendrie.Core.CalendricalSchema.CountDaysInYearBefore(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.CountDaysSinceEpoch(int y, int doy) -> int
Calendrie.Core.CalendricalSchema.GetDayOfYear(int y, int m, int d) -> int
Calendrie.Core.CalendricalSchema.GetEndOfMonth(int y, int m) -> int
Calendrie.Core.CalendricalSchema.GetEndOfYear(int y) -> int
Calendrie.Core.CalendricalSchema.GetStartOfMonth(int y, int m) -> int
Calendrie.Core.CalendricalSchema.MinDaysInMonth.get -> int
Calendrie.Core.CalendricalSchema.MinDaysInYear.get -> int
Calendrie.Core.CalendricalSchema.PreValidator.get -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Core.CalendricalSchema.PreValidator.init -> void
Calendrie.Core.CalendricalSchema.SupportedDays.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSchema.SupportedMonths.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSchema.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegment
Calendrie.Core.CalendricalSegment.IsComplete.get -> bool
Calendrie.Core.CalendricalSegment.MaxIsEndOfYear.get -> bool
Calendrie.Core.CalendricalSegment.MinIsStartOfYear.get -> bool
Calendrie.Core.CalendricalSegment.MinMaxDateParts.get -> Calendrie.Core.Intervals.OrderedPair<Calendrie.DateParts>
Calendrie.Core.CalendricalSegment.MinMaxMonthParts.get -> Calendrie.Core.Intervals.OrderedPair<Calendrie.MonthParts>
Calendrie.Core.CalendricalSegment.MinMaxOrdinalParts.get -> Calendrie.Core.Intervals.OrderedPair<Calendrie.OrdinalParts>
Calendrie.Core.CalendricalSegment.SupportedDays.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegment.SupportedMonths.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegment.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.CalendricalSegmentBuilder
Calendrie.Core.CalendricalSegmentBuilder.BuildSegment() -> Calendrie.Core.CalendricalSegment!
Calendrie.Core.CalendricalSegmentBuilder.CalendricalSegmentBuilder(Calendrie.Core.ICalendricalSchema! schema) -> void
Calendrie.Core.CalendricalSegmentBuilder.HasMax.get -> bool
Calendrie.Core.CalendricalSegmentBuilder.HasMin.get -> bool
Calendrie.Core.CalendricalSegmentBuilder.IsBuildable.get -> bool
Calendrie.Core.CalendricalSegmentBuilder.MaxDateParts.get -> Calendrie.DateParts
Calendrie.Core.CalendricalSegmentBuilder.MaxDateParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MaxDaysSinceEpoch.get -> int
Calendrie.Core.CalendricalSegmentBuilder.MaxDaysSinceEpoch.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MaxOrdinalParts.get -> Calendrie.OrdinalParts
Calendrie.Core.CalendricalSegmentBuilder.MaxOrdinalParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MinDateParts.get -> Calendrie.DateParts
Calendrie.Core.CalendricalSegmentBuilder.MinDateParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MinDaysSinceEpoch.get -> int
Calendrie.Core.CalendricalSegmentBuilder.MinDaysSinceEpoch.set -> void
Calendrie.Core.CalendricalSegmentBuilder.MinOrdinalParts.get -> Calendrie.OrdinalParts
Calendrie.Core.CalendricalSegmentBuilder.MinOrdinalParts.set -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMaxToEndOfMaxSupportedYear() -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMaxToEndOfYear(int year) -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMinToStartOfMinSupportedYear() -> void
Calendrie.Core.CalendricalSegmentBuilder.SetMinToStartOfYear(int year) -> void
Calendrie.Core.CalendricalSegmentBuilder.TrySetMinToStartOfMinSupportedYearOnOrAfterYear1() -> bool
Calendrie.Core.ICalendricalCore
Calendrie.Core.ICalendricalCore.Algorithm.get -> Calendrie.CalendricalAlgorithm
Calendrie.Core.ICalendricalCore.CountDaysInMonth(int y, int m) -> int
Calendrie.Core.ICalendricalCore.CountDaysInYear(int y) -> int
Calendrie.Core.ICalendricalCore.CountMonthsInYear(int y) -> int
Calendrie.Core.ICalendricalCore.Family.get -> Calendrie.CalendricalFamily
Calendrie.Core.ICalendricalCore.IsIntercalaryDay(int y, int m, int d) -> bool
Calendrie.Core.ICalendricalCore.IsIntercalaryMonth(int y, int m) -> bool
Calendrie.Core.ICalendricalCore.IsLeapYear(int y) -> bool
Calendrie.Core.ICalendricalCore.IsRegular(out int monthsInYear) -> bool
Calendrie.Core.ICalendricalCore.IsSupplementaryDay(int y, int m, int d) -> bool
Calendrie.Core.ICalendricalCore.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
Calendrie.Core.ICalendricalPreValidator
Calendrie.Core.ICalendricalPreValidator.CreateDefault(Calendrie.Core.CalendricalSchema! schema) -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Core.ICalendricalPreValidator.ValidateDayOfMonth(int y, int m, int day, string? paramName = null) -> void
Calendrie.Core.ICalendricalPreValidator.ValidateDayOfYear(int y, int dayOfYear, string? paramName = null) -> void
Calendrie.Core.ICalendricalPreValidator.ValidateMonth(int y, int month, string? paramName = null) -> void
Calendrie.Core.ICalendricalPreValidator.ValidateMonthDay(int y, int month, int day, string? paramName = null) -> void
Calendrie.Core.ICalendricalSchema
Calendrie.Core.ICalendricalSchema.CountDaysInMonthAfter(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthAfter(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthAfter(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthBefore(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthBefore(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInMonthBefore(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfter(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfter(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfter(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearAfterMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBefore(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBefore(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBefore(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.CountDaysSinceEpoch(int y, int doy) -> int
Calendrie.Core.ICalendricalSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.CountMonthsSinceEpoch(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
Calendrie.Core.ICalendricalSchema.GetDayOfYear(int y, int m, int d) -> int
Calendrie.Core.ICalendricalSchema.GetEndOfMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.GetEndOfYear(int y) -> int
Calendrie.Core.ICalendricalSchema.GetEndOfYearInMonths(int y) -> int
Calendrie.Core.ICalendricalSchema.GetMonth(int y, int doy, out int d) -> int
Calendrie.Core.ICalendricalSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
Calendrie.Core.ICalendricalSchema.GetStartOfMonth(int y, int m) -> int
Calendrie.Core.ICalendricalSchema.GetStartOfYear(int y) -> int
Calendrie.Core.ICalendricalSchema.GetStartOfYearInMonths(int y) -> int
Calendrie.Core.ICalendricalSchema.GetYear(int daysSinceEpoch) -> int
Calendrie.Core.ICalendricalSchema.GetYear(int daysSinceEpoch, out int doy) -> int
Calendrie.Core.ICalendricalSchema.MinDaysInMonth.get -> int
Calendrie.Core.ICalendricalSchema.MinDaysInYear.get -> int
Calendrie.Core.ICalendricalSchema.PreValidator.get -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Core.ICalendricalSchema.SupportedDays.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.ICalendricalSchema.SupportedMonths.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.ICalendricalSchema.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.Intervals.IInterval<T>
Calendrie.Core.Intervals.IInterval<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.IInterval<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.IInterval<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.IInterval<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.Interval
Calendrie.Core.Intervals.IRay<T>
Calendrie.Core.Intervals.IRay<T>.Endpoint.get -> T
Calendrie.Core.Intervals.ISegment<T>
Calendrie.Core.Intervals.ISegment<T>.Endpoints.get -> Calendrie.Core.Intervals.OrderedPair<T>
Calendrie.Core.Intervals.ISegment<T>.LowerEnd.get -> T
Calendrie.Core.Intervals.ISegment<T>.UpperEnd.get -> T
Calendrie.Core.Intervals.ISetComparable<TOther>
Calendrie.Core.Intervals.ISetComparable<TOther>.IsProperSubsetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetComparable<TOther>.IsProperSupersetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetEquatable<TOther>
Calendrie.Core.Intervals.ISetEquatable<TOther>.SetEquals(TOther other) -> bool
Calendrie.Core.Intervals.ISetIncludible<TOther>
Calendrie.Core.Intervals.ISetIncludible<TOther>.IsSubsetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetIncludible<TOther>.IsSupersetOf(TOther other) -> bool
Calendrie.Core.Intervals.ISetMembership<T>
Calendrie.Core.Intervals.ISetMembership<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.LowerRay
Calendrie.Core.Intervals.LowerRay<T>
Calendrie.Core.Intervals.LowerRay<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.LowerRay<T>.Equals(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsProperSubsetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsProperSupersetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsSubsetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.IsSupersetOf(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.LowerRay<T>.LowerRay() -> void
Calendrie.Core.Intervals.LowerRay<T>.LowerRay(T max) -> void
Calendrie.Core.Intervals.LowerRay<T>.Max.get -> T
Calendrie.Core.Intervals.LowerRay<T>.SetEquals(Calendrie.Core.Intervals.LowerRay<T> other) -> bool
Calendrie.Core.Intervals.OrderedPair
Calendrie.Core.Intervals.OrderedPair<T>
Calendrie.Core.Intervals.OrderedPair<T>.Deconstruct(out T lowerValue, out T upperValue) -> void
Calendrie.Core.Intervals.OrderedPair<T>.Equals(Calendrie.Core.Intervals.OrderedPair<T> other) -> bool
Calendrie.Core.Intervals.OrderedPair<T>.LowerValue.get -> T
Calendrie.Core.Intervals.OrderedPair<T>.OrderedPair() -> void
Calendrie.Core.Intervals.OrderedPair<T>.OrderedPair(T x, T y) -> void
Calendrie.Core.Intervals.OrderedPair<T>.Select<TResult>(System.Func<T, TResult>! lowerValueSelector, System.Func<T, TResult>! upperValueSelector) -> Calendrie.Core.Intervals.OrderedPair<TResult>
Calendrie.Core.Intervals.OrderedPair<T>.Select<TResult>(System.Func<T, TResult>! selector) -> Calendrie.Core.Intervals.OrderedPair<TResult>
Calendrie.Core.Intervals.OrderedPair<T>.UpperValue.get -> T
Calendrie.Core.Intervals.Range
Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.Range<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.Range<T>.Endpoints.get -> Calendrie.Core.Intervals.OrderedPair<T>
Calendrie.Core.Intervals.Range<T>.Equals(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.Range<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.Range<T>.IsProperSubsetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsProperSupersetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.Range<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.Range<T>.IsSingleton.get -> bool
Calendrie.Core.Intervals.Range<T>.IsSubsetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.IsSupersetOf(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.Max.get -> T
Calendrie.Core.Intervals.Range<T>.Min.get -> T
Calendrie.Core.Intervals.Range<T>.Range() -> void
Calendrie.Core.Intervals.Range<T>.Range(T min, T max) -> void
Calendrie.Core.Intervals.Range<T>.SetEquals(Calendrie.Core.Intervals.Range<T> other) -> bool
Calendrie.Core.Intervals.Range<T>.WithMax(T max) -> Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.Range<T>.WithMin(T min) -> Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.RangeSet
Calendrie.Core.Intervals.RangeSet<T>
Calendrie.Core.Intervals.RangeSet<T>.Equals(Calendrie.Core.Intervals.RangeSet<T> other) -> bool
Calendrie.Core.Intervals.RangeSet<T>.IsEmpty.get -> bool
Calendrie.Core.Intervals.RangeSet<T>.Range.get -> Calendrie.Core.Intervals.Range<T>
Calendrie.Core.Intervals.RangeSet<T>.RangeSet() -> void
Calendrie.Core.Intervals.RangeSet<T>.RangeSet(T min, T max) -> void
Calendrie.Core.Intervals.UpperRay
Calendrie.Core.Intervals.UpperRay<T>
Calendrie.Core.Intervals.UpperRay<T>.Contains(T value) -> bool
Calendrie.Core.Intervals.UpperRay<T>.Equals(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsLeftBounded.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsLeftOpen.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsProperSubsetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsProperSupersetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsRightBounded.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsRightOpen.get -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsSubsetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.IsSupersetOf(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.Min.get -> T
Calendrie.Core.Intervals.UpperRay<T>.SetEquals(Calendrie.Core.Intervals.UpperRay<T> other) -> bool
Calendrie.Core.Intervals.UpperRay<T>.UpperRay() -> void
Calendrie.Core.Intervals.UpperRay<T>.UpperRay(T min) -> void
Calendrie.Core.ISchemaActivator<TSchema>
Calendrie.Core.IYearsValidator
Calendrie.Core.IYearsValidator.CheckLowerBound(int year) -> void
Calendrie.Core.IYearsValidator.CheckOverflow(int year) -> void
Calendrie.Core.IYearsValidator.CheckUpperBound(int year) -> void
Calendrie.Core.IYearsValidator.Range.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.IYearsValidator.Validate(int year, string? paramName = null) -> void
Calendrie.Core.LimitSchema
Calendrie.Core.LimitSchema.GetDateParts(int daysSinceEpoch) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetDateParts(int y, int doy) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetDateParts(int y, int m, int d) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetDatePartsAtEndOfMonth(int y, int m) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetDatePartsAtEndOfYear(int y) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetDatePartsAtStartOfMonth(int y, int m) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetDatePartsAtStartOfYear(int y) -> Calendrie.Core.Yemoda
Calendrie.Core.LimitSchema.GetMonthParts(int monthsSinceEpoch) -> Calendrie.Core.Yemo
Calendrie.Core.LimitSchema.GetMonthPartsAtEndOfYear(int y) -> Calendrie.Core.Yemo
Calendrie.Core.LimitSchema.GetMonthPartsAtStartOfYear(int y) -> Calendrie.Core.Yemo
Calendrie.Core.LimitSchema.GetOrdinalParts(int daysSinceEpoch) -> Calendrie.Core.Yedoy
Calendrie.Core.LimitSchema.GetOrdinalParts(int y, int m, int d) -> Calendrie.Core.Yedoy
Calendrie.Core.LimitSchema.GetOrdinalPartsAtEndOfMonth(int y, int m) -> Calendrie.Core.Yedoy
Calendrie.Core.LimitSchema.GetOrdinalPartsAtEndOfYear(int y) -> Calendrie.Core.Yedoy
Calendrie.Core.LimitSchema.GetOrdinalPartsAtStartOfMonth(int y, int m) -> Calendrie.Core.Yedoy
Calendrie.Core.LimitSchema.GetOrdinalPartsAtStartOfYear(int y) -> Calendrie.Core.Yedoy
Calendrie.Core.LimitSchema.SupportedYearsCore.get -> Calendrie.Core.Intervals.Range<int>
Calendrie.Core.PartsAdapter
Calendrie.Core.PartsAdapter.GetDateParts(int daysSinceEpoch) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetDateParts(int y, int doy) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetDatePartsAtEndOfMonth(int y, int m) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetDatePartsAtEndOfYear(int y) -> Calendrie.DateParts
Calendrie.Core.PartsAdapter.GetMonthParts(int monthsSinceEpoch) -> Calendrie.MonthParts
Calendrie.Core.PartsAdapter.GetMonthPartsAtEndOfYear(int y) -> Calendrie.MonthParts
Calendrie.Core.PartsAdapter.GetOrdinalParts(int daysSinceEpoch) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalParts(int y, int m, int d) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalPartsAtEndOfMonth(int y, int m) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalPartsAtEndOfYear(int y) -> Calendrie.OrdinalParts
Calendrie.Core.PartsAdapter.GetOrdinalPartsAtStartOfMonth(int y, int m) -> Calendrie.OrdinalParts
Calendrie.Core.Prototyping.NonRegularSchemaPrototype
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.IsProleptic.get -> bool
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.MinMonthsInYear.get -> int
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.NonRegularSchemaPrototype(bool proleptic, int minMonthsInYear, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Prototyping.NonRegularSchemaPrototype.NonRegularSchemaPrototype(Calendrie.Core.Intervals.Range<int> supportedYears, int minMonthsInYear, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Prototyping.RegularSchemaPrototype
Calendrie.Core.Prototyping.RegularSchemaPrototype.IsProleptic.get -> bool
Calendrie.Core.Prototyping.RegularSchemaPrototype.RegularSchemaPrototype(bool proleptic, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Prototyping.RegularSchemaPrototype.RegularSchemaPrototype(Calendrie.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.RegularSchema
Calendrie.Core.RegularSchema.RegularSchema(Calendrie.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Calendrie.Core.Schemas.CivilSchema
Calendrie.Core.Schemas.Coptic12Schema
Calendrie.Core.Schemas.Coptic12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.Coptic13Schema
Calendrie.Core.Schemas.Coptic13Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.CopticSchema
Calendrie.Core.Schemas.Egyptian12Schema
Calendrie.Core.Schemas.Egyptian12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.Egyptian13Schema
Calendrie.Core.Schemas.Egyptian13Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.EgyptianSchema
Calendrie.Core.Schemas.FrenchRepublican12Schema
Calendrie.Core.Schemas.FrenchRepublican12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.FrenchRepublican13Schema
Calendrie.Core.Schemas.FrenchRepublican13Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Calendrie.Core.Schemas.FrenchRepublicanSchema
Calendrie.Core.Schemas.GJSchema
Calendrie.Core.Schemas.GregorianSchema
Calendrie.Core.Schemas.InternationalFixedSchema
Calendrie.Core.Schemas.InternationalFixedSchema.IsBlankDay(int y, int m, int d) -> bool
Calendrie.Core.Schemas.JulianSchema
Calendrie.Core.Schemas.Persian2820Schema
Calendrie.Core.Schemas.PositivistSchema
Calendrie.Core.Schemas.PositivistSchema.IsBlankDay(int y, int m, int d) -> bool
Calendrie.Core.Schemas.PtolemaicSchema
Calendrie.Core.Schemas.TabularIslamicSchema
Calendrie.Core.Schemas.Tropicalia3031Schema
Calendrie.Core.Schemas.Tropicalia3130Schema
Calendrie.Core.Schemas.TropicaliaSchema
Calendrie.Core.Schemas.TropicalistaSchema
Calendrie.Core.Schemas.WorldSchema
Calendrie.Core.Schemas.WorldSchema.CountDaysInWorldMonth(int y, int m) -> int
Calendrie.Core.Schemas.WorldSchema.IsBlankDay(int y, int m, int d) -> bool
Calendrie.Core.Yedoy
Calendrie.Core.Yedoy.CompareTo(Calendrie.Core.Yedoy other) -> int
Calendrie.Core.Yedoy.DayOfYear.get -> int
Calendrie.Core.Yedoy.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Core.Yedoy.Equals(Calendrie.Core.Yedoy other) -> bool
Calendrie.Core.Yedoy.StartOfYear.get -> Calendrie.Core.Yedoy
Calendrie.Core.Yedoy.ToBinary() -> int
Calendrie.Core.Yedoy.Year.get -> int
Calendrie.Core.Yedoy.Yedoy() -> void
Calendrie.Core.Yemo
Calendrie.Core.Yemo.CompareTo(Calendrie.Core.Yemo other) -> int
Calendrie.Core.Yemo.Deconstruct(out int year, out int month) -> void
Calendrie.Core.Yemo.Equals(Calendrie.Core.Yemo other) -> bool
Calendrie.Core.Yemo.GetDayOfMonth(int day) -> Calendrie.Core.Yemoda
Calendrie.Core.Yemo.Month.get -> int
Calendrie.Core.Yemo.StartOfMonth.get -> Calendrie.Core.Yemoda
Calendrie.Core.Yemo.StartOfYear.get -> Calendrie.Core.Yemoda
Calendrie.Core.Yemo.ToBinary() -> int
Calendrie.Core.Yemo.Year.get -> int
Calendrie.Core.Yemo.Yemo() -> void
Calendrie.Core.Yemoda
Calendrie.Core.Yemoda.CompareTo(Calendrie.Core.Yemoda other) -> int
Calendrie.Core.Yemoda.Day.get -> int
Calendrie.Core.Yemoda.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Core.Yemoda.Equals(Calendrie.Core.Yemoda other) -> bool
Calendrie.Core.Yemoda.Month.get -> int
Calendrie.Core.Yemoda.StartOfMonth.get -> Calendrie.Core.Yemoda
Calendrie.Core.Yemoda.StartOfYear.get -> Calendrie.Core.Yemoda
Calendrie.Core.Yemoda.ToBinary() -> int
Calendrie.Core.Yemoda.ToBinary(uint extraData) -> long
Calendrie.Core.Yemoda.Year.get -> int
Calendrie.Core.Yemoda.Yemo.get -> Calendrie.Core.Yemo
Calendrie.Core.Yemoda.Yemoda() -> void
Calendrie.DateParts
Calendrie.DateParts.CompareTo(Calendrie.DateParts other) -> int
Calendrie.DateParts.DateParts() -> void
Calendrie.DateParts.DateParts(int Year, int Month, int Day) -> void
Calendrie.DateParts.Day.get -> int
Calendrie.DateParts.Day.init -> void
Calendrie.DateParts.Month.get -> int
Calendrie.DateParts.Month.init -> void
Calendrie.DateParts.MonthParts.get -> Calendrie.MonthParts
Calendrie.DateParts.Year.get -> int
Calendrie.DateParts.Year.init -> void
Calendrie.DayNumber
Calendrie.DayNumber.CompareTo(Calendrie.DayNumber other) -> int
Calendrie.DayNumber.CountDaysSince(Calendrie.DayNumber other) -> int
Calendrie.DayNumber.DayNumber() -> void
Calendrie.DayNumber.DayOfWeek.get -> System.DayOfWeek
Calendrie.DayNumber.DaysSinceZero.get -> int
Calendrie.DayNumber.Equals(Calendrie.DayNumber other) -> bool
Calendrie.DayNumber.GetGregorianOrdinalParts() -> Calendrie.OrdinalParts
Calendrie.DayNumber.GetGregorianParts() -> Calendrie.DateParts
Calendrie.DayNumber.GetGregorianYear() -> int
Calendrie.DayNumber.GetJulianOrdinalParts() -> Calendrie.OrdinalParts
Calendrie.DayNumber.GetJulianParts() -> Calendrie.DateParts
Calendrie.DayNumber.GetJulianYear() -> int
Calendrie.DayNumber.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.Next(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.NextDay() -> Calendrie.DayNumber
Calendrie.DayNumber.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.Ordinal.get -> Calendrie.Ord
Calendrie.DayNumber.PlusDays(int days) -> Calendrie.DayNumber
Calendrie.DayNumber.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayNumber.PreviousDay() -> Calendrie.DayNumber
Calendrie.DayNumber.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.DayNumber
Calendrie.DayZero
Calendrie.Hemerology.Calendar
Calendrie.Hemerology.Calendar.Algorithm.get -> Calendrie.CalendricalAlgorithm
Calendrie.Hemerology.Calendar.Calendar(string! name, Calendrie.Hemerology.CalendarScope! scope) -> void
Calendrie.Hemerology.Calendar.Epoch.get -> Calendrie.DayNumber
Calendrie.Hemerology.Calendar.Family.get -> Calendrie.CalendricalFamily
Calendrie.Hemerology.Calendar.IsIntercalaryMonth(int year, int month) -> bool
Calendrie.Hemerology.Calendar.IsLeapYear(int year) -> bool
Calendrie.Hemerology.Calendar.Name.get -> string!
Calendrie.Hemerology.Calendar.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
Calendrie.Hemerology.Calendar.Scope.get -> Calendrie.Hemerology.CalendarScope!
Calendrie.Hemerology.CalendarScope
Calendrie.Hemerology.CalendarScope.CalendarScope(Calendrie.Core.CalendricalSegment! segment, Calendrie.DayNumber epoch) -> void
Calendrie.Hemerology.CalendarScope.CheckLowerBound(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.CheckOverflow(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.CheckUpperBound(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.Domain.get -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>
Calendrie.Hemerology.CalendarScope.Epoch.get -> Calendrie.DayNumber
Calendrie.Hemerology.CalendarScope.PreValidator.get -> Calendrie.Core.ICalendricalPreValidator!
Calendrie.Hemerology.CalendarScope.Schema.get -> Calendrie.Core.ICalendricalSchema!
Calendrie.Hemerology.CalendarScope.Segment.get -> Calendrie.Core.CalendricalSegment!
Calendrie.Hemerology.CalendarScope.Validate(Calendrie.DayNumber dayNumber) -> void
Calendrie.Hemerology.CalendarScope.ValidateYear(int year, string? paramName = null) -> void
Calendrie.Hemerology.CalendarScope.YearsValidator.get -> Calendrie.Core.IYearsValidator!
Calendrie.Hemerology.IAbsoluteDate
Calendrie.Hemerology.IAbsoluteDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Hemerology.IAbsoluteDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Hemerology.IAbsoluteDate.DaysSinceEpoch.get -> int
Calendrie.Hemerology.IAbsoluteDate.Nearest<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.Next<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.NextOrSame<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.Previous<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate.PreviousOrSame<TDate>(TDate date, System.DayOfWeek dayOfWeek) -> TDate
Calendrie.Hemerology.IAbsoluteDate<TSelf>
Calendrie.Hemerology.IAbsoluteDate<TSelf>.FromDayNumber(Calendrie.DayNumber dayNumber) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Nearest(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Next(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.NextOrSame(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.operator -(TSelf left, TSelf right) -> int
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.Previous(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAbsoluteDateBase<TSelf>.PreviousOrSame(System.DayOfWeek dayOfWeek) -> TSelf
Calendrie.Hemerology.IAdjustableDateable<TSelf>
Calendrie.Hemerology.IAdjustableDateable<TSelf>.WithDay(int newDay) -> TSelf
Calendrie.Hemerology.IAdjustableDateable<TSelf>.WithDayOfYear(int newDayOfYear) -> TSelf
Calendrie.Hemerology.IAdjustableDateable<TSelf>.WithMonth(int newMonth) -> TSelf
Calendrie.Hemerology.IAdjustableDateable<TSelf>.WithYear(int newYear) -> TSelf
Calendrie.Hemerology.IBlankDay
Calendrie.Hemerology.IBlankDay.IsBlank.get -> bool
Calendrie.Hemerology.ICalendarBound<TCalendar>
Calendrie.Hemerology.ICalendarBound<TCalendar>.Calendar.get -> TCalendar
Calendrie.Hemerology.ICalendarDate
Calendrie.Hemerology.ICalendarDate<TSelf>
Calendrie.Hemerology.ICalendarDateBase<TSelf>
Calendrie.Hemerology.ICalendarMonth
Calendrie.Hemerology.ICalendarMonth.Century.get -> int
Calendrie.Hemerology.ICalendarMonth.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.ICalendarMonth.CountElapsedMonthsInYear() -> int
Calendrie.Hemerology.ICalendarMonth.CountRemainingMonthsInYear() -> int
Calendrie.Hemerology.ICalendarMonth.Deconstruct(out int year, out int month) -> void
Calendrie.Hemerology.ICalendarMonth.IsIntercalary.get -> bool
Calendrie.Hemerology.ICalendarMonth.Month.get -> int
Calendrie.Hemerology.ICalendarMonth.MonthsSinceEpoch.get -> int
Calendrie.Hemerology.ICalendarMonth.Year.get -> int
Calendrie.Hemerology.ICalendarMonth.YearOfCentury.get -> int
Calendrie.Hemerology.ICalendarMonth.YearOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.ICalendarMonth<TSelf>
Calendrie.Hemerology.ICalendarMonthBase<TSelf>
Calendrie.Hemerology.ICalendarMonthBase<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.ICalendarMonthBase<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.ICalendarMonthBase<TSelf>.operator -(TSelf left, TSelf right) -> int
Calendrie.Hemerology.ICalendarMonthBase<TSelf>.WithMonth(int newMonth) -> TSelf
Calendrie.Hemerology.ICalendarMonthBase<TSelf>.WithYear(int newYear) -> TSelf
Calendrie.Hemerology.ICalendarYear
Calendrie.Hemerology.ICalendarYear.Century.get -> int
Calendrie.Hemerology.ICalendarYear.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.ICalendarYear.IsLeap.get -> bool
Calendrie.Hemerology.ICalendarYear.Year.get -> int
Calendrie.Hemerology.ICalendarYear.YearOfCentury.get -> int
Calendrie.Hemerology.ICalendarYear.YearOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.ICalendarYear.YearsSinceEpoch.get -> int
Calendrie.Hemerology.ICalendarYear<TSelf>
Calendrie.Hemerology.ICalendarYearBase<TSelf>
Calendrie.Hemerology.ICalendarYearBase<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.ICalendarYearBase<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Calendrie.Hemerology.ICalendarYearBase<TSelf>.operator -(TSelf left, TSelf right) -> int
Calendrie.Hemerology.IDateable
Calendrie.Hemerology.IDateable.Century.get -> int
Calendrie.Hemerology.IDateable.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IDateable.CountElapsedDaysInMonth() -> int
Calendrie.Hemerology.IDateable.CountElapsedDaysInYear() -> int
Calendrie.Hemerology.IDateable.CountRemainingDaysInMonth() -> int
Calendrie.Hemerology.IDateable.CountRemainingDaysInYear() -> int
Calendrie.Hemerology.IDateable.Day.get -> int
Calendrie.Hemerology.IDateable.DayOfYear.get -> int
Calendrie.Hemerology.IDateable.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Hemerology.IDateable.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Hemerology.IDateable.IsIntercalary.get -> bool
Calendrie.Hemerology.IDateable.IsSupplementary.get -> bool
Calendrie.Hemerology.IDateable.Month.get -> int
Calendrie.Hemerology.IDateable.Year.get -> int
Calendrie.Hemerology.IDateable.YearOfCentury.get -> int
Calendrie.Hemerology.IDateable.YearOfEra.get -> Calendrie.Ord
Calendrie.Hemerology.IDateProvider<TDate>
Calendrie.Hemerology.IDateProvider<TDate>.GetDaysInMonth(int year, int month) -> System.Collections.Generic.IEnumerable<TDate>!
Calendrie.Hemerology.IDateProvider<TDate>.GetDaysInYear(int year) -> System.Collections.Generic.IEnumerable<TDate>!
Calendrie.Hemerology.IDateProvider<TDate>.GetEndOfMonth(int year, int month) -> TDate
Calendrie.Hemerology.IDateProvider<TDate>.GetEndOfYear(int year) -> TDate
Calendrie.Hemerology.IDateProvider<TDate>.GetStartOfMonth(int year, int month) -> TDate
Calendrie.Hemerology.IDateProvider<TDate>.GetStartOfYear(int year) -> TDate
Calendrie.Hemerology.IDayArithmetic<TSelf>
Calendrie.Hemerology.IDayArithmetic<TSelf>.AddWeeks(int weeks) -> TSelf
Calendrie.Hemerology.IDayArithmetic<TSelf>.CountDaysSince(TSelf other) -> int
Calendrie.Hemerology.IDayArithmetic<TSelf>.CountWeeksSince(TSelf other) -> int
Calendrie.Hemerology.IDayArithmetic<TSelf>.NextDay() -> TSelf
Calendrie.Hemerology.IDayArithmetic<TSelf>.NextWeek() -> TSelf
Calendrie.Hemerology.IDayArithmetic<TSelf>.PlusDays(int days) -> TSelf
Calendrie.Hemerology.IDayArithmetic<TSelf>.PreviousDay() -> TSelf
Calendrie.Hemerology.IDayArithmetic<TSelf>.PreviousWeek() -> TSelf
Calendrie.Hemerology.IDaySegment<TDate>
Calendrie.Hemerology.IDaySegment<TDate>.CountDays() -> int
Calendrie.Hemerology.IDaySegment<TDate>.EnumerateDays() -> System.Collections.Generic.IEnumerable<TDate>!
Calendrie.Hemerology.IDaySegment<TDate>.MaxDay.get -> TDate
Calendrie.Hemerology.IDaySegment<TDate>.MinDay.get -> TDate
Calendrie.Hemerology.IDaySegment<TDate>.ToDayRange() -> Calendrie.Core.Intervals.Range<TDate>
Calendrie.Hemerology.IEpagomenalDay
Calendrie.Hemerology.IEpagomenalDay.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Hemerology.IMonthArithmetic<TSelf>
Calendrie.Hemerology.IMonthArithmetic<TSelf>.CountMonthsSince(TSelf other) -> int
Calendrie.Hemerology.IMonthArithmetic<TSelf>.NextMonth() -> TSelf
Calendrie.Hemerology.IMonthArithmetic<TSelf>.PlusMonths(int months) -> TSelf
Calendrie.Hemerology.IMonthArithmetic<TSelf>.PreviousMonth() -> TSelf
Calendrie.Hemerology.IMonthSegment<TMonth>
Calendrie.Hemerology.IMonthSegment<TMonth>.CountMonths() -> int
Calendrie.Hemerology.IMonthSegment<TMonth>.EnumerateMonths() -> System.Collections.Generic.IEnumerable<TMonth>!
Calendrie.Hemerology.IMonthSegment<TMonth>.MaxMonth.get -> TMonth
Calendrie.Hemerology.IMonthSegment<TMonth>.MinMonth.get -> TMonth
Calendrie.Hemerology.IMonthSegment<TMonth>.ToMonthRange() -> Calendrie.Core.Intervals.Range<TMonth>
Calendrie.Hemerology.IYearArithmetic<TSelf>
Calendrie.Hemerology.IYearArithmetic<TSelf>.CountYearsSince(TSelf other) -> int
Calendrie.Hemerology.IYearArithmetic<TSelf>.NextYear() -> TSelf
Calendrie.Hemerology.IYearArithmetic<TSelf>.PlusYears(int years) -> TSelf
Calendrie.Hemerology.IYearArithmetic<TSelf>.PreviousYear() -> TSelf
Calendrie.MonthParts
Calendrie.MonthParts.CompareTo(Calendrie.MonthParts other) -> int
Calendrie.MonthParts.Month.get -> int
Calendrie.MonthParts.Month.init -> void
Calendrie.MonthParts.MonthParts() -> void
Calendrie.MonthParts.MonthParts(int Year, int Month) -> void
Calendrie.MonthParts.Year.get -> int
Calendrie.MonthParts.Year.init -> void
Calendrie.Ord
Calendrie.Ord.Add(int num) -> Calendrie.Ord
Calendrie.Ord.CompareTo(Calendrie.Ord other) -> int
Calendrie.Ord.Deconstruct(out int pos, out bool afterZeroth) -> void
Calendrie.Ord.Decrement() -> Calendrie.Ord
Calendrie.Ord.Equals(Calendrie.Ord other) -> bool
Calendrie.Ord.Increment() -> Calendrie.Ord
Calendrie.Ord.Negate() -> Calendrie.Ord
Calendrie.Ord.Ord() -> void
Calendrie.Ord.Rank.get -> int
Calendrie.Ord.Subtract(Calendrie.Ord other) -> int
Calendrie.Ord.ToInt32() -> int
Calendrie.OrdinalParts
Calendrie.OrdinalParts.CompareTo(Calendrie.OrdinalParts other) -> int
Calendrie.OrdinalParts.DayOfYear.get -> int
Calendrie.OrdinalParts.DayOfYear.init -> void
Calendrie.OrdinalParts.OrdinalParts() -> void
Calendrie.OrdinalParts.OrdinalParts(int Year, int DayOfYear) -> void
Calendrie.OrdinalParts.Year.get -> int
Calendrie.OrdinalParts.Year.init -> void
Calendrie.Systems.Armenian13Calendar
Calendrie.Systems.Armenian13Calendar.Armenian13Calendar() -> void
Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.AddWeeks(int weeks) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Armenian13Date() -> void
Calendrie.Systems.Armenian13Date.Armenian13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Armenian13Date.Armenian13Date(int year, int month, int day) -> void
Calendrie.Systems.Armenian13Date.Century.get -> int
Calendrie.Systems.Armenian13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Armenian13Date.CompareTo(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountDaysSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Armenian13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Armenian13Date.CountMonthsSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Armenian13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Armenian13Date.CountWeeksSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.CountYearsSince(Calendrie.Systems.Armenian13Date other) -> int
Calendrie.Systems.Armenian13Date.Day.get -> int
Calendrie.Systems.Armenian13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Armenian13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Armenian13Date.DayOfYear.get -> int
Calendrie.Systems.Armenian13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Armenian13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Armenian13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Armenian13Date.Equals(Calendrie.Systems.Armenian13Date other) -> bool
Calendrie.Systems.Armenian13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Armenian13Date.IsIntercalary.get -> bool
Calendrie.Systems.Armenian13Date.IsSupplementary.get -> bool
Calendrie.Systems.Armenian13Date.Month.get -> int
Calendrie.Systems.Armenian13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.NextDay() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.NextWeek() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusDays(int days) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusMonths(int months) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PlusYears(int years) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PreviousDay() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.PreviousWeek() -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithDay(int newDay) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithMonth(int newMonth) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.WithYear(int newYear) -> Calendrie.Systems.Armenian13Date
Calendrie.Systems.Armenian13Date.Year.get -> int
Calendrie.Systems.Armenian13Date.YearOfCentury.get -> int
Calendrie.Systems.Armenian13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianCalendar
Calendrie.Systems.ArmenianCalendar.ArmenianCalendar() -> void
Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.AddWeeks(int weeks) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.ArmenianDate() -> void
Calendrie.Systems.ArmenianDate.ArmenianDate(int year, int dayOfYear) -> void
Calendrie.Systems.ArmenianDate.ArmenianDate(int year, int month, int day) -> void
Calendrie.Systems.ArmenianDate.Century.get -> int
Calendrie.Systems.ArmenianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ArmenianDate.CompareTo(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountDaysSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.ArmenianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.ArmenianDate.CountMonthsSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.ArmenianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.ArmenianDate.CountWeeksSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.CountYearsSince(Calendrie.Systems.ArmenianDate other) -> int
Calendrie.Systems.ArmenianDate.Day.get -> int
Calendrie.Systems.ArmenianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.ArmenianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.ArmenianDate.DayOfYear.get -> int
Calendrie.Systems.ArmenianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.ArmenianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.ArmenianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.ArmenianDate.Equals(Calendrie.Systems.ArmenianDate other) -> bool
Calendrie.Systems.ArmenianDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.ArmenianDate.IsIntercalary.get -> bool
Calendrie.Systems.ArmenianDate.IsSupplementary.get -> bool
Calendrie.Systems.ArmenianDate.Month.get -> int
Calendrie.Systems.ArmenianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.NextDay() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.NextWeek() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusDays(int days) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusMonths(int months) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PlusYears(int years) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PreviousDay() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.PreviousWeek() -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithDay(int newDay) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithMonth(int newMonth) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.WithYear(int newYear) -> Calendrie.Systems.ArmenianDate
Calendrie.Systems.ArmenianDate.Year.get -> int
Calendrie.Systems.ArmenianDate.YearOfCentury.get -> int
Calendrie.Systems.ArmenianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CalendarSystem<TDate>
Calendrie.Systems.CalendarSystem<TDate>.GetDaysInMonth(int year, int month) -> System.Collections.Generic.IEnumerable<TDate>!
Calendrie.Systems.CalendarSystem<TDate>.GetDaysInYear(int year) -> System.Collections.Generic.IEnumerable<TDate>!
Calendrie.Systems.CalendarSystem<TDate>.GetEndOfMonth(int year, int month) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetEndOfMonth(TDate date) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetEndOfYear(int year) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetEndOfYear(TDate date) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetStartOfMonth(int year, int month) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetStartOfMonth(TDate date) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetStartOfYear(int year) -> TDate
Calendrie.Systems.CalendarSystem<TDate>.GetStartOfYear(TDate date) -> TDate
Calendrie.Systems.CivilCalendar
Calendrie.Systems.CivilCalendar.CivilCalendar() -> void
Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.AddWeeks(int weeks) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Century.get -> int
Calendrie.Systems.CivilDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CivilDate.CivilDate() -> void
Calendrie.Systems.CivilDate.CivilDate(int year, int dayOfYear) -> void
Calendrie.Systems.CivilDate.CivilDate(int year, int month, int day) -> void
Calendrie.Systems.CivilDate.CompareTo(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountDaysSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.CivilDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.CivilDate.CountMonthsSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.CivilDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.CivilDate.CountWeeksSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.CountYearsSince(Calendrie.Systems.CivilDate other) -> int
Calendrie.Systems.CivilDate.Day.get -> int
Calendrie.Systems.CivilDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.CivilDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.CivilDate.DayOfYear.get -> int
Calendrie.Systems.CivilDate.DaysSinceZero.get -> int
Calendrie.Systems.CivilDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.CivilDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.CivilDate.Equals(Calendrie.Systems.CivilDate other) -> bool
Calendrie.Systems.CivilDate.IsIntercalary.get -> bool
Calendrie.Systems.CivilDate.Month.get -> int
Calendrie.Systems.CivilDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.NextDay() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.NextWeek() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusDays(int days) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusMonths(int months) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PlusYears(int years) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PreviousDay() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.PreviousWeek() -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.ToGregorianDate() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.CivilDate.WithDay(int newDay) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.WithMonth(int newMonth) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.WithYear(int newYear) -> Calendrie.Systems.CivilDate
Calendrie.Systems.CivilDate.Year.get -> int
Calendrie.Systems.CivilDate.YearOfCentury.get -> int
Calendrie.Systems.CivilDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Calendar
Calendrie.Systems.Coptic13Calendar.Coptic13Calendar() -> void
Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.AddWeeks(int weeks) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Century.get -> int
Calendrie.Systems.Coptic13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Coptic13Date.CompareTo(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.Coptic13Date() -> void
Calendrie.Systems.Coptic13Date.Coptic13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Coptic13Date.Coptic13Date(int year, int month, int day) -> void
Calendrie.Systems.Coptic13Date.CountDaysSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Coptic13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Coptic13Date.CountMonthsSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Coptic13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Coptic13Date.CountWeeksSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.CountYearsSince(Calendrie.Systems.Coptic13Date other) -> int
Calendrie.Systems.Coptic13Date.Day.get -> int
Calendrie.Systems.Coptic13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Coptic13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Coptic13Date.DayOfYear.get -> int
Calendrie.Systems.Coptic13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Coptic13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Coptic13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Coptic13Date.Equals(Calendrie.Systems.Coptic13Date other) -> bool
Calendrie.Systems.Coptic13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Coptic13Date.IsIntercalary.get -> bool
Calendrie.Systems.Coptic13Date.IsSupplementary.get -> bool
Calendrie.Systems.Coptic13Date.Month.get -> int
Calendrie.Systems.Coptic13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.NextDay() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.NextWeek() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusDays(int days) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusMonths(int months) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PlusYears(int years) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PreviousDay() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.PreviousWeek() -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithDay(int newDay) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithMonth(int newMonth) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.WithYear(int newYear) -> Calendrie.Systems.Coptic13Date
Calendrie.Systems.Coptic13Date.Year.get -> int
Calendrie.Systems.Coptic13Date.YearOfCentury.get -> int
Calendrie.Systems.Coptic13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticCalendar
Calendrie.Systems.CopticCalendar.CopticCalendar() -> void
Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.AddWeeks(int weeks) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Century.get -> int
Calendrie.Systems.CopticDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.CopticDate.CompareTo(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CopticDate() -> void
Calendrie.Systems.CopticDate.CopticDate(int year, int dayOfYear) -> void
Calendrie.Systems.CopticDate.CopticDate(int year, int month, int day) -> void
Calendrie.Systems.CopticDate.CountDaysSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.CopticDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.CopticDate.CountMonthsSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.CopticDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.CopticDate.CountWeeksSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.CountYearsSince(Calendrie.Systems.CopticDate other) -> int
Calendrie.Systems.CopticDate.Day.get -> int
Calendrie.Systems.CopticDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.CopticDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.CopticDate.DayOfYear.get -> int
Calendrie.Systems.CopticDate.DaysSinceEpoch.get -> int
Calendrie.Systems.CopticDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.CopticDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.CopticDate.Equals(Calendrie.Systems.CopticDate other) -> bool
Calendrie.Systems.CopticDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.CopticDate.IsIntercalary.get -> bool
Calendrie.Systems.CopticDate.IsSupplementary.get -> bool
Calendrie.Systems.CopticDate.Month.get -> int
Calendrie.Systems.CopticDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.NextDay() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.NextWeek() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusDays(int days) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusMonths(int months) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PlusYears(int years) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PreviousDay() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.PreviousWeek() -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithDay(int newDay) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithMonth(int newMonth) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.WithYear(int newYear) -> Calendrie.Systems.CopticDate
Calendrie.Systems.CopticDate.Year.get -> int
Calendrie.Systems.CopticDate.YearOfCentury.get -> int
Calendrie.Systems.CopticDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Calendar
Calendrie.Systems.Ethiopic13Calendar.Ethiopic13Calendar() -> void
Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.AddWeeks(int weeks) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Century.get -> int
Calendrie.Systems.Ethiopic13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Ethiopic13Date.CompareTo(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountDaysSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Ethiopic13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Ethiopic13Date.CountMonthsSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Ethiopic13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Ethiopic13Date.CountWeeksSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.CountYearsSince(Calendrie.Systems.Ethiopic13Date other) -> int
Calendrie.Systems.Ethiopic13Date.Day.get -> int
Calendrie.Systems.Ethiopic13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Ethiopic13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Ethiopic13Date.DayOfYear.get -> int
Calendrie.Systems.Ethiopic13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Ethiopic13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Ethiopic13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Ethiopic13Date.Equals(Calendrie.Systems.Ethiopic13Date other) -> bool
Calendrie.Systems.Ethiopic13Date.Ethiopic13Date() -> void
Calendrie.Systems.Ethiopic13Date.Ethiopic13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Ethiopic13Date.Ethiopic13Date(int year, int month, int day) -> void
Calendrie.Systems.Ethiopic13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Ethiopic13Date.IsIntercalary.get -> bool
Calendrie.Systems.Ethiopic13Date.IsSupplementary.get -> bool
Calendrie.Systems.Ethiopic13Date.Month.get -> int
Calendrie.Systems.Ethiopic13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.NextDay() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.NextWeek() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusDays(int days) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusMonths(int months) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PlusYears(int years) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PreviousDay() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.PreviousWeek() -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithDay(int newDay) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithMonth(int newMonth) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.WithYear(int newYear) -> Calendrie.Systems.Ethiopic13Date
Calendrie.Systems.Ethiopic13Date.Year.get -> int
Calendrie.Systems.Ethiopic13Date.YearOfCentury.get -> int
Calendrie.Systems.Ethiopic13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicCalendar
Calendrie.Systems.EthiopicCalendar.EthiopicCalendar() -> void
Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.AddWeeks(int weeks) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Century.get -> int
Calendrie.Systems.EthiopicDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.EthiopicDate.CompareTo(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountDaysSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.EthiopicDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.EthiopicDate.CountMonthsSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.EthiopicDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.EthiopicDate.CountWeeksSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.CountYearsSince(Calendrie.Systems.EthiopicDate other) -> int
Calendrie.Systems.EthiopicDate.Day.get -> int
Calendrie.Systems.EthiopicDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.EthiopicDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.EthiopicDate.DayOfYear.get -> int
Calendrie.Systems.EthiopicDate.DaysSinceEpoch.get -> int
Calendrie.Systems.EthiopicDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.EthiopicDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.EthiopicDate.Equals(Calendrie.Systems.EthiopicDate other) -> bool
Calendrie.Systems.EthiopicDate.EthiopicDate() -> void
Calendrie.Systems.EthiopicDate.EthiopicDate(int year, int dayOfYear) -> void
Calendrie.Systems.EthiopicDate.EthiopicDate(int year, int month, int day) -> void
Calendrie.Systems.EthiopicDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.EthiopicDate.IsIntercalary.get -> bool
Calendrie.Systems.EthiopicDate.IsSupplementary.get -> bool
Calendrie.Systems.EthiopicDate.Month.get -> int
Calendrie.Systems.EthiopicDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.NextDay() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.NextWeek() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusDays(int days) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusMonths(int months) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PlusYears(int years) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PreviousDay() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.PreviousWeek() -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithDay(int newDay) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithMonth(int newMonth) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.WithYear(int newYear) -> Calendrie.Systems.EthiopicDate
Calendrie.Systems.EthiopicDate.Year.get -> int
Calendrie.Systems.EthiopicDate.YearOfCentury.get -> int
Calendrie.Systems.EthiopicDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianCalendar
Calendrie.Systems.GregorianCalendar.GregorianCalendar() -> void
Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.AddWeeks(int weeks) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Century.get -> int
Calendrie.Systems.GregorianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.GregorianDate.CompareTo(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountDaysSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.GregorianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.GregorianDate.CountMonthsSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.GregorianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.GregorianDate.CountWeeksSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.CountYearsSince(Calendrie.Systems.GregorianDate other) -> int
Calendrie.Systems.GregorianDate.Day.get -> int
Calendrie.Systems.GregorianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.GregorianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.GregorianDate.DayOfYear.get -> int
Calendrie.Systems.GregorianDate.DaysSinceZero.get -> int
Calendrie.Systems.GregorianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.GregorianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.GregorianDate.Equals(Calendrie.Systems.GregorianDate other) -> bool
Calendrie.Systems.GregorianDate.GregorianDate() -> void
Calendrie.Systems.GregorianDate.GregorianDate(int year, int dayOfYear) -> void
Calendrie.Systems.GregorianDate.GregorianDate(int year, int month, int day) -> void
Calendrie.Systems.GregorianDate.IsIntercalary.get -> bool
Calendrie.Systems.GregorianDate.Month.get -> int
Calendrie.Systems.GregorianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.NextDay() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.NextWeek() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusDays(int days) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusMonths(int months) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PlusYears(int years) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PreviousDay() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.PreviousWeek() -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithDay(int newDay) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithMonth(int newMonth) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.WithYear(int newYear) -> Calendrie.Systems.GregorianDate
Calendrie.Systems.GregorianDate.Year.get -> int
Calendrie.Systems.GregorianDate.YearOfCentury.get -> int
Calendrie.Systems.GregorianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.IUnsafeDateFactory<TDate>
Calendrie.Systems.JulianCalendar
Calendrie.Systems.JulianCalendar.JulianCalendar() -> void
Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.AddWeeks(int weeks) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Century.get -> int
Calendrie.Systems.JulianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.JulianDate.CompareTo(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountDaysSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.JulianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.JulianDate.CountMonthsSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.JulianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.JulianDate.CountWeeksSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.CountYearsSince(Calendrie.Systems.JulianDate other) -> int
Calendrie.Systems.JulianDate.Day.get -> int
Calendrie.Systems.JulianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.JulianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.JulianDate.DayOfYear.get -> int
Calendrie.Systems.JulianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.JulianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.JulianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.JulianDate.Equals(Calendrie.Systems.JulianDate other) -> bool
Calendrie.Systems.JulianDate.IsIntercalary.get -> bool
Calendrie.Systems.JulianDate.JulianDate() -> void
Calendrie.Systems.JulianDate.JulianDate(int year, int dayOfYear) -> void
Calendrie.Systems.JulianDate.JulianDate(int year, int month, int day) -> void
Calendrie.Systems.JulianDate.Month.get -> int
Calendrie.Systems.JulianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.NextDay() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.NextWeek() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusDays(int days) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusMonths(int months) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PlusYears(int years) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PreviousDay() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.PreviousWeek() -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithDay(int newDay) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithMonth(int newMonth) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.WithYear(int newYear) -> Calendrie.Systems.JulianDate
Calendrie.Systems.JulianDate.Year.get -> int
Calendrie.Systems.JulianDate.YearOfCentury.get -> int
Calendrie.Systems.JulianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicCalendar
Calendrie.Systems.TabularIslamicCalendar.TabularIslamicCalendar() -> void
Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.AddWeeks(int weeks) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Century.get -> int
Calendrie.Systems.TabularIslamicDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.TabularIslamicDate.CompareTo(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountDaysSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.TabularIslamicDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.TabularIslamicDate.CountMonthsSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.TabularIslamicDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.TabularIslamicDate.CountWeeksSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.CountYearsSince(Calendrie.Systems.TabularIslamicDate other) -> int
Calendrie.Systems.TabularIslamicDate.Day.get -> int
Calendrie.Systems.TabularIslamicDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.TabularIslamicDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.TabularIslamicDate.DayOfYear.get -> int
Calendrie.Systems.TabularIslamicDate.DaysSinceEpoch.get -> int
Calendrie.Systems.TabularIslamicDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.TabularIslamicDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.TabularIslamicDate.Equals(Calendrie.Systems.TabularIslamicDate other) -> bool
Calendrie.Systems.TabularIslamicDate.IsIntercalary.get -> bool
Calendrie.Systems.TabularIslamicDate.Month.get -> int
Calendrie.Systems.TabularIslamicDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.NextDay() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.NextWeek() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusDays(int days) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusMonths(int months) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PlusYears(int years) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PreviousDay() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.PreviousWeek() -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.TabularIslamicDate() -> void
Calendrie.Systems.TabularIslamicDate.TabularIslamicDate(int year, int dayOfYear) -> void
Calendrie.Systems.TabularIslamicDate.TabularIslamicDate(int year, int month, int day) -> void
Calendrie.Systems.TabularIslamicDate.WithDay(int newDay) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.WithMonth(int newMonth) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.WithYear(int newYear) -> Calendrie.Systems.TabularIslamicDate
Calendrie.Systems.TabularIslamicDate.Year.get -> int
Calendrie.Systems.TabularIslamicDate.YearOfCentury.get -> int
Calendrie.Systems.TabularIslamicDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldCalendar
Calendrie.Systems.WorldCalendar.CountDaysInWorldMonth(int year, int month) -> int
Calendrie.Systems.WorldCalendar.WorldCalendar() -> void
Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.AddWeeks(int weeks) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.Century.get -> int
Calendrie.Systems.WorldDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.WorldDate.CompareTo(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountDaysSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.WorldDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.WorldDate.CountMonthsSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.WorldDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.WorldDate.CountWeeksSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.CountYearsSince(Calendrie.Systems.WorldDate other) -> int
Calendrie.Systems.WorldDate.Day.get -> int
Calendrie.Systems.WorldDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.WorldDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.WorldDate.DayOfYear.get -> int
Calendrie.Systems.WorldDate.DaysSinceEpoch.get -> int
Calendrie.Systems.WorldDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.WorldDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.WorldDate.Equals(Calendrie.Systems.WorldDate other) -> bool
Calendrie.Systems.WorldDate.IsBlank.get -> bool
Calendrie.Systems.WorldDate.IsIntercalary.get -> bool
Calendrie.Systems.WorldDate.IsSupplementary.get -> bool
Calendrie.Systems.WorldDate.Month.get -> int
Calendrie.Systems.WorldDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.NextDay() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.NextWeek() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusDays(int days) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusMonths(int months) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PlusYears(int years) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PreviousDay() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.PreviousWeek() -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithDay(int newDay) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithMonth(int newMonth) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WithYear(int newYear) -> Calendrie.Systems.WorldDate
Calendrie.Systems.WorldDate.WorldDate() -> void
Calendrie.Systems.WorldDate.WorldDate(int year, int dayOfYear) -> void
Calendrie.Systems.WorldDate.WorldDate(int year, int month, int day) -> void
Calendrie.Systems.WorldDate.Year.get -> int
Calendrie.Systems.WorldDate.YearOfCentury.get -> int
Calendrie.Systems.WorldDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Calendar
Calendrie.Systems.Zoroastrian13Calendar.Zoroastrian13Calendar() -> void
Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.AddWeeks(int weeks) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Century.get -> int
Calendrie.Systems.Zoroastrian13Date.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Date.CompareTo(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountDaysSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountElapsedDaysInMonth() -> int
Calendrie.Systems.Zoroastrian13Date.CountElapsedDaysInYear() -> int
Calendrie.Systems.Zoroastrian13Date.CountMonthsSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountRemainingDaysInMonth() -> int
Calendrie.Systems.Zoroastrian13Date.CountRemainingDaysInYear() -> int
Calendrie.Systems.Zoroastrian13Date.CountWeeksSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.CountYearsSince(Calendrie.Systems.Zoroastrian13Date other) -> int
Calendrie.Systems.Zoroastrian13Date.Day.get -> int
Calendrie.Systems.Zoroastrian13Date.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.Zoroastrian13Date.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.Zoroastrian13Date.DayOfYear.get -> int
Calendrie.Systems.Zoroastrian13Date.DaysSinceEpoch.get -> int
Calendrie.Systems.Zoroastrian13Date.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.Zoroastrian13Date.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.Zoroastrian13Date.Equals(Calendrie.Systems.Zoroastrian13Date other) -> bool
Calendrie.Systems.Zoroastrian13Date.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.Zoroastrian13Date.IsIntercalary.get -> bool
Calendrie.Systems.Zoroastrian13Date.IsSupplementary.get -> bool
Calendrie.Systems.Zoroastrian13Date.Month.get -> int
Calendrie.Systems.Zoroastrian13Date.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.NextDay() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.NextWeek() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusDays(int days) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusMonths(int months) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PlusYears(int years) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PreviousDay() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.PreviousWeek() -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithDay(int newDay) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithMonth(int newMonth) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.WithYear(int newYear) -> Calendrie.Systems.Zoroastrian13Date
Calendrie.Systems.Zoroastrian13Date.Year.get -> int
Calendrie.Systems.Zoroastrian13Date.YearOfCentury.get -> int
Calendrie.Systems.Zoroastrian13Date.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.Zoroastrian13Date.Zoroastrian13Date() -> void
Calendrie.Systems.Zoroastrian13Date.Zoroastrian13Date(int year, int dayOfYear) -> void
Calendrie.Systems.Zoroastrian13Date.Zoroastrian13Date(int year, int month, int day) -> void
Calendrie.Systems.ZoroastrianCalendar
Calendrie.Systems.ZoroastrianCalendar.ZoroastrianCalendar() -> void
Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.AddWeeks(int weeks) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Century.get -> int
Calendrie.Systems.ZoroastrianDate.CenturyOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianDate.CompareTo(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountDaysSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountElapsedDaysInMonth() -> int
Calendrie.Systems.ZoroastrianDate.CountElapsedDaysInYear() -> int
Calendrie.Systems.ZoroastrianDate.CountMonthsSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountRemainingDaysInMonth() -> int
Calendrie.Systems.ZoroastrianDate.CountRemainingDaysInYear() -> int
Calendrie.Systems.ZoroastrianDate.CountWeeksSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.CountYearsSince(Calendrie.Systems.ZoroastrianDate other) -> int
Calendrie.Systems.ZoroastrianDate.Day.get -> int
Calendrie.Systems.ZoroastrianDate.DayNumber.get -> Calendrie.DayNumber
Calendrie.Systems.ZoroastrianDate.DayOfWeek.get -> System.DayOfWeek
Calendrie.Systems.ZoroastrianDate.DayOfYear.get -> int
Calendrie.Systems.ZoroastrianDate.DaysSinceEpoch.get -> int
Calendrie.Systems.ZoroastrianDate.Deconstruct(out int year, out int dayOfYear) -> void
Calendrie.Systems.ZoroastrianDate.Deconstruct(out int year, out int month, out int day) -> void
Calendrie.Systems.ZoroastrianDate.Equals(Calendrie.Systems.ZoroastrianDate other) -> bool
Calendrie.Systems.ZoroastrianDate.IsEpagomenal(out int epagomenalNumber) -> bool
Calendrie.Systems.ZoroastrianDate.IsIntercalary.get -> bool
Calendrie.Systems.ZoroastrianDate.IsSupplementary.get -> bool
Calendrie.Systems.ZoroastrianDate.Month.get -> int
Calendrie.Systems.ZoroastrianDate.Nearest(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Next(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.NextDay() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.NextWeek() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusDays(int days) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusMonths(int months) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PlusYears(int years) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Previous(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PreviousDay() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.PreviousWeek() -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithDay(int newDay) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithDayOfYear(int newDayOfYear) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithMonth(int newMonth) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.WithYear(int newYear) -> Calendrie.Systems.ZoroastrianDate
Calendrie.Systems.ZoroastrianDate.Year.get -> int
Calendrie.Systems.ZoroastrianDate.YearOfCentury.get -> int
Calendrie.Systems.ZoroastrianDate.YearOfEra.get -> Calendrie.Ord
Calendrie.Systems.ZoroastrianDate.ZoroastrianDate() -> void
Calendrie.Systems.ZoroastrianDate.ZoroastrianDate(int year, int dayOfYear) -> void
Calendrie.Systems.ZoroastrianDate.ZoroastrianDate(int year, int month, int day) -> void
Calendrie.YearNumbering
const Calendrie.Core.CalendricalConstants.DaysInWanderingYear = 365 -> int
const Calendrie.Core.CalendricalConstants.DaysInWeek = 7 -> int
const Calendrie.Core.CalendricalConstants.DaysPer4JulianYearCycle = 1461 -> int
const Calendrie.Core.Schemas.Coptic12Schema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.Coptic13Schema.MonthsInYear = 13 -> int
const Calendrie.Core.Schemas.Coptic13Schema.VirtualMonth = 13 -> int
const Calendrie.Core.Schemas.CopticSchema.DaysInCopticMonth = 30 -> int
const Calendrie.Core.Schemas.CopticSchema.DaysPer4YearCycle = 1461 -> int
const Calendrie.Core.Schemas.Egyptian12Schema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.Egyptian13Schema.MonthsInYear = 13 -> int
const Calendrie.Core.Schemas.Egyptian13Schema.VirtualMonth = 13 -> int
const Calendrie.Core.Schemas.EgyptianSchema.DaysInEgyptianMonth = 30 -> int
const Calendrie.Core.Schemas.EgyptianSchema.DaysInYear = 365 -> int
const Calendrie.Core.Schemas.FrenchRepublican12Schema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.FrenchRepublican13Schema.MonthsInYear = 13 -> int
const Calendrie.Core.Schemas.FrenchRepublican13Schema.VirtualMonth = 13 -> int
const Calendrie.Core.Schemas.FrenchRepublicanSchema.DaysInFrenchRepublicanMonth = 30 -> int
const Calendrie.Core.Schemas.FrenchRepublicanSchema.DaysPer4000YearCycle = 1460969 -> long
const Calendrie.Core.Schemas.GJSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.GJSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.GJSchema.DaysInYearAfterFebruary = 306 -> int
const Calendrie.Core.Schemas.GJSchema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.GregorianSchema.DaysPer100YearSubcycle = 36524 -> int
const Calendrie.Core.Schemas.GregorianSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.GregorianSchema.DaysPer4YearSubcycle = 1461 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysInInternationalFixedMonth = 28 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.InternationalFixedSchema.MonthsInYear = 13 -> int
const Calendrie.Core.Schemas.JulianSchema.DaysPer4YearCycle = 1461 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysInYearBeforeJuly = 186 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysPer128YearSubcycle = 46751 -> int
const Calendrie.Core.Schemas.Persian2820Schema.DaysPer2820YearCycle = 1029983 -> int
const Calendrie.Core.Schemas.Persian2820Schema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.Persian2820Schema.Year0 = 474 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysInPositivistMonth = 28 -> int
const Calendrie.Core.Schemas.PositivistSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.PositivistSchema.MonthsInYear = 13 -> int
const Calendrie.Core.Schemas.PtolemaicSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.PtolemaicSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.DaysInCommonYear = 354 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.DaysInLeapYear = 355 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.DaysPer30YearCycle = 10631 -> int
const Calendrie.Core.Schemas.TabularIslamicSchema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.TropicaliaSchema.DaysInYearAfterFebruary = 306 -> int
const Calendrie.Core.Schemas.TropicalistaSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.TropicalistaSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.TropicalistaSchema.DaysPer128YearCycle = 46751 -> int
const Calendrie.Core.Schemas.TropicalistaSchema.DaysPer4YearSubcycle = 1461 -> int
const Calendrie.Core.Schemas.TropicalistaSchema.MonthsInYear = 12 -> int
const Calendrie.Core.Schemas.WorldSchema.DaysInCommonYear = 365 -> int
const Calendrie.Core.Schemas.WorldSchema.DaysInLeapYear = 366 -> int
const Calendrie.Core.Schemas.WorldSchema.DaysPer400YearCycle = 146097 -> int
const Calendrie.Core.Schemas.WorldSchema.MonthsInYear = 12 -> int
const Calendrie.Core.Yedoy.MaxDayOfYear = 1024 -> int
const Calendrie.Core.Yedoy.MaxYear = 2097152 -> int
const Calendrie.Core.Yedoy.MinDayOfYear = 1 -> int
const Calendrie.Core.Yedoy.MinYear = -2097151 -> int
const Calendrie.Core.Yemo.MaxMonth = 16 -> int
const Calendrie.Core.Yemo.MaxYear = 2097152 -> int
const Calendrie.Core.Yemo.MinMonth = 1 -> int
const Calendrie.Core.Yemo.MinYear = -2097151 -> int
const Calendrie.Core.Yemoda.MaxDay = 64 -> int
const Calendrie.Core.Yemoda.MaxMonth = 16 -> int
const Calendrie.Core.Yemoda.MaxYear = 2097152 -> int
const Calendrie.Core.Yemoda.MinDay = 1 -> int
const Calendrie.Core.Yemoda.MinMonth = 1 -> int
const Calendrie.Core.Yemoda.MinYear = -2097151 -> int
const Calendrie.DayNumber.MaxDaysSinceZero = 2147483646 -> int
const Calendrie.DayNumber.MinDaysSinceZero = -2147483647 -> int
const Calendrie.Ord.MaxAlgebraicValue = 2147483647 -> int
const Calendrie.Ord.MinAlgebraicValue = -2147483646 -> int
const Calendrie.Systems.Armenian13Calendar.MonthsInYear = 13 -> int
const Calendrie.Systems.Armenian13Calendar.VirtualMonth = 13 -> int
const Calendrie.Systems.ArmenianCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.CivilCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.Coptic13Calendar.MonthsInYear = 13 -> int
const Calendrie.Systems.Coptic13Calendar.VirtualMonth = 13 -> int
const Calendrie.Systems.CopticCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.Ethiopic13Calendar.MonthsInYear = 13 -> int
const Calendrie.Systems.Ethiopic13Calendar.VirtualMonth = 13 -> int
const Calendrie.Systems.EthiopicCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.GregorianCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.JulianCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.TabularIslamicCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.WorldCalendar.MonthsInYear = 12 -> int
const Calendrie.Systems.Zoroastrian13Calendar.MonthsInYear = 13 -> int
const Calendrie.Systems.Zoroastrian13Calendar.VirtualMonth = 13 -> int
const Calendrie.Systems.ZoroastrianCalendar.MonthsInYear = 12 -> int
override Calendrie.Core.Intervals.LowerRay<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.LowerRay<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.LowerRay<T>.ToString() -> string!
override Calendrie.Core.Intervals.OrderedPair<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.OrderedPair<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.OrderedPair<T>.ToString() -> string!
override Calendrie.Core.Intervals.Range<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.Range<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.Range<T>.ToString() -> string!
override Calendrie.Core.Intervals.RangeSet<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.RangeSet<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.RangeSet<T>.ToString() -> string!
override Calendrie.Core.Intervals.UpperRay<T>.Equals(object? obj) -> bool
override Calendrie.Core.Intervals.UpperRay<T>.GetHashCode() -> int
override Calendrie.Core.Intervals.UpperRay<T>.ToString() -> string!
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.CountDaysInYearBeforeMonth(int y, int m) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetMonth(int y, int doy, out int d) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetStartOfYear(int y) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetStartOfYearInMonths(int y) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetYear(int daysSinceEpoch) -> int
override Calendrie.Core.Prototyping.NonRegularSchemaPrototype.GetYear(int daysSinceEpoch, out int doy) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.CountDaysInYearBeforeMonth(int y, int m) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetMonth(int y, int doy, out int d) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetStartOfYear(int y) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetYear(int daysSinceEpoch) -> int
override Calendrie.Core.Prototyping.RegularSchemaPrototype.GetYear(int daysSinceEpoch, out int doy) -> int
override Calendrie.Core.Yedoy.Equals(object? obj) -> bool
override Calendrie.Core.Yedoy.GetHashCode() -> int
override Calendrie.Core.Yedoy.ToString() -> string!
override Calendrie.Core.Yemo.Equals(object? obj) -> bool
override Calendrie.Core.Yemo.GetHashCode() -> int
override Calendrie.Core.Yemo.ToString() -> string!
override Calendrie.Core.Yemoda.Equals(object? obj) -> bool
override Calendrie.Core.Yemoda.GetHashCode() -> int
override Calendrie.Core.Yemoda.ToString() -> string!
override Calendrie.DayNumber.Equals(object? obj) -> bool
override Calendrie.DayNumber.GetHashCode() -> int
override Calendrie.DayNumber.ToString() -> string!
override Calendrie.Hemerology.Calendar.ToString() -> string!
override Calendrie.Ord.Equals(object? obj) -> bool
override Calendrie.Ord.GetHashCode() -> int
override Calendrie.Ord.ToString() -> string!
override Calendrie.Systems.Armenian13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Armenian13Date.GetHashCode() -> int
override Calendrie.Systems.Armenian13Date.ToString() -> string!
override Calendrie.Systems.ArmenianDate.Equals(object? obj) -> bool
override Calendrie.Systems.ArmenianDate.GetHashCode() -> int
override Calendrie.Systems.ArmenianDate.ToString() -> string!
override Calendrie.Systems.CivilDate.Equals(object? obj) -> bool
override Calendrie.Systems.CivilDate.GetHashCode() -> int
override Calendrie.Systems.CivilDate.ToString() -> string!
override Calendrie.Systems.Coptic13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Coptic13Date.GetHashCode() -> int
override Calendrie.Systems.Coptic13Date.ToString() -> string!
override Calendrie.Systems.CopticDate.Equals(object? obj) -> bool
override Calendrie.Systems.CopticDate.GetHashCode() -> int
override Calendrie.Systems.CopticDate.ToString() -> string!
override Calendrie.Systems.Ethiopic13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Ethiopic13Date.GetHashCode() -> int
override Calendrie.Systems.Ethiopic13Date.ToString() -> string!
override Calendrie.Systems.EthiopicDate.Equals(object? obj) -> bool
override Calendrie.Systems.EthiopicDate.GetHashCode() -> int
override Calendrie.Systems.EthiopicDate.ToString() -> string!
override Calendrie.Systems.GregorianDate.Equals(object? obj) -> bool
override Calendrie.Systems.GregorianDate.GetHashCode() -> int
override Calendrie.Systems.GregorianDate.ToString() -> string!
override Calendrie.Systems.JulianDate.Equals(object? obj) -> bool
override Calendrie.Systems.JulianDate.GetHashCode() -> int
override Calendrie.Systems.JulianDate.ToString() -> string!
override Calendrie.Systems.TabularIslamicDate.Equals(object? obj) -> bool
override Calendrie.Systems.TabularIslamicDate.GetHashCode() -> int
override Calendrie.Systems.TabularIslamicDate.ToString() -> string!
override Calendrie.Systems.WorldDate.Equals(object? obj) -> bool
override Calendrie.Systems.WorldDate.GetHashCode() -> int
override Calendrie.Systems.WorldDate.ToString() -> string!
override Calendrie.Systems.Zoroastrian13Date.Equals(object? obj) -> bool
override Calendrie.Systems.Zoroastrian13Date.GetHashCode() -> int
override Calendrie.Systems.Zoroastrian13Date.ToString() -> string!
override Calendrie.Systems.ZoroastrianDate.Equals(object? obj) -> bool
override Calendrie.Systems.ZoroastrianDate.GetHashCode() -> int
override Calendrie.Systems.ZoroastrianDate.ToString() -> string!
override sealed Calendrie.Core.CalendricalSegment.ToString() -> string!
override sealed Calendrie.Core.Prototyping.NonRegularSchemaPrototype.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.RegularSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.RegularSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.RegularSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.RegularSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.RegularSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.RegularSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.RegularSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.CivilSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.CivilSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.CivilSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.CivilSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.CivilSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.Coptic12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.Coptic12Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Coptic12Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic12Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.Coptic12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic13Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.Coptic13Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Coptic13Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Coptic13Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.Coptic13Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.CopticSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.CopticSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.CopticSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.CopticSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.Egyptian12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.Egyptian12Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Egyptian12Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.Egyptian12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Egyptian13Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.Egyptian13Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Egyptian13Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.Egyptian13Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.EgyptianSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.EgyptianSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.GetYear(int daysSinceEpoch, out int doy) -> int
override sealed Calendrie.Core.Schemas.EgyptianSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.EgyptianSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.EgyptianSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.EgyptianSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublican13Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.GetYear(int daysSinceEpoch, out int doy) -> int
override sealed Calendrie.Core.Schemas.FrenchRepublicanSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.GJSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.GJSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.GJSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.GJSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.GJSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.GJSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.GJSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.GJSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.GJSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.GJSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.GJSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.GJSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.GregorianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.GregorianSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.GregorianSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.GregorianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.GregorianSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.InternationalFixedSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.JulianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.JulianSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.JulianSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.JulianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.JulianSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Persian2820Schema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.PositivistSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.PositivistSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.PositivistSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.PositivistSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.PositivistSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.PtolemaicSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.PtolemaicSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.PtolemaicSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.PtolemaicSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.PtolemaicSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TabularIslamicSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3031Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.Tropicalia3130Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TropicaliaSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TropicaliaSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TropicaliaSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.TropicaliaSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.TropicaliaSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.TropicaliaSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TropicalistaSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.TropicalistaSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.TropicalistaSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.TropicalistaSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.TropicalistaSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.TropicalistaSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.TropicalistaSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.TropicalistaSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysInMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysInYear(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountMonthsInYear(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.Family.get -> Calendrie.CalendricalFamily
override sealed Calendrie.Core.Schemas.WorldSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Calendrie.Core.Schemas.WorldSchema.GetEndOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Calendrie.Core.Schemas.WorldSchema.GetStartOfYear(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.GetStartOfYearInMonths(int y) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.GetYear(int daysSinceEpoch) -> int
override sealed Calendrie.Core.Schemas.WorldSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.IsLeapYear(int y) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.IsRegular(out int monthsInYear) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Calendrie.Core.Schemas.WorldSchema.PeriodicAdjustments.get -> Calendrie.CalendricalAdjustments
override sealed Calendrie.Systems.CalendarSystem<TDate>.CountDaysInMonth(int year, int month) -> int
override sealed Calendrie.Systems.CalendarSystem<TDate>.CountDaysInYear(int year) -> int
static Calendrie.Core.CalendricalSegment.Create(Calendrie.Core.ICalendricalSchema! schema, Calendrie.Core.Intervals.Range<int> supportedYears) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.Create<TSchema>(Calendrie.Core.Intervals.Range<int> supportedYears) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.CreateMaximal(Calendrie.Core.ICalendricalSchema! schema) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.CreateMaximal<TSchema>() -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.CreateMaximalOnOrAfterYear1(Calendrie.Core.ICalendricalSchema! schema) -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.CalendricalSegment.CreateMaximalOnOrAfterYear1<TSchema>() -> Calendrie.Core.CalendricalSegment!
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.LowerRay<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Adjacent(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> Calendrie.Core.Intervals.LowerRay<int>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> Calendrie.Core.Intervals.Range<int>?
static Calendrie.Core.Intervals.Interval.Coalesce(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> Calendrie.Core.Intervals.UpperRay<int>?
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.LowerRay<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Connected(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.Range<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Disjoint<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> bool
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.LowerRay<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.Range<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<Calendrie.DayNumber> x, Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> y) -> Calendrie.Core.Intervals.RangeSet<Calendrie.DayNumber>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.LowerRay<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.Range<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Gap(Calendrie.Core.Intervals.Range<int> x, Calendrie.Core.Intervals.UpperRay<int> y) -> Calendrie.Core.Intervals.RangeSet<int>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.Range<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.Interval.Intersect<T>(Calendrie.Core.Intervals.UpperRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.Interval.Span<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.Interval.Span<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.Range<T> y) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Interval.Span<T>(Calendrie.Core.Intervals.Range<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.Interval.Union<T>(Calendrie.Core.Intervals.LowerRay<T> x, Calendrie.Core.Intervals.LowerRay<T> y) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.Interval.Union<T>(Calendrie.Core.Intervals.UpperRay<T> x, Calendrie.Core.Intervals.UpperRay<T> y) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.LowerRay.Complement(this Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber> ray) -> Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber>
static Calendrie.Core.Intervals.LowerRay.Complement(this Calendrie.Core.Intervals.LowerRay<int> ray) -> Calendrie.Core.Intervals.UpperRay<int>
static Calendrie.Core.Intervals.LowerRay.EndingAt<T>(T max) -> Calendrie.Core.Intervals.LowerRay<T>
static Calendrie.Core.Intervals.LowerRay<T>.operator !=(Calendrie.Core.Intervals.LowerRay<T> left, Calendrie.Core.Intervals.LowerRay<T> right) -> bool
static Calendrie.Core.Intervals.LowerRay<T>.operator ==(Calendrie.Core.Intervals.LowerRay<T> left, Calendrie.Core.Intervals.LowerRay<T> right) -> bool
static Calendrie.Core.Intervals.OrderedPair.Create<T>(T x, T y) -> Calendrie.Core.Intervals.OrderedPair<T>
static Calendrie.Core.Intervals.OrderedPair<T>.operator !=(Calendrie.Core.Intervals.OrderedPair<T> left, Calendrie.Core.Intervals.OrderedPair<T> right) -> bool
static Calendrie.Core.Intervals.OrderedPair<T>.operator ==(Calendrie.Core.Intervals.OrderedPair<T> left, Calendrie.Core.Intervals.OrderedPair<T> right) -> bool
static Calendrie.Core.Intervals.Range.Count(this Calendrie.Core.Intervals.Range<Calendrie.DayNumber> range) -> int
static Calendrie.Core.Intervals.Range.Count(this Calendrie.Core.Intervals.Range<int> range) -> int
static Calendrie.Core.Intervals.Range.Create<T>(T min, T max) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.EndingAt<T>(T max) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.EndingAt<T>(T max, int length) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.FromEndpoints<T>(Calendrie.Core.Intervals.OrderedPair<T> endpoints) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.LongCount(this Calendrie.Core.Intervals.Range<Calendrie.DayNumber> range) -> long
static Calendrie.Core.Intervals.Range.LongCount(this Calendrie.Core.Intervals.Range<int> range) -> long
static Calendrie.Core.Intervals.Range.Maximal32.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.Core.Intervals.Range.Maximal<T>() -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.Singleton<T>(T value) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.StartingAt<T>(T min) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.StartingAt<T>(T min, int length) -> Calendrie.Core.Intervals.Range<T>
static Calendrie.Core.Intervals.Range.ToEnumerable(this Calendrie.Core.Intervals.Range<Calendrie.DayNumber> range) -> System.Collections.Generic.IEnumerable<Calendrie.DayNumber>!
static Calendrie.Core.Intervals.Range.ToEnumerable(this Calendrie.Core.Intervals.Range<int> range) -> System.Collections.Generic.IEnumerable<int>!
static Calendrie.Core.Intervals.Range<T>.operator !=(Calendrie.Core.Intervals.Range<T> left, Calendrie.Core.Intervals.Range<T> right) -> bool
static Calendrie.Core.Intervals.Range<T>.operator ==(Calendrie.Core.Intervals.Range<T> left, Calendrie.Core.Intervals.Range<T> right) -> bool
static Calendrie.Core.Intervals.RangeSet.Create<T>(T min, T max) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.RangeSet.Empty<T>() -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.RangeSet.FromEndpoints<T>(Calendrie.Core.Intervals.OrderedPair<T> endpoints) -> Calendrie.Core.Intervals.RangeSet<T>
static Calendrie.Core.Intervals.RangeSet<T>.operator !=(Calendrie.Core.Intervals.RangeSet<T> left, Calendrie.Core.Intervals.RangeSet<T> right) -> bool
static Calendrie.Core.Intervals.RangeSet<T>.operator ==(Calendrie.Core.Intervals.RangeSet<T> left, Calendrie.Core.Intervals.RangeSet<T> right) -> bool
static Calendrie.Core.Intervals.UpperRay.Complement(this Calendrie.Core.Intervals.UpperRay<Calendrie.DayNumber> ray) -> Calendrie.Core.Intervals.LowerRay<Calendrie.DayNumber>
static Calendrie.Core.Intervals.UpperRay.Complement(this Calendrie.Core.Intervals.UpperRay<int> ray) -> Calendrie.Core.Intervals.LowerRay<int>
static Calendrie.Core.Intervals.UpperRay.StartingAt<T>(T min) -> Calendrie.Core.Intervals.UpperRay<T>
static Calendrie.Core.Intervals.UpperRay<T>.operator !=(Calendrie.Core.Intervals.UpperRay<T> left, Calendrie.Core.Intervals.UpperRay<T> right) -> bool
static Calendrie.Core.Intervals.UpperRay<T>.operator ==(Calendrie.Core.Intervals.UpperRay<T> left, Calendrie.Core.Intervals.UpperRay<T> right) -> bool
static Calendrie.Core.LimitSchema.DefaultSupportedYears.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.Core.LimitSchema.MaxSupportedYears.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.Core.Yedoy.Create(int year, int dayOfYear) -> Calendrie.Core.Yedoy
static Calendrie.Core.Yedoy.FromBinary(int data) -> Calendrie.Core.Yedoy
static Calendrie.Core.Yedoy.MaxValue.get -> Calendrie.Core.Yedoy
static Calendrie.Core.Yedoy.MinValue.get -> Calendrie.Core.Yedoy
static Calendrie.Core.Yedoy.operator !=(Calendrie.Core.Yedoy left, Calendrie.Core.Yedoy right) -> bool
static Calendrie.Core.Yedoy.operator <(Calendrie.Core.Yedoy left, Calendrie.Core.Yedoy right) -> bool
static Calendrie.Core.Yedoy.operator <=(Calendrie.Core.Yedoy left, Calendrie.Core.Yedoy right) -> bool
static Calendrie.Core.Yedoy.operator ==(Calendrie.Core.Yedoy left, Calendrie.Core.Yedoy right) -> bool
static Calendrie.Core.Yedoy.operator >(Calendrie.Core.Yedoy left, Calendrie.Core.Yedoy right) -> bool
static Calendrie.Core.Yedoy.operator >=(Calendrie.Core.Yedoy left, Calendrie.Core.Yedoy right) -> bool
static Calendrie.Core.Yemo.Create(int year, int month) -> Calendrie.Core.Yemo
static Calendrie.Core.Yemo.FromBinary(int data) -> Calendrie.Core.Yemo
static Calendrie.Core.Yemo.operator !=(Calendrie.Core.Yemo left, Calendrie.Core.Yemo right) -> bool
static Calendrie.Core.Yemo.operator <(Calendrie.Core.Yemo left, Calendrie.Core.Yemo right) -> bool
static Calendrie.Core.Yemo.operator <=(Calendrie.Core.Yemo left, Calendrie.Core.Yemo right) -> bool
static Calendrie.Core.Yemo.operator ==(Calendrie.Core.Yemo left, Calendrie.Core.Yemo right) -> bool
static Calendrie.Core.Yemo.operator >(Calendrie.Core.Yemo left, Calendrie.Core.Yemo right) -> bool
static Calendrie.Core.Yemo.operator >=(Calendrie.Core.Yemo left, Calendrie.Core.Yemo right) -> bool
static Calendrie.Core.Yemoda.Create(int year, int month, int day) -> Calendrie.Core.Yemoda
static Calendrie.Core.Yemoda.FromBinary(int data) -> Calendrie.Core.Yemoda
static Calendrie.Core.Yemoda.FromBinary(long data, out uint extraData) -> Calendrie.Core.Yemoda
static Calendrie.Core.Yemoda.MaxValue.get -> Calendrie.Core.Yemoda
static Calendrie.Core.Yemoda.MinValue.get -> Calendrie.Core.Yemoda
static Calendrie.Core.Yemoda.operator !=(Calendrie.Core.Yemoda left, Calendrie.Core.Yemoda right) -> bool
static Calendrie.Core.Yemoda.operator <(Calendrie.Core.Yemoda left, Calendrie.Core.Yemoda right) -> bool
static Calendrie.Core.Yemoda.operator <=(Calendrie.Core.Yemoda left, Calendrie.Core.Yemoda right) -> bool
static Calendrie.Core.Yemoda.operator ==(Calendrie.Core.Yemoda left, Calendrie.Core.Yemoda right) -> bool
static Calendrie.Core.Yemoda.operator >(Calendrie.Core.Yemoda left, Calendrie.Core.Yemoda right) -> bool
static Calendrie.Core.Yemoda.operator >=(Calendrie.Core.Yemoda left, Calendrie.Core.Yemoda right) -> bool
static Calendrie.Core.Yemoda.SupportedYears.get -> Calendrie.Core.Intervals.Range<int>
static Calendrie.DateParts.AtStartOfMonth(int y, int m) -> Calendrie.DateParts
static Calendrie.DateParts.AtStartOfYear(int y) -> Calendrie.DateParts
static Calendrie.DateParts.operator <(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DateParts.operator <=(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DateParts.operator >(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DateParts.operator >=(Calendrie.DateParts left, Calendrie.DateParts right) -> bool
static Calendrie.DayNumber.FromGregorianOrdinalParts(int year, int dayOfYear) -> Calendrie.DayNumber
static Calendrie.DayNumber.FromGregorianParts(int year, int month, int day) -> Calendrie.DayNumber
static Calendrie.DayNumber.FromJulianOrdinalParts(int year, int dayOfYear) -> Calendrie.DayNumber
static Calendrie.DayNumber.FromJulianParts(int year, int month, int day) -> Calendrie.DayNumber
static Calendrie.DayNumber.GregorianDomain.get -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>
static Calendrie.DayNumber.JulianDomain.get -> Calendrie.Core.Intervals.Range<Calendrie.DayNumber>
static Calendrie.DayNumber.Max(Calendrie.DayNumber x, Calendrie.DayNumber y) -> Calendrie.DayNumber
static Calendrie.DayNumber.MaxValue.get -> Calendrie.DayNumber
static Calendrie.DayNumber.Min(Calendrie.DayNumber x, Calendrie.DayNumber y) -> Calendrie.DayNumber
static Calendrie.DayNumber.MinValue.get -> Calendrie.DayNumber
static Calendrie.DayNumber.operator !=(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator +(Calendrie.DayNumber value, int days) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator ++(Calendrie.DayNumber value) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator -(Calendrie.DayNumber left, Calendrie.DayNumber right) -> int
static Calendrie.DayNumber.operator -(Calendrie.DayNumber value, int days) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator --(Calendrie.DayNumber value) -> Calendrie.DayNumber
static Calendrie.DayNumber.operator <(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator <=(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator ==(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator >(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.operator >=(Calendrie.DayNumber left, Calendrie.DayNumber right) -> bool
static Calendrie.DayNumber.Zero.get -> Calendrie.DayNumber
static Calendrie.DayZero.Armenian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Coptic.get -> Calendrie.DayNumber
static Calendrie.DayZero.Egyptian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Ethiopic.get -> Calendrie.DayNumber
static Calendrie.DayZero.FrenchRepublican.get -> Calendrie.DayNumber
static Calendrie.DayZero.Gregorian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Holocene.get -> Calendrie.DayNumber
static Calendrie.DayZero.Julian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Minguo.get -> Calendrie.DayNumber
static Calendrie.DayZero.NewStyle.get -> Calendrie.DayNumber
static Calendrie.DayZero.OldStyle.get -> Calendrie.DayNumber
static Calendrie.DayZero.Persian.get -> Calendrie.DayNumber
static Calendrie.DayZero.Positivist.get -> Calendrie.DayNumber
static Calendrie.DayZero.RataDie.get -> Calendrie.DayNumber
static Calendrie.DayZero.SundayBeforeGregorian.get -> Calendrie.DayNumber
static Calendrie.DayZero.TabularIslamic.get -> Calendrie.DayNumber
static Calendrie.DayZero.Tropicalia.get -> Calendrie.DayNumber
static Calendrie.DayZero.Zoroastrian.get -> Calendrie.DayNumber
static Calendrie.MonthParts.AtStartOfYear(int y) -> Calendrie.MonthParts
static Calendrie.MonthParts.operator <(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.MonthParts.operator <=(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.MonthParts.operator >(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.MonthParts.operator >=(Calendrie.MonthParts left, Calendrie.MonthParts right) -> bool
static Calendrie.Ord.explicit operator int(Calendrie.Ord ord) -> int
static Calendrie.Ord.First.get -> Calendrie.Ord
static Calendrie.Ord.FromInt32(int value) -> Calendrie.Ord
static Calendrie.Ord.FromRank(int rank) -> Calendrie.Ord
static Calendrie.Ord.Max(Calendrie.Ord left, Calendrie.Ord right) -> Calendrie.Ord
static Calendrie.Ord.MaxValue.get -> Calendrie.Ord
static Calendrie.Ord.Min(Calendrie.Ord left, Calendrie.Ord right) -> Calendrie.Ord
static Calendrie.Ord.MinValue.get -> Calendrie.Ord
static Calendrie.Ord.operator !=(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator +(Calendrie.Ord ord, int num) -> Calendrie.Ord
static Calendrie.Ord.operator ++(Calendrie.Ord ord) -> Calendrie.Ord
static Calendrie.Ord.operator -(Calendrie.Ord left, Calendrie.Ord right) -> int
static Calendrie.Ord.operator -(Calendrie.Ord ord) -> Calendrie.Ord
static Calendrie.Ord.operator -(Calendrie.Ord ord, int num) -> Calendrie.Ord
static Calendrie.Ord.operator --(Calendrie.Ord ord) -> Calendrie.Ord
static Calendrie.Ord.operator <(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator <=(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator ==(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator >(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.operator >=(Calendrie.Ord left, Calendrie.Ord right) -> bool
static Calendrie.Ord.Zeroth.get -> Calendrie.Ord
static Calendrie.OrdinalParts.AtStartOfYear(int y) -> Calendrie.OrdinalParts
static Calendrie.OrdinalParts.operator <(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.OrdinalParts.operator <=(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.OrdinalParts.operator >(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.OrdinalParts.operator >=(Calendrie.OrdinalParts left, Calendrie.OrdinalParts right) -> bool
static Calendrie.Systems.Armenian13Calendar.MaxYear.get -> int
static Calendrie.Systems.Armenian13Calendar.MinYear.get -> int
static Calendrie.Systems.Armenian13Date.Calendar.get -> Calendrie.Systems.Armenian13Calendar!
static Calendrie.Systems.Armenian13Date.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.Max(Calendrie.Systems.Armenian13Date x, Calendrie.Systems.Armenian13Date y) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.MaxValue.get -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.Min(Calendrie.Systems.Armenian13Date x, Calendrie.Systems.Armenian13Date y) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.MinValue.get -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator !=(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator +(Calendrie.Systems.Armenian13Date value, int days) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator ++(Calendrie.Systems.Armenian13Date value) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator -(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> int
static Calendrie.Systems.Armenian13Date.operator -(Calendrie.Systems.Armenian13Date value, int days) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator --(Calendrie.Systems.Armenian13Date value) -> Calendrie.Systems.Armenian13Date
static Calendrie.Systems.Armenian13Date.operator <(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator <=(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator ==(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator >(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.Armenian13Date.operator >=(Calendrie.Systems.Armenian13Date left, Calendrie.Systems.Armenian13Date right) -> bool
static Calendrie.Systems.ArmenianCalendar.MaxYear.get -> int
static Calendrie.Systems.ArmenianCalendar.MinYear.get -> int
static Calendrie.Systems.ArmenianDate.Calendar.get -> Calendrie.Systems.ArmenianCalendar!
static Calendrie.Systems.ArmenianDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.Max(Calendrie.Systems.ArmenianDate x, Calendrie.Systems.ArmenianDate y) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.MaxValue.get -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.Min(Calendrie.Systems.ArmenianDate x, Calendrie.Systems.ArmenianDate y) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.MinValue.get -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator !=(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator +(Calendrie.Systems.ArmenianDate value, int days) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator ++(Calendrie.Systems.ArmenianDate value) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator -(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> int
static Calendrie.Systems.ArmenianDate.operator -(Calendrie.Systems.ArmenianDate value, int days) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator --(Calendrie.Systems.ArmenianDate value) -> Calendrie.Systems.ArmenianDate
static Calendrie.Systems.ArmenianDate.operator <(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator <=(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator ==(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator >(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.ArmenianDate.operator >=(Calendrie.Systems.ArmenianDate left, Calendrie.Systems.ArmenianDate right) -> bool
static Calendrie.Systems.CivilCalendar.MaxYear.get -> int
static Calendrie.Systems.CivilCalendar.MinYear.get -> int
static Calendrie.Systems.CivilDate.Calendar.get -> Calendrie.Systems.CivilCalendar!
static Calendrie.Systems.CivilDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.implicit operator Calendrie.Systems.GregorianDate(Calendrie.Systems.CivilDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.CivilDate.Max(Calendrie.Systems.CivilDate x, Calendrie.Systems.CivilDate y) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.MaxValue.get -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.Min(Calendrie.Systems.CivilDate x, Calendrie.Systems.CivilDate y) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.MinValue.get -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator !=(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator +(Calendrie.Systems.CivilDate value, int days) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator ++(Calendrie.Systems.CivilDate value) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator -(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> int
static Calendrie.Systems.CivilDate.operator -(Calendrie.Systems.CivilDate value, int days) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator --(Calendrie.Systems.CivilDate value) -> Calendrie.Systems.CivilDate
static Calendrie.Systems.CivilDate.operator <(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator <=(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator ==(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator >(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.CivilDate.operator >=(Calendrie.Systems.CivilDate left, Calendrie.Systems.CivilDate right) -> bool
static Calendrie.Systems.Coptic13Calendar.MaxYear.get -> int
static Calendrie.Systems.Coptic13Calendar.MinYear.get -> int
static Calendrie.Systems.Coptic13Date.Calendar.get -> Calendrie.Systems.Coptic13Calendar!
static Calendrie.Systems.Coptic13Date.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.Max(Calendrie.Systems.Coptic13Date x, Calendrie.Systems.Coptic13Date y) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.MaxValue.get -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.Min(Calendrie.Systems.Coptic13Date x, Calendrie.Systems.Coptic13Date y) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.MinValue.get -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator !=(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator +(Calendrie.Systems.Coptic13Date value, int days) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator ++(Calendrie.Systems.Coptic13Date value) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator -(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> int
static Calendrie.Systems.Coptic13Date.operator -(Calendrie.Systems.Coptic13Date value, int days) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator --(Calendrie.Systems.Coptic13Date value) -> Calendrie.Systems.Coptic13Date
static Calendrie.Systems.Coptic13Date.operator <(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator <=(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator ==(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator >(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.Coptic13Date.operator >=(Calendrie.Systems.Coptic13Date left, Calendrie.Systems.Coptic13Date right) -> bool
static Calendrie.Systems.CopticCalendar.MaxYear.get -> int
static Calendrie.Systems.CopticCalendar.MinYear.get -> int
static Calendrie.Systems.CopticDate.Calendar.get -> Calendrie.Systems.CopticCalendar!
static Calendrie.Systems.CopticDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.Max(Calendrie.Systems.CopticDate x, Calendrie.Systems.CopticDate y) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.MaxValue.get -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.Min(Calendrie.Systems.CopticDate x, Calendrie.Systems.CopticDate y) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.MinValue.get -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator !=(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator +(Calendrie.Systems.CopticDate value, int days) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator ++(Calendrie.Systems.CopticDate value) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator -(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> int
static Calendrie.Systems.CopticDate.operator -(Calendrie.Systems.CopticDate value, int days) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator --(Calendrie.Systems.CopticDate value) -> Calendrie.Systems.CopticDate
static Calendrie.Systems.CopticDate.operator <(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator <=(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator ==(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator >(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.CopticDate.operator >=(Calendrie.Systems.CopticDate left, Calendrie.Systems.CopticDate right) -> bool
static Calendrie.Systems.Ethiopic13Calendar.MaxYear.get -> int
static Calendrie.Systems.Ethiopic13Calendar.MinYear.get -> int
static Calendrie.Systems.Ethiopic13Date.Calendar.get -> Calendrie.Systems.Ethiopic13Calendar!
static Calendrie.Systems.Ethiopic13Date.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.Max(Calendrie.Systems.Ethiopic13Date x, Calendrie.Systems.Ethiopic13Date y) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.MaxValue.get -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.Min(Calendrie.Systems.Ethiopic13Date x, Calendrie.Systems.Ethiopic13Date y) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.MinValue.get -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator !=(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator +(Calendrie.Systems.Ethiopic13Date value, int days) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator ++(Calendrie.Systems.Ethiopic13Date value) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator -(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> int
static Calendrie.Systems.Ethiopic13Date.operator -(Calendrie.Systems.Ethiopic13Date value, int days) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator --(Calendrie.Systems.Ethiopic13Date value) -> Calendrie.Systems.Ethiopic13Date
static Calendrie.Systems.Ethiopic13Date.operator <(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator <=(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator ==(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator >(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.Ethiopic13Date.operator >=(Calendrie.Systems.Ethiopic13Date left, Calendrie.Systems.Ethiopic13Date right) -> bool
static Calendrie.Systems.EthiopicCalendar.MaxYear.get -> int
static Calendrie.Systems.EthiopicCalendar.MinYear.get -> int
static Calendrie.Systems.EthiopicDate.Calendar.get -> Calendrie.Systems.EthiopicCalendar!
static Calendrie.Systems.EthiopicDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.Max(Calendrie.Systems.EthiopicDate x, Calendrie.Systems.EthiopicDate y) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.MaxValue.get -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.Min(Calendrie.Systems.EthiopicDate x, Calendrie.Systems.EthiopicDate y) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.MinValue.get -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator !=(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator +(Calendrie.Systems.EthiopicDate value, int days) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator ++(Calendrie.Systems.EthiopicDate value) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator -(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> int
static Calendrie.Systems.EthiopicDate.operator -(Calendrie.Systems.EthiopicDate value, int days) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator --(Calendrie.Systems.EthiopicDate value) -> Calendrie.Systems.EthiopicDate
static Calendrie.Systems.EthiopicDate.operator <(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator <=(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator ==(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator >(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.EthiopicDate.operator >=(Calendrie.Systems.EthiopicDate left, Calendrie.Systems.EthiopicDate right) -> bool
static Calendrie.Systems.GregorianCalendar.MaxYear.get -> int
static Calendrie.Systems.GregorianCalendar.MinYear.get -> int
static Calendrie.Systems.GregorianDate.Calendar.get -> Calendrie.Systems.GregorianCalendar!
static Calendrie.Systems.GregorianDate.FromCivilDate(Calendrie.Systems.CivilDate date) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.Max(Calendrie.Systems.GregorianDate x, Calendrie.Systems.GregorianDate y) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.MaxValue.get -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.Min(Calendrie.Systems.GregorianDate x, Calendrie.Systems.GregorianDate y) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.MinValue.get -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator !=(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator +(Calendrie.Systems.GregorianDate value, int days) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator ++(Calendrie.Systems.GregorianDate value) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator -(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> int
static Calendrie.Systems.GregorianDate.operator -(Calendrie.Systems.GregorianDate value, int days) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator --(Calendrie.Systems.GregorianDate value) -> Calendrie.Systems.GregorianDate
static Calendrie.Systems.GregorianDate.operator <(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator <=(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator ==(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator >(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.GregorianDate.operator >=(Calendrie.Systems.GregorianDate left, Calendrie.Systems.GregorianDate right) -> bool
static Calendrie.Systems.JulianCalendar.MaxYear.get -> int
static Calendrie.Systems.JulianCalendar.MinYear.get -> int
static Calendrie.Systems.JulianDate.Calendar.get -> Calendrie.Systems.JulianCalendar!
static Calendrie.Systems.JulianDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.Max(Calendrie.Systems.JulianDate x, Calendrie.Systems.JulianDate y) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.MaxValue.get -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.Min(Calendrie.Systems.JulianDate x, Calendrie.Systems.JulianDate y) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.MinValue.get -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator !=(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator +(Calendrie.Systems.JulianDate value, int days) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator ++(Calendrie.Systems.JulianDate value) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator -(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> int
static Calendrie.Systems.JulianDate.operator -(Calendrie.Systems.JulianDate value, int days) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator --(Calendrie.Systems.JulianDate value) -> Calendrie.Systems.JulianDate
static Calendrie.Systems.JulianDate.operator <(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator <=(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator ==(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator >(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.JulianDate.operator >=(Calendrie.Systems.JulianDate left, Calendrie.Systems.JulianDate right) -> bool
static Calendrie.Systems.TabularIslamicCalendar.MaxYear.get -> int
static Calendrie.Systems.TabularIslamicCalendar.MinYear.get -> int
static Calendrie.Systems.TabularIslamicDate.Calendar.get -> Calendrie.Systems.TabularIslamicCalendar!
static Calendrie.Systems.TabularIslamicDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.Max(Calendrie.Systems.TabularIslamicDate x, Calendrie.Systems.TabularIslamicDate y) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.MaxValue.get -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.Min(Calendrie.Systems.TabularIslamicDate x, Calendrie.Systems.TabularIslamicDate y) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.MinValue.get -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator !=(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator +(Calendrie.Systems.TabularIslamicDate value, int days) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator ++(Calendrie.Systems.TabularIslamicDate value) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator -(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> int
static Calendrie.Systems.TabularIslamicDate.operator -(Calendrie.Systems.TabularIslamicDate value, int days) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator --(Calendrie.Systems.TabularIslamicDate value) -> Calendrie.Systems.TabularIslamicDate
static Calendrie.Systems.TabularIslamicDate.operator <(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator <=(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator ==(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator >(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.TabularIslamicDate.operator >=(Calendrie.Systems.TabularIslamicDate left, Calendrie.Systems.TabularIslamicDate right) -> bool
static Calendrie.Systems.WorldCalendar.MaxYear.get -> int
static Calendrie.Systems.WorldCalendar.MinYear.get -> int
static Calendrie.Systems.WorldDate.Calendar.get -> Calendrie.Systems.WorldCalendar!
static Calendrie.Systems.WorldDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.Max(Calendrie.Systems.WorldDate x, Calendrie.Systems.WorldDate y) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.MaxValue.get -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.Min(Calendrie.Systems.WorldDate x, Calendrie.Systems.WorldDate y) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.MinValue.get -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator !=(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator +(Calendrie.Systems.WorldDate value, int days) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator ++(Calendrie.Systems.WorldDate value) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator -(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> int
static Calendrie.Systems.WorldDate.operator -(Calendrie.Systems.WorldDate value, int days) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator --(Calendrie.Systems.WorldDate value) -> Calendrie.Systems.WorldDate
static Calendrie.Systems.WorldDate.operator <(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator <=(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator ==(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator >(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.WorldDate.operator >=(Calendrie.Systems.WorldDate left, Calendrie.Systems.WorldDate right) -> bool
static Calendrie.Systems.Zoroastrian13Calendar.MaxYear.get -> int
static Calendrie.Systems.Zoroastrian13Calendar.MinYear.get -> int
static Calendrie.Systems.Zoroastrian13Date.Calendar.get -> Calendrie.Systems.Zoroastrian13Calendar!
static Calendrie.Systems.Zoroastrian13Date.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.Max(Calendrie.Systems.Zoroastrian13Date x, Calendrie.Systems.Zoroastrian13Date y) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.MaxValue.get -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.Min(Calendrie.Systems.Zoroastrian13Date x, Calendrie.Systems.Zoroastrian13Date y) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.MinValue.get -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator !=(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator +(Calendrie.Systems.Zoroastrian13Date value, int days) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator ++(Calendrie.Systems.Zoroastrian13Date value) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator -(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> int
static Calendrie.Systems.Zoroastrian13Date.operator -(Calendrie.Systems.Zoroastrian13Date value, int days) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator --(Calendrie.Systems.Zoroastrian13Date value) -> Calendrie.Systems.Zoroastrian13Date
static Calendrie.Systems.Zoroastrian13Date.operator <(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator <=(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator ==(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator >(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.Zoroastrian13Date.operator >=(Calendrie.Systems.Zoroastrian13Date left, Calendrie.Systems.Zoroastrian13Date right) -> bool
static Calendrie.Systems.ZoroastrianCalendar.MaxYear.get -> int
static Calendrie.Systems.ZoroastrianCalendar.MinYear.get -> int
static Calendrie.Systems.ZoroastrianDate.Calendar.get -> Calendrie.Systems.ZoroastrianCalendar!
static Calendrie.Systems.ZoroastrianDate.FromDayNumber(Calendrie.DayNumber dayNumber) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.Max(Calendrie.Systems.ZoroastrianDate x, Calendrie.Systems.ZoroastrianDate y) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.MaxValue.get -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.Min(Calendrie.Systems.ZoroastrianDate x, Calendrie.Systems.ZoroastrianDate y) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.MinValue.get -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator !=(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator +(Calendrie.Systems.ZoroastrianDate value, int days) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator ++(Calendrie.Systems.ZoroastrianDate value) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator -(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> int
static Calendrie.Systems.ZoroastrianDate.operator -(Calendrie.Systems.ZoroastrianDate value, int days) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator --(Calendrie.Systems.ZoroastrianDate value) -> Calendrie.Systems.ZoroastrianDate
static Calendrie.Systems.ZoroastrianDate.operator <(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator <=(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator ==(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator >(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.Systems.ZoroastrianDate.operator >=(Calendrie.Systems.ZoroastrianDate left, Calendrie.Systems.ZoroastrianDate right) -> bool
static Calendrie.YearNumbering.GetCentury(int year) -> int
static Calendrie.YearNumbering.GetCentury(int year, out int yearOfCentury) -> int
static Calendrie.YearNumbering.GetDecade(int year, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetDecadeOfCentury(int year, out int century, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetIsoCentury(int year, out int yearOfCentury) -> int
static Calendrie.YearNumbering.GetIsoDecade(int year, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetIsoDecadeOfCentury(int year, out int century, out int yearOfDecade) -> int
static Calendrie.YearNumbering.GetIsoMillennium(int year, out int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetMillennium(int year, out int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetYearFromCentury(int century, int yearOfCentury) -> int
static Calendrie.YearNumbering.GetYearFromDecade(int decade, int yearOfDecade) -> int
static Calendrie.YearNumbering.GetYearFromIsoCentury(int century, int yearOfCentury) -> int
static Calendrie.YearNumbering.GetYearFromIsoDecade(int decade, int yearOfDecade) -> int
static Calendrie.YearNumbering.GetYearFromIsoMillennium(int millennium, int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetYearFromMillennium(int millennium, int yearOfMillennium) -> int
static Calendrie.YearNumbering.GetYearOfCentury(int year) -> int
virtual Calendrie.Core.CalendricalSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
virtual Calendrie.Core.CalendricalSchema.CountMonthsSinceEpoch(int y, int m) -> int
virtual Calendrie.Core.CalendricalSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
virtual Calendrie.Core.CalendricalSchema.GetEndOfYearInMonths(int y) -> int
virtual Calendrie.Core.CalendricalSchema.GetYear(int daysSinceEpoch, out int doy) -> int
